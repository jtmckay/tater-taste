(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __reExport = (target, module, copyDefault, desc) => {
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
          __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
    }
    return target;
  };
  var __toESM = (module, isNodeMode) => {
    return __reExport(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", !isNodeMode && module && module.__esModule ? { get: () => module.default, enumerable: true } : { value: module, enumerable: true })), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from2 = Object(arguments[s]);
          for (var key in from2) {
            if (hasOwnProperty2.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from2, symbols[i])) {
                to[symbols[i]] = from2[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var _assign = require_object_assign();
          var ReactVersion = "17.0.2";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          exports.StrictMode = 60108;
          exports.Profiler = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          exports.Suspense = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            exports.StrictMode = symbolFor("react.strict_mode");
            exports.Profiler = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            exports.Suspense = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: 0
          };
          var ReactCurrentOwner = {
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var IsSomeRendererActing = {
            current: false
          };
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner,
            IsSomeRendererActing,
            assign: _assign
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
          }
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            isMounted: function(publicInstance) {
              return false;
            },
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
              {
                throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
              }
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          _assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case exports.Profiler:
                return "Profiler";
              case exports.StrictMode:
                return "StrictMode";
              case exports.Suspense:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement4(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              self = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement9(element, config, children) {
            if (!!(element === null || element === void 0)) {
              {
                throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
              }
            }
            var propName;
            var props = _assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement6(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (Array.isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement6(mappedChild)) {
                  mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = "" + children;
                {
                  {
                    throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                  }
                }
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement6(children)) {
              {
                throw Error("React.Children.only expected to receive a single React element child.");
              }
            }
            return children;
          }
          function createContext5(defaultValue, calculateChangedBits) {
            if (calculateChangedBits === void 0) {
              calculateChangedBits = null;
            } else {
              {
                if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                  error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
                }
              }
            }
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              _calculateChangedBits: calculateChangedBits,
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              _threadCount: 0,
              Provider: null,
              Consumer: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context,
                _calculateChangedBits: context._calculateChangedBits
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              var pending = payload;
              pending._status = Pending;
              pending._result = thenable;
              thenable.then(function(moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default;
                  {
                    if (defaultExport === void 0) {
                      error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                    }
                  }
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = defaultExport;
                }
              }, function(error2) {
                if (payload._status === Pending) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
            }
            if (payload._status === Resolved) {
              return payload._result;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              _status: -1,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef31(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (render.displayName == null) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function memo2(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (type.displayName == null) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            if (!(dispatcher !== null)) {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext6(Context, unstable_observedBits) {
            var dispatcher = resolveDispatcher();
            {
              if (unstable_observedBits !== void 0) {
                error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
              }
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context, unstable_observedBits);
          }
          function useState12(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef18(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect15(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useLayoutEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback9(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle4(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue3(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case exports.Suspense:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentName(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName2 = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName2 + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (Array.isArray(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement6(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement6(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement6(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (Array.isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement4.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === exports.Fragment) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement9.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          {
            try {
              var frozenObject = Object.freeze({});
              /* @__PURE__ */ new Map([[frozenObject, null]]);
              /* @__PURE__ */ new Set([frozenObject]);
            } catch (e) {
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children5 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children5;
          exports.Component = Component;
          exports.PureComponent = PureComponent;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext5;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef31;
          exports.isValidElement = isValidElement6;
          exports.lazy = lazy;
          exports.memo = memo2;
          exports.useCallback = useCallback9;
          exports.useContext = useContext6;
          exports.useDebugValue = useDebugValue3;
          exports.useEffect = useEffect15;
          exports.useImperativeHandle = useImperativeHandle4;
          exports.useLayoutEffect = useLayoutEffect3;
          exports.useMemo = useMemo3;
          exports.useReducer = useReducer;
          exports.useRef = useRef18;
          exports.useState = useState12;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var requestHostCallback;
          var requestHostTimeout;
          var cancelHostTimeout;
          var requestPaint;
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          if (typeof window === "undefined" || typeof MessageChannel !== "function") {
            var _callback = null;
            var _timeoutID = null;
            var _flushCallback = function() {
              if (_callback !== null) {
                try {
                  var currentTime = exports.unstable_now();
                  var hasRemainingTime = true;
                  _callback(hasRemainingTime, currentTime);
                  _callback = null;
                } catch (e) {
                  setTimeout(_flushCallback, 0);
                  throw e;
                }
              }
            };
            requestHostCallback = function(cb) {
              if (_callback !== null) {
                setTimeout(requestHostCallback, 0, cb);
              } else {
                _callback = cb;
                setTimeout(_flushCallback, 0);
              }
            };
            requestHostTimeout = function(cb, ms) {
              _timeoutID = setTimeout(cb, ms);
            };
            cancelHostTimeout = function() {
              clearTimeout(_timeoutID);
            };
            exports.unstable_shouldYield = function() {
              return false;
            };
            requestPaint = exports.unstable_forceFrameRate = function() {
            };
          } else {
            var _setTimeout = window.setTimeout;
            var _clearTimeout = window.clearTimeout;
            if (typeof console !== "undefined") {
              var requestAnimationFrame = window.requestAnimationFrame;
              var cancelAnimationFrame = window.cancelAnimationFrame;
              if (typeof requestAnimationFrame !== "function") {
                console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
              if (typeof cancelAnimationFrame !== "function") {
                console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
              }
            }
            var isMessageLoopRunning = false;
            var scheduledHostCallback = null;
            var taskTimeoutID = -1;
            var yieldInterval = 5;
            var deadline = 0;
            {
              exports.unstable_shouldYield = function() {
                return exports.unstable_now() >= deadline;
              };
              requestPaint = function() {
              };
            }
            exports.unstable_forceFrameRate = function(fps) {
              if (fps < 0 || fps > 125) {
                console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
                return;
              }
              if (fps > 0) {
                yieldInterval = Math.floor(1e3 / fps);
              } else {
                yieldInterval = 5;
              }
            };
            var performWorkUntilDeadline = function() {
              if (scheduledHostCallback !== null) {
                var currentTime = exports.unstable_now();
                deadline = currentTime + yieldInterval;
                var hasTimeRemaining = true;
                try {
                  var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                  if (!hasMoreWork) {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                  } else {
                    port.postMessage(null);
                  }
                } catch (error) {
                  port.postMessage(null);
                  throw error;
                }
              } else {
                isMessageLoopRunning = false;
              }
            };
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            requestHostCallback = function(callback) {
              scheduledHostCallback = callback;
              if (!isMessageLoopRunning) {
                isMessageLoopRunning = true;
                port.postMessage(null);
              }
            };
            requestHostTimeout = function(callback, ms) {
              taskTimeoutID = _setTimeout(function() {
                callback(exports.unstable_now());
              }, ms);
            };
            cancelHostTimeout = function() {
              _clearTimeout(taskTimeoutID);
              taskTimeoutID = -1;
            };
          }
          function push(heap, node2) {
            var index = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index);
          }
          function peek2(heap) {
            var first = heap[0];
            return first === void 0 ? null : first;
          }
          function pop(heap) {
            var first = heap[0];
            if (first !== void 0) {
              var last3 = heap.pop();
              if (last3 !== first) {
                heap[0] = last3;
                siftDown(heap, last3, 0);
              }
              return first;
            } else {
              return null;
            }
          }
          function siftUp(heap, node2, i) {
            var index = i;
            while (true) {
              var parentIndex = index - 1 >>> 1;
              var parent = heap[parentIndex];
              if (parent !== void 0 && compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index] = parent;
                index = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index = i;
            var length2 = heap.length;
            while (index < length2) {
              var leftIndex = (index + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (left2 !== void 0 && compare(left2, node2) < 0) {
                if (right2 !== void 0 && compare(right2, left2) < 0) {
                  heap[index] = right2;
                  heap[rightIndex] = node2;
                  index = rightIndex;
                } else {
                  heap[index] = left2;
                  heap[leftIndex] = node2;
                  index = leftIndex;
                }
              } else if (right2 !== void 0 && compare(right2, node2) < 0) {
                heap[index] = right2;
                heap[rightIndex] = node2;
                index = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime = currentTime + delay;
              } else {
                startTime = currentTime;
              }
            } else {
              startTime = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime,
              expirationTime,
              sortIndex: -1
            };
            if (startTime > currentTime) {
              newTask.sortIndex = startTime;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_wrapCallback = unstable_wrapCallback;
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var DEFAULT_THREAD_ID = 0;
          var interactionIDCounter = 0;
          var threadIDCounter = 0;
          exports.__interactionsRef = null;
          exports.__subscriberRef = null;
          {
            exports.__interactionsRef = {
              current: /* @__PURE__ */ new Set()
            };
            exports.__subscriberRef = {
              current: null
            };
          }
          function unstable_clear(callback) {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = /* @__PURE__ */ new Set();
            try {
              return callback();
            } finally {
              exports.__interactionsRef.current = prevInteractions;
            }
          }
          function unstable_getCurrent() {
            {
              return exports.__interactionsRef.current;
            }
          }
          function unstable_getThreadID() {
            return ++threadIDCounter;
          }
          function unstable_trace(name, timestamp, callback) {
            var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
            var interaction = {
              __count: 1,
              id: interactionIDCounter++,
              name,
              timestamp
            };
            var prevInteractions = exports.__interactionsRef.current;
            var interactions = new Set(prevInteractions);
            interactions.add(interaction);
            exports.__interactionsRef.current = interactions;
            var subscriber = exports.__subscriberRef.current;
            var returnValue;
            try {
              if (subscriber !== null) {
                subscriber.onInteractionTraced(interaction);
              }
            } finally {
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(interactions, threadID);
                }
              } finally {
                try {
                  returnValue = callback();
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  try {
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(interactions, threadID);
                    }
                  } finally {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  }
                }
              }
            }
            return returnValue;
          }
          function unstable_wrap(callback) {
            var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
            var wrappedInteractions = exports.__interactionsRef.current;
            var subscriber = exports.__subscriberRef.current;
            if (subscriber !== null) {
              subscriber.onWorkScheduled(wrappedInteractions, threadID);
            }
            wrappedInteractions.forEach(function(interaction) {
              interaction.__count++;
            });
            var hasRun = false;
            function wrapped() {
              var prevInteractions = exports.__interactionsRef.current;
              exports.__interactionsRef.current = wrappedInteractions;
              subscriber = exports.__subscriberRef.current;
              try {
                var returnValue;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStarted(wrappedInteractions, threadID);
                  }
                } finally {
                  try {
                    returnValue = callback.apply(void 0, arguments);
                  } finally {
                    exports.__interactionsRef.current = prevInteractions;
                    if (subscriber !== null) {
                      subscriber.onWorkStopped(wrappedInteractions, threadID);
                    }
                  }
                }
                return returnValue;
              } finally {
                if (!hasRun) {
                  hasRun = true;
                  wrappedInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    }
                  });
                }
              }
            }
            wrapped.cancel = function cancel() {
              subscriber = exports.__subscriberRef.current;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkCanceled(wrappedInteractions, threadID);
                }
              } finally {
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            };
            return wrapped;
          }
          var subscribers = null;
          {
            subscribers = /* @__PURE__ */ new Set();
          }
          function unstable_subscribe(subscriber) {
            {
              subscribers.add(subscriber);
              if (subscribers.size === 1) {
                exports.__subscriberRef.current = {
                  onInteractionScheduledWorkCompleted,
                  onInteractionTraced,
                  onWorkCanceled,
                  onWorkScheduled,
                  onWorkStarted,
                  onWorkStopped
                };
              }
            }
          }
          function unstable_unsubscribe(subscriber) {
            {
              subscribers.delete(subscriber);
              if (subscribers.size === 0) {
                exports.__subscriberRef.current = null;
              }
            }
          }
          function onInteractionTraced(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionTraced(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onInteractionScheduledWorkCompleted(interaction) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkScheduled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkScheduled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStarted(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkStopped(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkStopped(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          function onWorkCanceled(interactions, threadID) {
            var didCatchError = false;
            var caughtError = null;
            subscribers.forEach(function(subscriber) {
              try {
                subscriber.onWorkCanceled(interactions, threadID);
              } catch (error) {
                if (!didCatchError) {
                  didCatchError = true;
                  caughtError = error;
                }
              }
            });
            if (didCatchError) {
              throw caughtError;
            }
          }
          exports.unstable_clear = unstable_clear;
          exports.unstable_getCurrent = unstable_getCurrent;
          exports.unstable_getThreadID = unstable_getThreadID;
          exports.unstable_subscribe = unstable_subscribe;
          exports.unstable_trace = unstable_trace;
          exports.unstable_unsubscribe = unstable_unsubscribe;
          exports.unstable_wrap = unstable_wrap;
        })();
      }
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS({
    "node_modules/scheduler/tracing.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_tracing_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React55 = require_react();
          var _assign = require_object_assign();
          var Scheduler = require_scheduler();
          var tracing = require_tracing();
          var ReactSharedInternals = React55.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function warn(format) {
            {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          if (!React55) {
            {
              throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment10 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef2 = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var FundamentalComponent = 20;
          var ScopeComponent = 21;
          var Block = 22;
          var OffscreenComponent = 23;
          var LegacyHiddenComponent = 24;
          var enableProfilerTimer = true;
          var enableFundamentalAPI = false;
          var enableNewReconciler = false;
          var warnAboutStringRefs = false;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var ROOT_ATTRIBUTE_NAME = "data-reactroot";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix3 = name.toLowerCase().slice(0, 5);
                  return prefix3 !== "data-" && prefix3 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties2.hasOwnProperty(name) ? properties2[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties2 = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
          });
          [
            "allowFullScreen",
            "async",
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            "itemScope"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
          });
          [
            "checked",
            "multiple",
            "muted",
            "selected"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
          });
          [
            "capture",
            "download"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
          });
          [
            "cols",
            "rows",
            "size",
            "span"
          ].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties2[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize2 = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize2);
            properties2[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
          });
          var xlinkHref = "xlinkHref";
          properties2[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties2[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (isOpaqueHydratingObject(expected)) {
                return expected;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef2:
                return describeFunctionComponentFrame(fiber.type.render);
              case Block:
                return describeFunctionComponentFrame(fiber.type._render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentName(owner.type);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function getIsRendering() {
            {
              return isRendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "object":
              case "string":
              case "undefined":
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = _assign({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || node2.value != value) {
                  node2.value = toString(value);
                }
              } else if (node2.value !== toString(value)) {
                node2.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  {
                    throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                  }
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (type !== "number" || getActiveElement(node2.ownerDocument) !== node2) {
              if (value == null) {
                node2.defaultValue = toString(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString(value)) {
                node2.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          function flattenChildren(children) {
            var content = "";
            React55.Children.forEach(children, function(child) {
              if (child == null) {
                return;
              }
              content += child;
            });
            return content;
          }
          function validateProps(element, props) {
            {
              if (typeof props.children === "object" && props.children !== null) {
                React55.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (typeof child.type !== "string") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Only strings and numbers are supported as <option> children.");
                  }
                });
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          function getHostProps$1(element, props) {
            var hostProps = _assign({
              children: void 0
            }, props);
            var content = flattenChildren(props.children);
            if (content) {
              hostProps.children = content;
            }
            return hostProps;
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var isArray2 = Array.isArray(props[propName]);
                if (props.multiple && !isArray2) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && isArray2) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$2(element, props) {
            return _assign({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$3(element, props) {
            var node2 = element;
            if (!(props.dangerouslySetInnerHTML == null)) {
              {
                throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
              }
            }
            var hostProps = _assign({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (!(defaultValue == null)) {
                    {
                      throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                    }
                  }
                  if (Array.isArray(children)) {
                    if (!(children.length <= 1)) {
                      {
                        throw Error("<textarea> can only have at most one child.");
                      }
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          var Namespaces = {
            html: HTML_NAMESPACE,
            mathml: MATH_NAMESPACE,
            svg: SVG_NAMESPACE
          };
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html) {
            if (node2.namespaceURI === Namespaces.svg) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix3, key) {
            return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix3) {
              isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty5 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty5) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string) {
              return string.replace(hyphenPattern, function(_, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles4) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles4) {
                if (!styles4.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles4[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles4) {
            var style4 = node2.style;
            for (var styleName in styles4) {
              if (!styles4.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles4[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles4[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style4.setProperty(styleName, styleValue);
              } else {
                style4[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles4) {
            var expanded = {};
            for (var key in styles4) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
          };
          var voidElementTags = _assign({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
                {
                  throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                }
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (!(props.children == null)) {
                {
                  throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
                }
              }
              if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
                {
                  throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
                }
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (!(props.style == null || typeof props.style === "object")) {
              {
                throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
              }
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            "aria-hidden": 0,
            "aria-invalid": 0,
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var _hasOwnProperty = Object.prototype.hasOwnProperty;
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var IS_REPLAYED = 1 << 4;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (!(typeof restoreImpl === "function")) {
              {
                throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var discreteUpdatesImpl = function(fn, a, b, c, d) {
            return fn(a, b, c, d);
          };
          var flushDiscreteUpdatesImpl = function() {
          };
          var batchedEventUpdatesImpl = batchedUpdatesImpl;
          var isInsideEventHandler = false;
          var isBatchingEventUpdates = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushDiscreteUpdatesImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, bookkeeping) {
            if (isInsideEventHandler) {
              return fn(bookkeeping);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, bookkeeping);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function batchedEventUpdates(fn, a, b) {
            if (isBatchingEventUpdates) {
              return fn(a, b);
            }
            isBatchingEventUpdates = true;
            try {
              return batchedEventUpdatesImpl(fn, a, b);
            } finally {
              isBatchingEventUpdates = false;
              finishEventHandler();
            }
          }
          function discreteUpdates(fn, a, b, c, d) {
            var prevIsInsideEventHandler = isInsideEventHandler;
            isInsideEventHandler = true;
            try {
              return discreteUpdatesImpl(fn, a, b, c, d);
            } finally {
              isInsideEventHandler = prevIsInsideEventHandler;
              if (!isInsideEventHandler) {
                finishEventHandler();
              }
            }
          }
          function flushDiscreteUpdatesIfNeeded(timeStamp) {
            {
              if (!isInsideEventHandler) {
                flushDiscreteUpdatesImpl();
              }
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            discreteUpdatesImpl = _discreteUpdatesImpl;
            flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
            batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (!(!listener || typeof listener === "function")) {
              {
                throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
              }
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (!(typeof document !== "undefined")) {
                  {
                    throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                  }
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              {
                {
                  throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = 0;
          var PerformedWork = 1;
          var Placement = 2;
          var Update = 4;
          var PlacementAndUpdate = 6;
          var Deletion = 8;
          var ContentReset = 16;
          var Callback = 32;
          var DidCapture = 64;
          var Ref = 128;
          var Snapshot = 256;
          var Passive = 512;
          var PassiveUnmountPendingDev = 8192;
          var Hydrating = 1024;
          var HydratingAndUpdate = 1028;
          var LifecycleEffectMask = 932;
          var HostEffectMask = 2047;
          var Incomplete = 2048;
          var ShouldCapture = 4096;
          var ForceUpdateForLegacySuspense = 16384;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (!(getNearestMountedFiber(fiber) === fiber)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (!(nearestMounted !== null)) {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    {
                      throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                    }
                  }
                }
              }
              if (!(a.alternate === b)) {
                {
                  throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (!(a.tag === HostRoot)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node2 = currentParent;
            while (true) {
              if (node2.tag === HostComponent || node2.tag === HostText) {
                return node2;
              } else if (node2.child) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === currentParent) {
                return null;
              }
              while (!node2.sibling) {
                if (!node2.return || node2.return === currentParent) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            if (!currentParent) {
              return null;
            }
            var node2 = currentParent;
            while (true) {
              if (node2.tag === HostComponent || node2.tag === HostText || enableFundamentalAPI) {
                return node2;
              } else if (node2.child && node2.tag !== HostPortal) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === currentParent) {
                return null;
              }
              while (!node2.sibling) {
                if (!node2.return || node2.return === currentParent) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          function doesFiberContain(parentFiber, childFiber) {
            var node2 = childFiber;
            var parentFiberAlternate = parentFiber.alternate;
            while (node2 !== null) {
              if (node2 === parentFiber || node2 === parentFiberAlternate) {
                return true;
              }
              node2 = node2.return;
            }
            return false;
          }
          var attemptUserBlockingHydration;
          function setAttemptUserBlockingHydration(fn) {
            attemptUserBlockingHydration = fn;
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          function hasQueuedDiscreteEvents() {
            return queuedDiscreteEvents.length > 0;
          }
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isReplayableDiscreteEvent(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags: eventSystemFlags | IS_REPLAYED,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            queuedDiscreteEvents.push(queuedEvent);
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                      Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                        attemptHydrationAtCurrentPriority(nearestMounted);
                      });
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            while (queuedDiscreteEvents.length > 0) {
              var nextDiscreteEvent = queuedDiscreteEvents[0];
              if (nextDiscreteEvent.blockedOn !== null) {
                var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
                if (_fiber4 !== null) {
                  attemptUserBlockingHydration(_fiber4);
                }
                break;
              }
              var targetContainers = nextDiscreteEvent.targetContainers;
              while (targetContainers.length > 0) {
                var targetContainer = targetContainers[0];
                var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
                if (nextBlockedOn !== null) {
                  nextDiscreteEvent.blockedOn = nextBlockedOn;
                  break;
                }
                targetContainers.shift();
              }
              if (nextDiscreteEvent.blockedOn === null) {
                queuedDiscreteEvents.shift();
              }
            }
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var DiscreteEvent = 0;
          var UserBlockingEvent = 1;
          var ContinuousEvent = 2;
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style3 = {};
          if (canUseDOM) {
            style3 = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style3) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var eventPriorities = /* @__PURE__ */ new Map();
          var discreteEventPairsForSimpleEventPlugin = [
            "cancel",
            "cancel",
            "click",
            "click",
            "close",
            "close",
            "contextmenu",
            "contextMenu",
            "copy",
            "copy",
            "cut",
            "cut",
            "auxclick",
            "auxClick",
            "dblclick",
            "doubleClick",
            "dragend",
            "dragEnd",
            "dragstart",
            "dragStart",
            "drop",
            "drop",
            "focusin",
            "focus",
            "focusout",
            "blur",
            "input",
            "input",
            "invalid",
            "invalid",
            "keydown",
            "keyDown",
            "keypress",
            "keyPress",
            "keyup",
            "keyUp",
            "mousedown",
            "mouseDown",
            "mouseup",
            "mouseUp",
            "paste",
            "paste",
            "pause",
            "pause",
            "play",
            "play",
            "pointercancel",
            "pointerCancel",
            "pointerdown",
            "pointerDown",
            "pointerup",
            "pointerUp",
            "ratechange",
            "rateChange",
            "reset",
            "reset",
            "seeked",
            "seeked",
            "submit",
            "submit",
            "touchcancel",
            "touchCancel",
            "touchend",
            "touchEnd",
            "touchstart",
            "touchStart",
            "volumechange",
            "volumeChange"
          ];
          var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
          var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
          var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
          function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i += 2) {
              var topEvent = eventTypes[i];
              var event = eventTypes[i + 1];
              var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
              var reactName = "on" + capitalizedEvent;
              eventPriorities.set(topEvent, priority);
              topLevelEventsToReactNames.set(topEvent, reactName);
              registerTwoPhaseEvent(reactName, [topEvent]);
            }
          }
          function setEventPriorities(eventTypes, priority) {
            for (var i = 0; i < eventTypes.length; i++) {
              eventPriorities.set(eventTypes[i], priority);
            }
          }
          function getEventPriorityForPluginSystem(domEventName) {
            var priority = eventPriorities.get(domEventName);
            return priority === void 0 ? ContinuousEvent : priority;
          }
          function registerSimpleEvents() {
            registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
            registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
            registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
            setEventPriorities(otherDiscreteEvents, DiscreteEvent);
          }
          var Scheduler_now = Scheduler.unstable_now;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var ImmediatePriority = 99;
          var UserBlockingPriority = 98;
          var NormalPriority = 97;
          var LowPriority = 96;
          var IdlePriority = 95;
          var NoPriority = 90;
          var initialTimeMs = Scheduler_now();
          var SyncLanePriority = 15;
          var SyncBatchedLanePriority = 14;
          var InputDiscreteHydrationLanePriority = 13;
          var InputDiscreteLanePriority = 12;
          var InputContinuousHydrationLanePriority = 11;
          var InputContinuousLanePriority = 10;
          var DefaultHydrationLanePriority = 9;
          var DefaultLanePriority = 8;
          var TransitionHydrationPriority = 7;
          var TransitionPriority = 6;
          var RetryLanePriority = 5;
          var SelectiveHydrationLanePriority = 4;
          var IdleHydrationLanePriority = 3;
          var IdleLanePriority = 2;
          var OffscreenLanePriority = 1;
          var NoLanePriority = 0;
          var TotalLanes = 31;
          var NoLanes = 0;
          var NoLane = 0;
          var SyncLane = 1;
          var SyncBatchedLane = 2;
          var InputDiscreteHydrationLane = 4;
          var InputDiscreteLanes = 24;
          var InputContinuousHydrationLane = 32;
          var InputContinuousLanes = 192;
          var DefaultHydrationLane = 256;
          var DefaultLanes = 3584;
          var TransitionHydrationLane = 4096;
          var TransitionLanes = 4186112;
          var RetryLanes = 62914560;
          var SomeRetryLane = 33554432;
          var SelectiveHydrationLane = 67108864;
          var NonIdleLanes = 134217727;
          var IdleHydrationLane = 134217728;
          var IdleLanes = 805306368;
          var OffscreenLane = 1073741824;
          var NoTimestamp = -1;
          function setCurrentUpdateLanePriority(newLanePriority) {
          }
          var return_highestLanePriority = DefaultLanePriority;
          function getHighestPriorityLanes(lanes) {
            if ((SyncLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncLanePriority;
              return SyncLane;
            }
            if ((SyncBatchedLane & lanes) !== NoLanes) {
              return_highestLanePriority = SyncBatchedLanePriority;
              return SyncBatchedLane;
            }
            if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
              return_highestLanePriority = InputDiscreteHydrationLanePriority;
              return InputDiscreteHydrationLane;
            }
            var inputDiscreteLanes = InputDiscreteLanes & lanes;
            if (inputDiscreteLanes !== NoLanes) {
              return_highestLanePriority = InputDiscreteLanePriority;
              return inputDiscreteLanes;
            }
            if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
              return_highestLanePriority = InputContinuousHydrationLanePriority;
              return InputContinuousHydrationLane;
            }
            var inputContinuousLanes = InputContinuousLanes & lanes;
            if (inputContinuousLanes !== NoLanes) {
              return_highestLanePriority = InputContinuousLanePriority;
              return inputContinuousLanes;
            }
            if ((lanes & DefaultHydrationLane) !== NoLanes) {
              return_highestLanePriority = DefaultHydrationLanePriority;
              return DefaultHydrationLane;
            }
            var defaultLanes = DefaultLanes & lanes;
            if (defaultLanes !== NoLanes) {
              return_highestLanePriority = DefaultLanePriority;
              return defaultLanes;
            }
            if ((lanes & TransitionHydrationLane) !== NoLanes) {
              return_highestLanePriority = TransitionHydrationPriority;
              return TransitionHydrationLane;
            }
            var transitionLanes = TransitionLanes & lanes;
            if (transitionLanes !== NoLanes) {
              return_highestLanePriority = TransitionPriority;
              return transitionLanes;
            }
            var retryLanes = RetryLanes & lanes;
            if (retryLanes !== NoLanes) {
              return_highestLanePriority = RetryLanePriority;
              return retryLanes;
            }
            if (lanes & SelectiveHydrationLane) {
              return_highestLanePriority = SelectiveHydrationLanePriority;
              return SelectiveHydrationLane;
            }
            if ((lanes & IdleHydrationLane) !== NoLanes) {
              return_highestLanePriority = IdleHydrationLanePriority;
              return IdleHydrationLane;
            }
            var idleLanes = IdleLanes & lanes;
            if (idleLanes !== NoLanes) {
              return_highestLanePriority = IdleLanePriority;
              return idleLanes;
            }
            if ((OffscreenLane & lanes) !== NoLanes) {
              return_highestLanePriority = OffscreenLanePriority;
              return OffscreenLane;
            }
            {
              error("Should have found matching lanes. This is a bug in React.");
            }
            return_highestLanePriority = DefaultLanePriority;
            return lanes;
          }
          function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
            switch (schedulerPriorityLevel) {
              case ImmediatePriority:
                return SyncLanePriority;
              case UserBlockingPriority:
                return InputContinuousLanePriority;
              case NormalPriority:
              case LowPriority:
                return DefaultLanePriority;
              case IdlePriority:
                return IdleLanePriority;
              default:
                return NoLanePriority;
            }
          }
          function lanePriorityToSchedulerPriority(lanePriority) {
            switch (lanePriority) {
              case SyncLanePriority:
              case SyncBatchedLanePriority:
                return ImmediatePriority;
              case InputDiscreteHydrationLanePriority:
              case InputDiscreteLanePriority:
              case InputContinuousHydrationLanePriority:
              case InputContinuousLanePriority:
                return UserBlockingPriority;
              case DefaultHydrationLanePriority:
              case DefaultLanePriority:
              case TransitionHydrationPriority:
              case TransitionPriority:
              case SelectiveHydrationLanePriority:
              case RetryLanePriority:
                return NormalPriority;
              case IdleHydrationLanePriority:
              case IdleLanePriority:
              case OffscreenLanePriority:
                return IdlePriority;
              case NoLanePriority:
                return NoPriority;
              default: {
                {
                  throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
                }
              }
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return_highestLanePriority = NoLanePriority;
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var nextLanePriority = NoLanePriority;
            var expiredLanes = root2.expiredLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            if (expiredLanes !== NoLanes) {
              nextLanes = expiredLanes;
              nextLanePriority = return_highestLanePriority = SyncLanePriority;
            } else {
              var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
              if (nonIdlePendingLanes !== NoLanes) {
                var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
                if (nonIdleUnblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                  if (nonIdlePingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              } else {
                var unblockedLanes = pendingLanes & ~suspendedLanes;
                if (unblockedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(unblockedLanes);
                  nextLanePriority = return_highestLanePriority;
                } else {
                  if (pingedLanes !== NoLanes) {
                    nextLanes = getHighestPriorityLanes(pingedLanes);
                    nextLanePriority = return_highestLanePriority;
                  }
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
              getHighestPriorityLanes(wipLanes);
              var wipLanePriority = return_highestLanePriority;
              if (nextLanePriority <= wipLanePriority) {
                return wipLanes;
              } else {
                return_highestLanePriority = nextLanePriority;
              }
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index2 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index2;
                nextLanes |= entanglements[index2];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var eventTime = eventTimes[index2];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            getHighestPriorityLanes(lane);
            var priority = return_highestLanePriority;
            if (priority >= InputContinuousLanePriority) {
              return currentTime + 250;
            } else if (priority >= TransitionPriority) {
              return currentTime + 5e3;
            } else {
              return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              var expirationTime = expirationTimes[index2];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index2] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function returnNextLanesPriority() {
            return return_highestLanePriority;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function findUpdateLane(lanePriority, wipLanes) {
            switch (lanePriority) {
              case NoLanePriority:
                break;
              case SyncLanePriority:
                return SyncLane;
              case SyncBatchedLanePriority:
                return SyncBatchedLane;
              case InputDiscreteLanePriority: {
                var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
                if (_lane === NoLane) {
                  return findUpdateLane(InputContinuousLanePriority, wipLanes);
                }
                return _lane;
              }
              case InputContinuousLanePriority: {
                var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
                if (_lane2 === NoLane) {
                  return findUpdateLane(DefaultLanePriority, wipLanes);
                }
                return _lane2;
              }
              case DefaultLanePriority: {
                var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                  if (_lane3 === NoLane) {
                    _lane3 = pickArbitraryLane(DefaultLanes);
                  }
                }
                return _lane3;
              }
              case TransitionPriority:
              case RetryLanePriority:
                break;
              case IdleLanePriority:
                var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
                if (lane === NoLane) {
                  lane = pickArbitraryLane(IdleLanes);
                }
                return lane;
            }
            {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
          function findTransitionLane(wipLanes, pendingLanes) {
            var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(TransitionLanes);
              }
            }
            return lane;
          }
          function findRetryLane(wipLanes) {
            var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(RetryLanes);
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function getLowestPriorityLane(lanes) {
            var index2 = 31 - clz32(lanes);
            return index2 < 0 ? NoLanes : 1 << index2;
          }
          function getEqualOrHigherPriorityLanes(lanes) {
            return (getLowestPriorityLane(lanes) << 1) - 1;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            var higherPriorityLanes = updateLane - 1;
            root2.suspendedLanes &= higherPriorityLanes;
            root2.pingedLanes &= higherPriorityLanes;
            var eventTimes = root2.eventTimes;
            var index2 = laneToIndex(updateLane);
            eventTimes[index2] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markDiscreteUpdatesExpired(root2) {
            root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
          }
          function hasDiscreteLanes(lanes) {
            return (lanes & InputDiscreteLanes) !== NoLanes;
          }
          function markRootMutableRead(root2, updateLane) {
            root2.mutableReadLanes |= updateLane & root2.pendingLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = 0;
            root2.pingedLanes = 0;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] = NoLanes;
              eventTimes[index2] = NoTimestamp;
              expirationTimes[index2] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              entanglements[index2] |= entangledLanes;
              lanes &= ~lane;
            }
          }
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(lanes) {
            if (lanes === 0) {
              return 32;
            }
            return 31 - (log(lanes) / LN2 | 0) | 0;
          }
          var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriorityForPluginSystem(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEvent:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case UserBlockingEvent:
                listenerWrapper = dispatchUserBlockingUpdate;
                break;
              case ContinuousEvent:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
            }
            discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
          }
          function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
            {
              runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            var allowReplay = true;
            {
              allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
            }
            if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              if (allowReplay) {
                clearIfContinuousEvent(domEventName, nativeEvent);
              }
              return;
            }
            if (allowReplay) {
              if (isReplayableDiscreteEvent(domEventName)) {
                queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
                return;
              }
              if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
                return;
              }
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (root2.hydrate) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
            return null;
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
            target.addEventListener(eventType, listener, {
              passive
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText();
            var endLength = endValue.length;
            for (start = 0; start < startLength; start++) {
              if (startValue[start] !== endValue[start]) {
                break;
              }
            }
            var minEnd = startLength - start;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            _assign(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              persist: function() {
              },
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = _assign({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = _assign({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = _assign({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = _assign({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = _assign({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = _assign({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = _assign({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = _assign({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = _assign({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = _assign({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = _assign({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = _assign({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
            },
            deltaZ: 0,
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) {
                  return {
                    node: node2,
                    offset: offset - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument2 = outerNode.ownerDocument;
            var win = ownerDocument2 && ownerDocument2.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start = length2 + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end = length2 + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length2 += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end = length2;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start === -1 || end === -1) {
              return null;
            }
            return {
              start,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start : Math.min(offsets.end, length2);
            if (!selection.extend && start > end) {
              var temp = end;
              end = start;
              start = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            {
              if (rootContainerElement[listeningMarker]) {
                return;
              }
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement, null);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement, null);
              });
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
            var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
            var target = rootContainerElement;
            if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
              target = rootContainerElement.ownerDocument;
            }
            if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
              if (domEventName !== "scroll") {
                return;
              }
              eventSystemFlags |= IS_NON_DELEGATED;
              target = targetElement;
            }
            var listenerSet = getEventListenerSet(target);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              if (isCapturePhaseListener) {
                eventSystemFlags |= IS_CAPTURE_PHASE;
              }
              addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedEventUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common2 = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var HTML_NAMESPACE$1 = Namespaces.html;
          var warnedUnknownTags;
          var suppressHydrationWarning;
          var validatePropertiesInDevelopment;
          var warnForTextDifference;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeMarkupForTextOrAttribute;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              dialog: true,
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
            var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
            normalizeMarkupForTextOrAttribute = function(markup) {
              var markupString = typeof markup === "string" ? markup : "" + markup;
              return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
            };
            warnForTextDifference = function(serverText, clientText) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
              var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
              if (normalizedServerText === normalizedClientText) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            };
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html;
              return testElement.innerHTML;
            };
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop2() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop2;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement4(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument2 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE$1) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE$1) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument2.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument2.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument2.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument2.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE$1) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$3(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "option":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$3(domElement, lastRawProps);
                nextProps = getHostProps$3(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
                nextProp.toString();
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "data-reactroot":
                    break;
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (!suppressHydrationWarning) {
                      warnForTextDifference(domElement.textContent, nextProp);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = getPropertyInfo(propKey);
                if (suppressHydrationWarning)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE$1) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForUnmatchedText(textNode, text) {
            {
              warnForTextDifference(textNode.nodeValue, text);
            }
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1;
          {
            SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          }
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function shouldAutoFocusHostComponent(type, props) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
            }
            return false;
          }
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement4(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            return shouldAutoFocusHostComponent(type, props);
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            if (shouldAutoFocusHostComponent(type, newProps)) {
              domElement.focus();
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateFiberProps(domElement, newProps);
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function hideInstance(instance) {
            instance = instance;
            var style4 = instance.style;
            if (typeof style4.setProperty === "function") {
              style4.setProperty("display", "none", "important");
            } else {
              style4.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              var body = container.body;
              if (body != null) {
                body.textContent = "";
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            return diffHydratedProperties(instance, type, props, parentNamespace);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            return diffHydratedText(textInstance, text);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
            {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForUnmatchedText(textInstance, text);
            }
          }
          function didNotHydrateContainerInstance(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
          function didNotFindHydratableContainerInstance(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableContainerTextInstance(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
          function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
              ;
          }
          var clientId = 0;
          function makeClientIdInDEV(warnOnAccessInDEV) {
            var id = "r:" + (clientId++).toString(36);
            return {
              toString: function() {
                warnOnAccessInDEV();
                return id;
              },
              valueOf: function() {
                warnOnAccessInDEV();
                return id;
              }
            };
          }
          function isOpaqueHydratingObject(value) {
            return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
          }
          function makeOpaqueHydratingObject(attemptToReadValue) {
            return {
              $$typeof: REACT_OPAQUE_ID_TYPE,
              toString: attemptToReadValue,
              valueOf: attemptToReadValue
            };
          }
          function preparePortalMount(portalInstance) {
            {
              listenToAllSupportedEvents(portalInstance);
            }
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            {
              {
                throw Error("getNodeFromInstance: Invalid argument.");
              }
            }
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index];
            valueStack[index] = null;
            {
              fiberStack[index] = null;
            }
            index--;
          }
          function push(cursor2, value, fiber) {
            index++;
            valueStack[index] = cursor2.current;
            {
              fiberStack[index] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (!(contextStackCursor.current === emptyContextObject)) {
                {
                  throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentName(type) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  {
                    throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                  }
                }
              }
              {
                var name = getComponentName(type) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return _assign({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                {
                  throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
                {
                  throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component = node2.type;
                    if (isContextProvider(Component)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              {
                {
                  throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
          }
          var LegacyRoot = 0;
          var BlockingRoot = 1;
          var ConcurrentRoot = 2;
          var rendererID = null;
          var injectedHook = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            return true;
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, priorityLevel) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
          {
            if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
              {
                throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
              }
            }
          }
          var fakeCallbackNode = {};
          var ImmediatePriority$1 = 99;
          var UserBlockingPriority$2 = 98;
          var NormalPriority$1 = 97;
          var LowPriority$1 = 96;
          var IdlePriority$1 = 95;
          var NoPriority$1 = 90;
          var shouldYield = Scheduler_shouldYield;
          var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
          };
          var syncQueue = null;
          var immediateQueueCallbackNode = null;
          var isFlushingSyncQueue = false;
          var initialTimeMs$1 = Scheduler_now$1();
          var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
            return Scheduler_now$1() - initialTimeMs$1;
          };
          function getCurrentPriorityLevel() {
            switch (Scheduler_getCurrentPriorityLevel()) {
              case Scheduler_ImmediatePriority:
                return ImmediatePriority$1;
              case Scheduler_UserBlockingPriority:
                return UserBlockingPriority$2;
              case Scheduler_NormalPriority:
                return NormalPriority$1;
              case Scheduler_LowPriority:
                return LowPriority$1;
              case Scheduler_IdlePriority:
                return IdlePriority$1;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function reactPriorityToSchedulerPriority(reactPriorityLevel) {
            switch (reactPriorityLevel) {
              case ImmediatePriority$1:
                return Scheduler_ImmediatePriority;
              case UserBlockingPriority$2:
                return Scheduler_UserBlockingPriority;
              case NormalPriority$1:
                return Scheduler_NormalPriority;
              case LowPriority$1:
                return Scheduler_LowPriority;
              case IdlePriority$1:
                return Scheduler_IdlePriority;
              default: {
                {
                  throw Error("Unknown priority level.");
                }
              }
            }
          }
          function runWithPriority$1(reactPriorityLevel, fn) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_runWithPriority(priorityLevel, fn);
          }
          function scheduleCallback(reactPriorityLevel, callback, options2) {
            var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
            return Scheduler_scheduleCallback(priorityLevel, callback, options2);
          }
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
              immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
            } else {
              syncQueue.push(callback);
            }
            return fakeCallbackNode;
          }
          function cancelCallback(callbackNode) {
            if (callbackNode !== fakeCallbackNode) {
              Scheduler_cancelCallback(callbackNode);
            }
          }
          function flushSyncCallbackQueue() {
            if (immediateQueueCallbackNode !== null) {
              var node2 = immediateQueueCallbackNode;
              immediateQueueCallbackNode = null;
              Scheduler_cancelCallback(node2);
            }
            flushSyncCallbackQueueImpl();
          }
          function flushSyncCallbackQueueImpl() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              {
                try {
                  var _isSync2 = true;
                  var _queue = syncQueue;
                  runWithPriority$1(ImmediatePriority$1, function() {
                    for (; i < _queue.length; i++) {
                      var callback = _queue[i];
                      do {
                        callback = callback(_isSync2);
                      } while (callback !== null);
                    }
                  });
                  syncQueue = null;
                } catch (error2) {
                  if (syncQueue !== null) {
                    syncQueue = syncQueue.slice(i + 1);
                  }
                  Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                  throw error2;
                } finally {
                  isFlushingSyncQueue = false;
                }
              }
            }
          }
          var ReactVersion = "17.0.2";
          var NoMode = 0;
          var StrictMode = 1;
          var BlockingMode = 2;
          var ConcurrentMode = 4;
          var ProfileMode = 8;
          var DebugTracingMode = 16;
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = 0;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentName(fiber.type) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = _assign({}, baseProps);
              var defaultProps = Component.defaultProps;
              for (var propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var MAX_SIGNED_31_BIT_INT = 1073741823;
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastContextWithAllBitsObserved = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, nextValue) {
            var context = providerFiber.type._context;
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            var context = providerFiber.type._context;
            {
              context._currentValue = currentValue;
            }
          }
          function calculateChangedBits(context, newValue, oldValue) {
            if (objectIs(oldValue, newValue)) {
              return 0;
            } else {
              var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
              {
                if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                  error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
                }
              }
              return changedBits | 0;
            }
          }
          function scheduleWorkOnParentPath(parent, renderLanes2) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              } else {
                break;
              }
              node2 = node2.return;
            }
          }
          function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                    if (fiber.tag === ClassComponent) {
                      var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                      update.tag = ForceUpdate;
                      enqueueUpdate(fiber, update);
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleWorkOnParentPath(fiber.return, renderLanes2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastContextWithAllBitsObserved = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
          function readContext(context, observedBits) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            if (lastContextWithAllBitsObserved === context)
              ;
            else if (observedBits === false || observedBits === 0)
              ;
            else {
              var resolvedObservedBits;
              if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
                lastContextWithAllBitsObserved = context;
                resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
              } else {
                resolvedObservedBits = observedBits;
              }
              var contextItem = {
                context,
                observedBits: resolvedObservedBits,
                next: null
              };
              if (lastContextDependency === null) {
                if (!(currentlyRenderingFiber !== null)) {
                  {
                    throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                  }
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem,
                  responders: null
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return context._currentValue;
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update;
          }
          function enqueueUpdate(fiber, update) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update.eventTime,
                      lane: update.lane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update = update.next;
                  } while (update !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
            switch (update.tag) {
              case ReplaceState: {
                var payload = update.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictMode) {
                      disableLogs();
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        reenableLogs();
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return _assign({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update = firstBaseUpdate;
              do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      lane: NoLane,
                      tag: update.tag,
                      payload: update.payload,
                      callback: update.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                  var callback = update.callback;
                  if (callback !== null) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update];
                    } else {
                      effects.push(update);
                    }
                  }
                }
                update = update.next;
                if (update === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (!(typeof callback === "function")) {
              {
                throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
              }
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect = effects[i];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var isArray = Array.isArray;
          var emptyRefsObject = new React55.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentName(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                {
                  {
                    throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                  }
                }
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  reenableLogs();
                }
              }
            }
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ReplaceState;
              update.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update = createUpdate(eventTime, lane);
              update.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update.callback = callback;
              }
              enqueueUpdate(fiber, update);
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentName(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  new ctor(props, context);
                } finally {
                  reenableLogs();
                }
              }
            }
            var instance = new ctor(props, context);
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentName(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentName(workInProgress2.type) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentName(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                workInProgress2.flags |= Update;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (!(typeof child._store === "object")) {
                {
                  throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              child._store.validated = true;
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          var isArray$1 = Array.isArray;
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentName(returnFiber.type) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (!(ownerFiber.tag === ClassComponent)) {
                    {
                      throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    }
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  {
                    throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = inst.refs;
                  if (refs === emptyRefsObject) {
                    refs = inst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (!(typeof mixedRef === "string")) {
                  {
                    throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                  }
                }
                if (!element._owner) {
                  {
                    throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                  }
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            if (returnFiber.type !== "textarea") {
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentName(returnFiber.type) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var last3 = returnFiber.lastEffect;
              if (last3 !== null) {
                last3.nextEffect = childToDelete;
                returnFiber.lastEffect = childToDelete;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
              }
              childToDelete.nextEffect = null;
              childToDelete.flags = Deletion;
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags = Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags = Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              if (current2 !== null) {
                if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment10) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      if (newChild.type === REACT_FRAGMENT_TYPE) {
                        return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                      }
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                    }
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                }
                if (isArray$1(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (!(typeof iteratorFn === "function")) {
                {
                  throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              {
                if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (!(newChildren != null)) {
                {
                  throw Error("An iterable object provided no iterator.");
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  switch (child.tag) {
                    case Fragment10: {
                      if (element.type === REACT_FRAGMENT_TYPE) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, element.props.children);
                        existing.return = returnFiber;
                        {
                          existing._debugSource = element._source;
                          existing._debugOwner = element._owner;
                        }
                        return existing;
                      }
                      break;
                    }
                    case Block:
                    default: {
                      if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing3 = useFiber(child, element.props);
                        _existing3.ref = coerceRef(returnFiber, child, element);
                        _existing3.return = returnFiber;
                        {
                          _existing3._debugSource = element._source;
                          _existing3._debugOwner = element._owner;
                        }
                        return _existing3;
                      }
                      break;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              var isObject = typeof newChild === "object" && newChild !== null;
              if (isObject) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                }
              }
              if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              if (isArray$1(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (isObject) {
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
                switch (returnFiber.tag) {
                  case ClassComponent: {
                    {
                      var instance = returnFiber.stateNode;
                      if (instance.render._isMockFunction) {
                        break;
                      }
                    }
                  }
                  case Block:
                  case FunctionComponent:
                  case ForwardRef2:
                  case SimpleMemoComponent: {
                    {
                      {
                        throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                      }
                    }
                  }
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (!(current2 === null || workInProgress2.child === current2.child)) {
              {
                throw Error("Resuming work not yet implemented.");
              }
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (!(c !== NO_CONTEXT)) {
              {
                throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            if (props.fallback === void 0) {
              return false;
            }
            if (props.unstable_avoidThisFallback !== true) {
              return true;
            }
            if (hasInvisibleParent) {
              return false;
            }
            return true;
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = 0;
          var HasEffect = 1;
          var Layout = 2;
          var Passive$1 = 4;
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChild(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            return true;
          }
          function deleteHydratableInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot:
                  didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                  break;
                case HostComponent:
                  didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                  break;
              }
            }
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            childToDelete.flags = Deletion;
            if (returnFiber.lastEffect !== null) {
              returnFiber.lastEffect.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableContainerInstance(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableContainerTextInstance(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent:
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                      break;
                    case HostText:
                      var _text = fiber.pendingProps;
                      didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                      break;
                    case SuspenseComponent:
                      didNotFindHydratableSuspenseInstance(parentType, parentProps);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                return false;
              }
              default:
                return false;
            }
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
            }
            hydrationParentFiber = fiber;
            nextHydratableInstance = getFirstHydratableChild(nextInstance);
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            {
              if (shouldUpdate) {
                var returnFiber = hydrationParentFiber;
                if (returnFiber !== null) {
                  switch (returnFiber.tag) {
                    case HostRoot: {
                      var parentContainer = returnFiber.stateNode.containerInfo;
                      didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                      break;
                    }
                    case HostComponent: {
                      var parentType = returnFiber.type;
                      var parentProps = returnFiber.memoizedProps;
                      var parentInstance = returnFiber.stateNode;
                      didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                      break;
                    }
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              {
                throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            var type = fiber.type;
            if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
              var nextInstance = nextHydratableInstance;
              while (nextInstance) {
                deleteHydratableInstance(fiber, nextInstance);
                nextInstance = getNextHydratableSibling(nextInstance);
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
          }
          function getIsHydrating() {
            return isHydrating;
          }
          var workInProgressSources = [];
          var rendererSigil$1;
          {
            rendererSigil$1 = {};
          }
          function markSourceAsDirty(mutableSource) {
            workInProgressSources.push(mutableSource);
          }
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function getWorkInProgressVersion(mutableSource) {
            {
              return mutableSource._workInProgressVersionPrimary;
            }
          }
          function setWorkInProgressVersion(mutableSource, version) {
            {
              mutableSource._workInProgressVersionPrimary = version;
            }
            workInProgressSources.push(mutableSource);
          }
          function warnAboutMultipleRenderersDEV(mutableSource) {
            {
              {
                if (mutableSource._currentPrimaryRenderer == null) {
                  mutableSource._currentPrimaryRenderer = rendererSigil$1;
                } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                  error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
                }
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnAboutUseOpaqueIdentifier;
          {
            didWarnAboutUseOpaqueIdentifier = {};
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentName(currentlyRenderingFiber$1.type);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            {
              {
                throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                  {
                    throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                  }
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
            }
            didScheduleRenderPhaseUpdate = false;
            if (!!didRenderTooFewHooks) {
              {
                throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
              }
            }
            return children;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.flags &= ~(Passive | Update);
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (!(nextCurrentHook !== null)) {
                {
                  throw Error("Rendered more hooks than during the previous render.");
                }
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update = first;
              do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      lane: NoLane,
                      action: update.action,
                      eagerReducer: update.eagerReducer,
                      eagerState: update.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update.eagerReducer === reducer) {
                    newState = update.eagerState;
                  } else {
                    var action = update.action;
                    newState = reducer(newState, action);
                  }
                }
                update = update.next;
              } while (update !== null && update !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (!(queue !== null)) {
              {
                throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
              }
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update = firstRenderPhaseUpdate;
              do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
              } while (update !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
            {
              warnAboutMultipleRenderersDEV(source);
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var isSafeToReadFromSource = false;
            var currentRenderVersion = getWorkInProgressVersion(source);
            if (currentRenderVersion !== null) {
              isSafeToReadFromSource = currentRenderVersion === version;
            } else {
              isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
              if (isSafeToReadFromSource) {
                setWorkInProgressVersion(source, version);
              }
            }
            if (isSafeToReadFromSource) {
              var snapshot = getSnapshot(source._source);
              {
                if (typeof snapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              return snapshot;
            } else {
              markSourceAsDirty(source);
              {
                {
                  throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
                }
              }
            }
          }
          function useMutableSource(hook, source, getSnapshot, subscribe) {
            var root2 = getWorkInProgressRoot();
            if (!(root2 !== null)) {
              {
                throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
            }
            var getVersion = source._getVersion;
            var version = getVersion(source._source);
            var dispatcher = ReactCurrentDispatcher$1.current;
            var _dispatcher$useState = dispatcher.useState(function() {
              return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
            var snapshot = currentSnapshot;
            var stateHook = workInProgressHook;
            var memoizedState = hook.memoizedState;
            var refs = memoizedState.refs;
            var prevGetSnapshot = refs.getSnapshot;
            var prevSource = memoizedState.source;
            var prevSubscribe = memoizedState.subscribe;
            var fiber = currentlyRenderingFiber$1;
            hook.memoizedState = {
              refs,
              source,
              subscribe
            };
            dispatcher.useEffect(function() {
              refs.getSnapshot = getSnapshot;
              refs.setSnapshot = setSnapshot;
              var maybeNewVersion = getVersion(source._source);
              if (!objectIs(version, maybeNewVersion)) {
                var maybeNewSnapshot = getSnapshot(source._source);
                {
                  if (typeof maybeNewSnapshot === "function") {
                    error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                  }
                }
                if (!objectIs(snapshot, maybeNewSnapshot)) {
                  setSnapshot(maybeNewSnapshot);
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                }
                markRootEntangled(root2, root2.mutableReadLanes);
              }
            }, [getSnapshot, source, subscribe]);
            dispatcher.useEffect(function() {
              var handleChange = function() {
                var latestGetSnapshot = refs.getSnapshot;
                var latestSetSnapshot = refs.setSnapshot;
                try {
                  latestSetSnapshot(latestGetSnapshot(source._source));
                  var lane = requestUpdateLane(fiber);
                  markRootMutableRead(root2, lane);
                } catch (error2) {
                  latestSetSnapshot(function() {
                    throw error2;
                  });
                }
              };
              var unsubscribe = subscribe(source._source, handleChange);
              {
                if (typeof unsubscribe !== "function") {
                  error("Mutable source subscribe function must return an unsubscribe function.");
                }
              }
              return unsubscribe;
            }, [source, subscribe]);
            if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
              var newQueue = {
                pending: null,
                dispatch: null,
                lastRenderedReducer: basicStateReducer,
                lastRenderedState: snapshot
              };
              newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
              stateHook.queue = newQueue;
              stateHook.baseQueue = null;
              snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
              stateHook.memoizedState = stateHook.baseState = snapshot;
            }
            return snapshot;
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = {
              refs: {
                getSnapshot,
                setSnapshot: null
              },
              source,
              subscribe
            };
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            var hook = updateWorkInProgressHook();
            return useMutableSource(hook, source, getSnapshot, subscribe);
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = hook.queue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect = {
              tag,
              create,
              destroy,
              deps,
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            var ref = {
              current: initialValue
            };
            {
              Object.seal(ref);
            }
            hook.memoizedState = ref;
            return ref;
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return mountEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function updateEffect(create, deps) {
            {
              if (typeof jest !== "undefined") {
                warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
              }
            }
            return updateEffectImpl(Update | Passive, Passive$1, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            return mountEffectImpl(Update, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
            mountEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function updateDeferredValue(value) {
            var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function rerenderDeferredValue(value) {
            var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
            updateEffect(function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setValue(value);
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            }, [value]);
            return prevValue;
          }
          function startTransition(setPending, callback) {
            var priorityLevel = getCurrentPriorityLevel();
            {
              runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
                setPending(true);
              });
              runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
                var prevTransition = ReactCurrentBatchConfig$1.transition;
                ReactCurrentBatchConfig$1.transition = 1;
                try {
                  setPending(false);
                  callback();
                } finally {
                  ReactCurrentBatchConfig$1.transition = prevTransition;
                }
              });
            }
          }
          function mountTransition() {
            var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
            var start = startTransition.bind(null, setPending);
            mountRef(start);
            return [start, isPending];
          }
          function updateTransition() {
            var _updateState2 = updateState(), isPending = _updateState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          function rerenderTransition() {
            var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
            var startRef = updateRef();
            var start = startRef.current;
            return [start, isPending];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function warnOnOpaqueIdentifierAccessInDEV(fiber) {
            {
              var name = getComponentName(fiber.type) || "Unknown";
              if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
                error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                didWarnAboutUseOpaqueIdentifier[name] = true;
              }
            }
          }
          function mountOpaqueIdentifier() {
            var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
            if (getIsHydrating()) {
              var didUpgrade = false;
              var fiber = currentlyRenderingFiber$1;
              var readValue = function() {
                if (!didUpgrade) {
                  didUpgrade = true;
                  {
                    isUpdatingOpaqueValueInRenderPhase = true;
                    setId(makeId());
                    isUpdatingOpaqueValueInRenderPhase = false;
                    warnOnOpaqueIdentifierAccessInDEV(fiber);
                  }
                }
                {
                  {
                    throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                  }
                }
              };
              var id = makeOpaqueHydratingObject(readValue);
              var setId = mountState(id)[1];
              if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
                currentlyRenderingFiber$1.flags |= Update | Passive;
                pushEffect(HasEffect | Passive$1, function() {
                  setId(makeId());
                }, void 0, null);
              }
              return id;
            } else {
              var _id = makeId();
              mountState(_id);
              return _id;
            }
          }
          function updateOpaqueIdentifier() {
            var id = updateState()[0];
            return id;
          }
          function rerenderOpaqueIdentifier() {
            var id = rerenderState()[0];
            return id;
          }
          function dispatchAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = {
              lane,
              action,
              eagerReducer: null,
              eagerState: null,
              next: null
            };
            var pending = queue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            queue.pending = update;
            var alternate = fiber.alternate;
            if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
              didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            } else {
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update.eagerReducer = lastRenderedReducer;
                    update.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              {
                if (typeof jest !== "undefined") {
                  warnIfNotScopedWithMatchingAct(fiber);
                  warnIfNotCurrentlyActingUpdatesInDev(fiber);
                }
              }
              scheduleUpdateOnFiber(fiber, lane, eventTime);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useOpaqueIdentifier: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context, observedBits) {
                warnInvalidContextAccess();
                return readContext(context, observedBits);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context, observedBits) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context, observedBits);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource(source, getSnapshot, subscribe);
              },
              useOpaqueIdentifier: function() {
                currentHookNameInDev = "useOpaqueIdentifier";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderOpaqueIdentifier();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var profilerStartTime = -1;
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
              }
            }
            var currentChild = current2.child;
            if (!includesSomeLane(updateLanes, renderLanes2)) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                if (!includesSomeLane(renderLanes2, updateLanes)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                {
                  markSpawnedWork(OffscreenLane);
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes
                };
                workInProgress2.memoizedState = _nextState;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          var updateLegacyHiddenComponent = updateOffscreenComponent;
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    instance.render();
                  } finally {
                    reenableLogs();
                  }
                }
                setIsRendering(false);
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            var updateQueue = workInProgress2.updateQueue;
            if (!(current2 !== null && updateQueue !== null)) {
              {
                throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState !== null ? prevState.element : null;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var nextChildren = nextState.element;
            if (nextChildren === prevChildren) {
              resetHydrationState();
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var root2 = workInProgress2.stateNode;
            if (root2.hydrate && enterHydrationState(workInProgress2)) {
              {
                var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
                if (mutableSourceEagerHydrationData != null) {
                  for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
                    var mutableSource = mutableSourceEagerHydrationData[i];
                    var version = mutableSourceEagerHydrationData[i + 1];
                    setWorkInProgressVersion(mutableSource, version);
                  }
                }
              }
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node2 = child;
              while (node2) {
                node2.flags = node2.flags & ~Placement | Hydrating;
                node2 = node2.sibling;
              }
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
              resetHydrationState();
            }
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef2: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                    }
                  }
                }
                child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            {
              {
                throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
              }
            }
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            if (_current !== null) {
              _current.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              {
                var _componentName2 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              var getDerivedStateFromProps = Component.getDerivedStateFromProps;
              if (typeof getDerivedStateFromProps === "function") {
                applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
              }
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictMode) {
                  disableLogs();
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  } finally {
                    reenableLogs();
                  }
                }
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || workInProgress2._debugID || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentName(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              if (nextProps.fallback !== void 0) {
                tryToClaimNextHydratableInstance(workInProgress2);
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
                var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment = workInProgress2.child;
                _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                workInProgress2.lanes = SomeRetryLane;
                {
                  markSpawnedWork(SomeRetryLane);
                }
                return _fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                if (showFallback) {
                  var _nextFallbackChildren2 = nextProps.fallback;
                  var _nextPrimaryChildren2 = nextProps.children;
                  var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                  var _primaryChildFragment3 = workInProgress2.child;
                  var prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                  _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment;
                } else {
                  var _nextPrimaryChildren3 = nextProps.children;
                  var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment4;
                }
              } else {
                if (showFallback) {
                  var _nextFallbackChildren3 = nextProps.fallback;
                  var _nextPrimaryChildren4 = nextProps.children;
                  var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                  var _primaryChildFragment5 = workInProgress2.child;
                  var _prevOffscreenState = current2.child.memoizedState;
                  _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                  _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                  workInProgress2.memoizedState = SUSPENDED_MARKER;
                  return _fallbackChildFragment2;
                } else {
                  var _nextPrimaryChildren5 = nextProps.children;
                  var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                  workInProgress2.memoizedState = null;
                  return _primaryChildFragment6;
                }
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              currentFallbackChildFragment.nextEffect = null;
              currentFallbackChildFragment.flags = Deletion;
              workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              var progressedLastEffect = primaryChildFragment.lastEffect;
              if (progressedLastEffect !== null) {
                workInProgress2.firstEffect = primaryChildFragment.firstEffect;
                workInProgress2.lastEffect = progressedLastEffect;
                progressedLastEffect.nextEffect = null;
              } else {
                workInProgress2.firstEffect = workInProgress2.lastEffect = null;
              }
            } else {
              primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function scheduleWorkOnFiber(fiber, renderLanes2) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleWorkOnParentPath(fiber.return, renderLanes2);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleWorkOnFiber(node2, renderLanes2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleWorkOnFiber(node2, renderLanes2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index2) {
            {
              var isArray2 = Array.isArray(childSlot);
              var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
              if (isArray2 || isIterable) {
                var type = isArray2 ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (Array.isArray(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode,
                lastEffect: lastEffectBeforeRendering
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
              renderState.lastEffect = lastEffectBeforeRendering;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & BlockingMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, newValue);
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              var changedBits = calculateChangedBits(context, newValue, oldValue);
              if (changedBits === 0) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context, newProps.unstable_observedBits);
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              return null;
            } else {
              cloneChildFibers(current2, workInProgress2);
              return workInProgress2.child;
            }
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var last3 = returnFiber.lastEffect;
              if (last3 !== null) {
                last3.nextEffect = current2;
                returnFiber.lastEffect = current2;
              } else {
                returnFiber.firstEffect = returnFiber.lastEffect = current2;
              }
              current2.nextEffect = null;
              current2.flags = Deletion;
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            var updateLanes = workInProgress2.lanes;
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else if (!includesSomeLane(renderLanes2, updateLanes)) {
                didReceiveUpdate = false;
                switch (workInProgress2.tag) {
                  case HostRoot:
                    pushHostRootContext(workInProgress2);
                    resetHydrationState();
                    break;
                  case HostComponent:
                    pushHostContext(workInProgress2);
                    break;
                  case ClassComponent: {
                    var Component = workInProgress2.type;
                    if (isContextProvider(Component)) {
                      pushContextProvider(workInProgress2);
                    }
                    break;
                  }
                  case HostPortal:
                    pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                    break;
                  case ContextProvider: {
                    var newValue = workInProgress2.memoizedProps.value;
                    pushProvider(workInProgress2, newValue);
                    break;
                  }
                  case Profiler:
                    {
                      var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                      if (hasChildWork) {
                        workInProgress2.flags |= Update;
                      }
                      var stateNode = workInProgress2.stateNode;
                      stateNode.effectDuration = 0;
                      stateNode.passiveEffectDuration = 0;
                    }
                    break;
                  case SuspenseComponent: {
                    var state = workInProgress2.memoizedState;
                    if (state !== null) {
                      var primaryChildFragment = workInProgress2.child;
                      var primaryChildLanes = primaryChildFragment.childLanes;
                      if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                        return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                      } else {
                        pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                        if (child !== null) {
                          return child.sibling;
                        } else {
                          return null;
                        }
                      }
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    }
                    break;
                  }
                  case SuspenseListComponent: {
                    var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                    var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (didSuspendBefore) {
                      if (_hasChildWork) {
                        return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                      }
                      workInProgress2.flags |= DidCapture;
                    }
                    var renderState = workInProgress2.memoizedState;
                    if (renderState !== null) {
                      renderState.rendering = null;
                      renderState.tail = null;
                      renderState.lastEffect = null;
                    }
                    pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                    if (_hasChildWork) {
                      break;
                    } else {
                      return null;
                    }
                  }
                  case OffscreenComponent:
                  case LegacyHiddenComponent: {
                    workInProgress2.lanes = NoLanes;
                    return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                  }
                }
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else {
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
              }
              case FunctionComponent: {
                var _Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef2: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment10:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component3 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
              case LegacyHiddenComponent: {
                return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef2:
              case Fragment10:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var fiberRoot = workInProgress2.stateNode;
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else if (!fiberRoot.hydrate) {
                    workInProgress2.flags |= Snapshot;
                  }
                }
                updateHostContainer(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (!(workInProgress2.stateNode !== null)) {
                      {
                        throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = false;
                if (current2 === null) {
                  if (workInProgress2.memoizedProps.fallback !== void 0) {
                    popHydrationState(workInProgress2);
                  }
                } else {
                  var prevState = current2.memoizedState;
                  prevDidTimeout = prevState !== null;
                }
                if (nextDidTimeout && !prevDidTimeout) {
                  if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
                {
                  if (nextDidTimeout || prevDidTimeout) {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThennables = suspended.updateQueue;
                          if (newThennables !== null) {
                            workInProgress2.updateQueue = newThennables;
                            workInProgress2.flags |= Update;
                          }
                          if (renderState.lastEffect === null) {
                            workInProgress2.firstEffect = null;
                          }
                          workInProgress2.lastEffect = renderState.lastEffect;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThennables = _suspended.updateQueue;
                      if (_newThennables !== null) {
                        workInProgress2.updateQueue = _newThennables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                        if (lastEffect !== null) {
                          lastEffect.nextEffect = null;
                        }
                        return null;
                      }
                    } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                      {
                        markSpawnedWork(SomeRetryLane);
                      }
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.lastEffect = workInProgress2.lastEffect;
                  renderState.renderingStartTime = now();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                return null;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case Block:
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                if (current2 !== null) {
                  var _nextState = workInProgress2.memoizedState;
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  var nextIsHidden = _nextState !== null;
                  if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                    workInProgress2.flags |= Update;
                  }
                }
                return null;
              }
            }
            {
              {
                throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function unwindWork(workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if (!((_flags & DidCapture) === NoFlags)) {
                  {
                    throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                  }
                }
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                popProvider(workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(interruptedWork) {
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                popProvider(interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          function createCapturedValue(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source)
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentName(source.type) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                var errorBoundaryName = getComponentName(boundary.type);
                if (errorBoundaryName) {
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                } else {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            update.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update = createUpdate(NoTimestamp, lane);
            update.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update.payload = function() {
                logCapturedError(fiber, errorInfo);
                return getDerivedStateFromError(error$1);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                  logCapturedError(fiber, errorInfo);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                    }
                  }
                }
              };
            } else {
              update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
              };
            }
            return update;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              wakeable.then(ping, ping);
            }
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            sourceFiber.firstEffect = sourceFiber.lastEffect = null;
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              if ((sourceFiber.mode & BlockingMode) === NoMode) {
                var currentSource = sourceFiber.alternate;
                if (currentSource) {
                  sourceFiber.updateQueue = currentSource.updateQueue;
                  sourceFiber.memoizedState = currentSource.memoizedState;
                  sourceFiber.lanes = currentSource.lanes;
                } else {
                  sourceFiber.updateQueue = null;
                  sourceFiber.memoizedState = null;
                }
              }
              var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
              var _workInProgress = returnFiber;
              do {
                if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                  var wakeables = _workInProgress.updateQueue;
                  if (wakeables === null) {
                    var updateQueue = /* @__PURE__ */ new Set();
                    updateQueue.add(wakeable);
                    _workInProgress.updateQueue = updateQueue;
                  } else {
                    wakeables.add(wakeable);
                  }
                  if ((_workInProgress.mode & BlockingMode) === NoMode) {
                    _workInProgress.flags |= DidCapture;
                    sourceFiber.flags |= ForceUpdateForLegacySuspense;
                    sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                    if (sourceFiber.tag === ClassComponent) {
                      var currentSourceFiber = sourceFiber.alternate;
                      if (currentSourceFiber === null) {
                        sourceFiber.tag = IncompleteClassComponent;
                      } else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update);
                      }
                    }
                    sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                    return;
                  }
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  _workInProgress.flags |= ShouldCapture;
                  _workInProgress.lanes = rootRenderLanes;
                  return;
                }
                _workInProgress = _workInProgress.return;
              } while (_workInProgress !== null);
              value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
            }
            renderDidError();
            value = createCapturedValue(value, sourceFiber);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update2);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            {
              instance.componentWillUnmount();
            }
          };
          function safelyCallComponentWillUnmount(current2, instance) {
            {
              invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
              if (hasCaughtError()) {
                var unmountError = clearCaughtError();
                captureCommitPhaseError(current2, unmountError);
              }
            }
          }
          function safelyDetachRef(current2) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                {
                  invokeGuardedCallback(null, ref, null, null);
                  if (hasCaughtError()) {
                    var refError = clearCaughtError();
                    captureCommitPhaseError(current2, refError);
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, destroy) {
            {
              invokeGuardedCallback(null, destroy, null);
              if (hasCaughtError()) {
                var error2 = clearCaughtError();
                captureCommitPhaseError(current2, error2);
              }
            }
          }
          function commitBeforeMutationLifeCycles(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent:
              case Block: {
                return;
              }
              case ClassComponent: {
                if (finishedWork.flags & Snapshot) {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                }
                return;
              }
              case HostRoot: {
                {
                  if (finishedWork.flags & Snapshot) {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                }
                return;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitHookEffectListUnmount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    destroy();
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(tag, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & tag) === tag) {
                  var create = effect.create;
                  effect.destroy = create();
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function schedulePassiveEffects(finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                var _effect = effect, next2 = _effect.next, tag = _effect.tag;
                if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                  enqueuePendingPassiveHookEffectMount(finishedWork, effect);
                }
                effect = next2;
              } while (effect !== firstEffect);
            }
          }
          function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                schedulePassiveEffects(finishedWork);
                return;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (current2 === null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidMount();
                    }
                  } else {
                    var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                    var prevState = current2.memoizedState;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                        }
                      }
                    }
                    {
                      instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                return;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                return;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                return;
              }
              case HostText: {
                return;
              }
              case HostPortal: {
                return;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  if (typeof onRender === "function") {
                    {
                      onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                    }
                  }
                }
                return;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                return;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case FundamentalComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
                return;
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  var instance = node2.stateNode;
                  if (isHidden) {
                    hideInstance(instance);
                  } else {
                    unhideInstance(node2.stateNode, node2.memoizedProps);
                  }
                } else if (node2.tag === HostText) {
                  var _instance3 = node2.stateNode;
                  if (isHidden) {
                    hideTextInstance(_instance3);
                  } else {
                    unhideTextInstance(_instance3, node2.memoizedProps);
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                ref(instanceToUse);
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function commitDetachRef(current2) {
            var currentRef = current2.ref;
            if (currentRef !== null) {
              if (typeof currentRef === "function") {
                currentRef(null);
              } else {
                currentRef.current = null;
              }
            }
          }
          function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
            onCommitUnmount(current2);
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                var updateQueue = current2.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                      if (destroy !== void 0) {
                        if ((tag & Passive$1) !== NoFlags$1) {
                          enqueuePendingPassiveHookEffectUnmount(current2, effect);
                        } else {
                          {
                            safelyCallDestroy(current2, destroy);
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
                return;
              }
              case ClassComponent: {
                safelyDetachRef(current2);
                var instance = current2.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(current2, instance);
                }
                return;
              }
              case HostComponent: {
                safelyDetachRef(current2);
                return;
              }
              case HostPortal: {
                {
                  unmountHostComponents(finishedRoot, current2);
                }
                return;
              }
              case FundamentalComponent: {
                return;
              }
              case DehydratedFragment: {
                return;
              }
              case ScopeComponent: {
                return;
              }
            }
          }
          function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
            var node2 = root2;
            while (true) {
              commitUnmount(finishedRoot, node2);
              if (node2.child !== null && node2.tag !== HostPortal) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === root2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === root2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function detachFiberMutation(fiber) {
            fiber.alternate = null;
            fiber.child = null;
            fiber.dependencies = null;
            fiber.firstEffect = null;
            fiber.lastEffect = null;
            fiber.memoizedProps = null;
            fiber.memoizedState = null;
            fiber.pendingProps = null;
            fiber.return = null;
            fiber.updateQueue = null;
            {
              fiber._debugOwner = null;
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            {
              {
                throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            var parent;
            var isContainer;
            var parentStateNode = parentFiber.stateNode;
            switch (parentFiber.tag) {
              case HostComponent:
                parent = parentStateNode;
                isContainer = false;
                break;
              case HostRoot:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case HostPortal:
                parent = parentStateNode.containerInfo;
                isContainer = true;
                break;
              case FundamentalComponent:
              default: {
                {
                  throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            if (parentFiber.flags & ContentReset) {
              resetTextContent(parent);
              parentFiber.flags &= ~ContentReset;
            }
            var before = getHostSibling(finishedWork);
            if (isContainer) {
              insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
            } else {
              insertOrAppendPlacementNode(finishedWork, before, parent);
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node2.stateNode : node2.stateNode.instance;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost || enableFundamentalAPI) {
              var stateNode = isHost ? node2.stateNode : node2.stateNode.instance;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
            var node2 = current2;
            var currentParentIsValid = false;
            var currentParent;
            var currentParentIsContainer;
            while (true) {
              if (!currentParentIsValid) {
                var parent = node2.return;
                findParent:
                  while (true) {
                    if (!(parent !== null)) {
                      {
                        throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                      }
                    }
                    var parentStateNode = parent.stateNode;
                    switch (parent.tag) {
                      case HostComponent:
                        currentParent = parentStateNode;
                        currentParentIsContainer = false;
                        break findParent;
                      case HostRoot:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                      case HostPortal:
                        currentParent = parentStateNode.containerInfo;
                        currentParentIsContainer = true;
                        break findParent;
                    }
                    parent = parent.return;
                  }
                currentParentIsValid = true;
              }
              if (node2.tag === HostComponent || node2.tag === HostText) {
                commitNestedUnmounts(finishedRoot, node2);
                if (currentParentIsContainer) {
                  removeChildFromContainer(currentParent, node2.stateNode);
                } else {
                  removeChild(currentParent, node2.stateNode);
                }
              } else if (node2.tag === HostPortal) {
                if (node2.child !== null) {
                  currentParent = node2.stateNode.containerInfo;
                  currentParentIsContainer = true;
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
              } else {
                commitUnmount(finishedRoot, node2);
                if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
              }
              if (node2 === current2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === current2) {
                  return;
                }
                node2 = node2.return;
                if (node2.tag === HostPortal) {
                  currentParentIsValid = false;
                }
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
            {
              unmountHostComponents(finishedRoot, current2);
            }
            var alternate = current2.alternate;
            detachFiberMutation(current2);
            if (alternate !== null) {
              detachFiberMutation(alternate);
            }
          }
          function commitWork(current2, finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent:
              case Block: {
                {
                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
                }
                return;
              }
              case ClassComponent: {
                return;
              }
              case HostComponent: {
                var instance = finishedWork.stateNode;
                if (instance != null) {
                  var newProps = finishedWork.memoizedProps;
                  var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                  var type = finishedWork.type;
                  var updatePayload = finishedWork.updateQueue;
                  finishedWork.updateQueue = null;
                  if (updatePayload !== null) {
                    commitUpdate(instance, updatePayload, type, oldProps, newProps);
                  }
                }
                return;
              }
              case HostText: {
                if (!(finishedWork.stateNode !== null)) {
                  {
                    throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var textInstance = finishedWork.stateNode;
                var newText = finishedWork.memoizedProps;
                var oldText = current2 !== null ? current2.memoizedProps : newText;
                commitTextUpdate(textInstance, oldText, newText);
                return;
              }
              case HostRoot: {
                {
                  var _root = finishedWork.stateNode;
                  if (_root.hydrate) {
                    _root.hydrate = false;
                    commitHydratedContainer(_root.containerInfo);
                  }
                }
                return;
              }
              case Profiler: {
                return;
              }
              case SuspenseComponent: {
                commitSuspenseComponent(finishedWork);
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case SuspenseListComponent: {
                attachSuspenseRetryListeners(finishedWork);
                return;
              }
              case IncompleteClassComponent: {
                return;
              }
              case FundamentalComponent: {
                break;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                var newState = finishedWork.memoizedState;
                var isHidden = newState !== null;
                hideOrUnhideAllChildren(finishedWork, isHidden);
                return;
              }
            }
            {
              {
                throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function commitSuspenseComponent(finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState !== null) {
              markCommitTimeOfFallback();
              {
                var primaryChildParent = finishedWork.child;
                hideOrUnhideAllChildren(primaryChildParent, true);
              }
            }
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  {
                    if (wakeable.__reactDoNotTraceInteractions !== true) {
                      retry = tracing.unstable_wrap(retry);
                    }
                  }
                  retryCache.add(wakeable);
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
            if (current2 !== null) {
              var oldState = current2.memoizedState;
              if (oldState === null || oldState.dehydrated !== null) {
                var newState = finishedWork.memoizedState;
                return newState !== null && newState.dehydrated === null;
              }
            }
            return false;
          }
          function commitResetTextContent(current2) {
            resetTextContent(current2.stateNode);
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor$1 = Symbol.for;
            COMPONENT_TYPE = symbolFor$1("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor$1("selector.role");
            TEST_NAME_TYPE = symbolFor$1("selector.test_id");
            TEXT_TYPE = symbolFor$1("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
          var NoContext = 0;
          var BatchedContext = 1;
          var EventContext = 2;
          var DiscreteEventContext = 4;
          var LegacyUnbatchedContext = 8;
          var RenderContext = 16;
          var CommitContext = 32;
          var RetryAfterError = 64;
          var RootIncomplete = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootIncomplete;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var mostRecentlyUpdatedRoot = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var nextEffect = null;
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsRenderPriority = NoPriority$1;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveHookEffectsMount = [];
          var pendingPassiveHookEffectsUnmount = [];
          var rootsWithPendingDiscreteUpdates = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var spawnedWorkDuringRender = null;
          var currentEventTime = NoTimestamp;
          var currentEventWipLanes = NoLanes;
          var currentEventPendingLanes = NoLanes;
          var isFlushingPassiveEffects = false;
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (currentEventPendingLanes !== NoLanes) {
                currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
              }
              return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
            }
            var schedulerPriority = getCurrentPriorityLevel();
            var lane;
            if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
              lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
            } else {
              var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
              lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
            }
            return lane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & BlockingMode) === NoMode) {
              return SyncLane;
            } else if ((mode & ConcurrentMode) === NoMode) {
              return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
            }
            if (currentEventWipLanes === NoLanes) {
              currentEventWipLanes = workInProgressRootIncludedLanes;
            }
            return findRetryLane(currentEventWipLanes);
          }
          function scheduleUpdateOnFiber(fiber, lane, eventTime) {
            checkForNestedUpdates();
            warnAboutRenderPhaseUpdatesInDEV(fiber);
            var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
            if (root2 === null) {
              warnAboutUpdateOnUnmountedFiberInDEV(fiber);
              return null;
            }
            markRootUpdated(root2, lane, eventTime);
            if (root2 === workInProgressRoot) {
              {
                workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            var priorityLevel = getCurrentPriorityLevel();
            if (lane === SyncLane) {
              if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
                schedulePendingInteractions(root2, lane);
                performSyncWorkOnRoot(root2);
              } else {
                ensureRootIsScheduled(root2, eventTime);
                schedulePendingInteractions(root2, lane);
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            } else {
              if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
                if (rootsWithPendingDiscreteUpdates === null) {
                  rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root2]);
                } else {
                  rootsWithPendingDiscreteUpdates.add(root2);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
            }
            mostRecentlyUpdatedRoot = root2;
          }
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            var newCallbackPriority = returnNextLanesPriority();
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback(existingCallbackNode);
                root2.callbackNode = null;
                root2.callbackPriority = NoLanePriority;
              }
              return;
            }
            if (existingCallbackNode !== null) {
              var existingCallbackPriority = root2.callbackPriority;
              if (existingCallbackPriority === newCallbackPriority) {
                return;
              }
              cancelCallback(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLanePriority) {
              newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else if (newCallbackPriority === SyncBatchedLanePriority) {
              newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
            } else {
              var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
              newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2) {
            currentEventTime = NoTimestamp;
            currentEventWipLanes = NoLanes;
            currentEventPendingLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var exitStatus = renderRootConcurrent(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              prepareFreshStack(root2, NoLanes);
            } else if (exitStatus !== RootIncomplete) {
              if (exitStatus === RootErrored) {
                executionContext |= RetryAfterError;
                if (root2.hydrate) {
                  root2.hydrate = false;
                  clearContainer(root2.containerInfo);
                }
                lanes = getLanesToRetrySynchronouslyOnError(root2);
                if (lanes !== NoLanes) {
                  exitStatus = renderRootSync(root2, lanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now());
                throw fatalError;
              }
              var finishedWork = root2.current.alternate;
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
            ensureRootIsScheduled(root2, now());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootIncomplete:
              case RootFatalErrored: {
                {
                  {
                    throw Error("Root did not complete. This is a bug in React.");
                  }
                }
              }
              case RootErrored: {
                commitRoot(root2);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2);
                break;
              }
              case RootCompleted: {
                commitRoot(root2);
                break;
              }
              default: {
                {
                  {
                    throw Error("Unknown root exit status.");
                  }
                }
              }
            }
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            flushPassiveEffects();
            var lanes;
            var exitStatus;
            if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
              lanes = workInProgressRootRenderLanes;
              exitStatus = renderRootSync(root2, lanes);
              if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
                lanes = getNextLanes(root2, lanes);
                exitStatus = renderRootSync(root2, lanes);
              }
            } else {
              lanes = getNextLanes(root2, NoLanes);
              exitStatus = renderRootSync(root2, lanes);
            }
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2);
            ensureRootIsScheduled(root2, now());
            return null;
          }
          function flushDiscreteUpdates() {
            if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
              {
                if ((executionContext & RenderContext) !== NoContext) {
                  error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
                }
              }
              return;
            }
            flushPendingDiscreteUpdates();
            flushPassiveEffects();
          }
          function flushPendingDiscreteUpdates() {
            if (rootsWithPendingDiscreteUpdates !== null) {
              var roots = rootsWithPendingDiscreteUpdates;
              rootsWithPendingDiscreteUpdates = null;
              roots.forEach(function(root2) {
                markDiscreteUpdatesExpired(root2);
                ensureRootIsScheduled(root2, now());
              });
            }
            flushSyncCallbackQueue();
          }
          function batchedUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function batchedEventUpdates$1(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext |= EventContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function discreteUpdates$1(fn, a, b, c, d) {
            var prevExecutionContext = executionContext;
            executionContext |= DiscreteEventContext;
            {
              try {
                return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
              } finally {
                executionContext = prevExecutionContext;
                if (executionContext === NoContext) {
                  resetRenderTimer();
                  flushSyncCallbackQueue();
                }
              }
            }
          }
          function unbatchedUpdates(fn, a) {
            var prevExecutionContext = executionContext;
            executionContext &= ~BatchedContext;
            executionContext |= LegacyUnbatchedContext;
            try {
              return fn(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
          function flushSync(fn, a) {
            var prevExecutionContext = executionContext;
            if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
              {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
              return fn(a);
            }
            executionContext |= BatchedContext;
            {
              try {
                if (fn) {
                  return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
                } else {
                  return void 0;
                }
              } finally {
                executionContext = prevExecutionContext;
                flushSyncCallbackQueue();
              }
            }
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                unwindInterruptedWork(interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            workInProgress = createWorkInProgress(root2.current, null);
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootIncomplete;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            {
              spawnedWorkDuringRender = null;
            }
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function pushInteractions(root2) {
            {
              var prevInteractions = tracing.__interactionsRef.current;
              tracing.__interactionsRef.current = root2.memoizedInteractions;
              return prevInteractions;
            }
          }
          function popInteractions(prevInteractions) {
            {
              tracing.__interactionsRef.current = prevInteractions;
            }
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError() {
            if (workInProgressRootExitStatus !== RootCompleted) {
              workInProgressRootExitStatus = RootErrored;
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootIncomplete;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              {
                {
                  throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
              startWorkOnPendingInteractions(root2, lanes);
            }
            var prevInteractions = pushInteractions(root2);
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            {
              popInteractions(prevInteractions);
            }
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              return RootIncomplete;
            } else {
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
                resetChildLanes(completedWork);
                if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                  if (returnFiber.firstEffect === null) {
                    returnFiber.firstEffect = completedWork.firstEffect;
                  }
                  if (completedWork.lastEffect !== null) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                    }
                    returnFiber.lastEffect = completedWork.lastEffect;
                  }
                  var flags = completedWork.flags;
                  if (flags > PerformedWork) {
                    if (returnFiber.lastEffect !== null) {
                      returnFiber.lastEffect.nextEffect = completedWork;
                    } else {
                      returnFiber.firstEffect = completedWork;
                    }
                    returnFiber.lastEffect = completedWork;
                  }
                }
              } else {
                var _next = unwindWork(completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.firstEffect = returnFiber.lastEffect = null;
                  returnFiber.flags |= Incomplete;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootIncomplete) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function resetChildLanes(completedWork) {
            if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
              return;
            }
            var newChildLanes = NoLanes;
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                if (shouldBubbleActualDurations) {
                  actualDuration += child.actualDuration;
                }
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
              if (isTimedOutSuspense) {
                var primaryChildFragment = completedWork.child;
                if (primaryChildFragment !== null) {
                  treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                }
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                _child = _child.sibling;
              }
            }
            completedWork.childLanes = newChildLanes;
          }
          function commitRoot(root2) {
            var renderPriorityLevel = getCurrentPriorityLevel();
            runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
            return null;
          }
          function commitRootImpl(root2, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Should not already be working.");
              }
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            if (finishedWork === null) {
              return null;
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (!(finishedWork !== root2.current)) {
              {
                throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            root2.callbackNode = null;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (rootsWithPendingDiscreteUpdates !== null) {
              if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
                rootsWithPendingDiscreteUpdates.delete(root2);
              }
            }
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            var firstEffect;
            if (finishedWork.flags > PerformedWork) {
              if (finishedWork.lastEffect !== null) {
                finishedWork.lastEffect.nextEffect = finishedWork;
                firstEffect = finishedWork.firstEffect;
              } else {
                firstEffect = finishedWork;
              }
            } else {
              firstEffect = finishedWork.firstEffect;
            }
            if (firstEffect !== null) {
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              var prevInteractions = pushInteractions(root2);
              ReactCurrentOwner$2.current = null;
              focusedInstanceHandle = prepareForCommit(root2.containerInfo);
              shouldFireAfterActiveInstanceBlur = false;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              focusedInstanceHandle = null;
              {
                recordCommitTime();
              }
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              nextEffect = firstEffect;
              do {
                {
                  invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                  if (hasCaughtError()) {
                    if (!(nextEffect !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var _error2 = clearCaughtError();
                    captureCommitPhaseError(nextEffect, _error2);
                    nextEffect = nextEffect.nextEffect;
                  }
                }
              } while (nextEffect !== null);
              nextEffect = null;
              requestPaint();
              {
                popInteractions(prevInteractions);
              }
              executionContext = prevExecutionContext;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
              pendingPassiveEffectsRenderPriority = renderPriorityLevel;
            } else {
              nextEffect = firstEffect;
              while (nextEffect !== null) {
                var nextNextEffect = nextEffect.nextEffect;
                nextEffect.nextEffect = null;
                if (nextEffect.flags & Deletion) {
                  detachFiberAfterEffects(nextEffect);
                }
                nextEffect = nextNextEffect;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes !== NoLanes) {
              {
                if (spawnedWorkDuringRender !== null) {
                  var expirationTimes = spawnedWorkDuringRender;
                  spawnedWorkDuringRender = null;
                  for (var i = 0; i < expirationTimes.length; i++) {
                    scheduleInteractions(root2, expirationTimes[i], root2.memoizedInteractions);
                  }
                }
                schedulePendingInteractions(root2, remainingLanes);
              }
            } else {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                finishPendingInteractions(root2, lanes);
              }
            }
            if (remainingLanes === SyncLane) {
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now());
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var _error3 = firstUncaughtError;
              firstUncaughtError = null;
              throw _error3;
            }
            if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
              return null;
            }
            flushSyncCallbackQueue();
            return null;
          }
          function commitBeforeMutationEffects() {
            while (nextEffect !== null) {
              var current2 = nextEffect.alternate;
              if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
                if ((nextEffect.flags & Deletion) !== NoFlags) {
                  if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                } else {
                  if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                    shouldFireAfterActiveInstanceBlur = true;
                  }
                }
              }
              var flags = nextEffect.flags;
              if ((flags & Snapshot) !== NoFlags) {
                setCurrentFiber(nextEffect);
                commitBeforeMutationLifeCycles(current2, nextEffect);
                resetCurrentFiber();
              }
              if ((flags & Passive) !== NoFlags) {
                if (!rootDoesHavePassiveEffects) {
                  rootDoesHavePassiveEffects = true;
                  scheduleCallback(NormalPriority$1, function() {
                    flushPassiveEffects();
                    return null;
                  });
                }
              }
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitMutationEffects(root2, renderPriorityLevel) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & ContentReset) {
                commitResetTextContent(nextEffect);
              }
              if (flags & Ref) {
                var current2 = nextEffect.alternate;
                if (current2 !== null) {
                  commitDetachRef(current2);
                }
              }
              var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
              switch (primaryFlags) {
                case Placement: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  break;
                }
                case PlacementAndUpdate: {
                  commitPlacement(nextEffect);
                  nextEffect.flags &= ~Placement;
                  var _current = nextEffect.alternate;
                  commitWork(_current, nextEffect);
                  break;
                }
                case Hydrating: {
                  nextEffect.flags &= ~Hydrating;
                  break;
                }
                case HydratingAndUpdate: {
                  nextEffect.flags &= ~Hydrating;
                  var _current2 = nextEffect.alternate;
                  commitWork(_current2, nextEffect);
                  break;
                }
                case Update: {
                  var _current3 = nextEffect.alternate;
                  commitWork(_current3, nextEffect);
                  break;
                }
                case Deletion: {
                  commitDeletion(root2, nextEffect);
                  break;
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function commitLayoutEffects(root2, committedLanes) {
            while (nextEffect !== null) {
              setCurrentFiber(nextEffect);
              var flags = nextEffect.flags;
              if (flags & (Update | Callback)) {
                var current2 = nextEffect.alternate;
                commitLifeCycles(root2, current2, nextEffect);
              }
              {
                if (flags & Ref) {
                  commitAttachRef(nextEffect);
                }
              }
              resetCurrentFiber();
              nextEffect = nextEffect.nextEffect;
            }
          }
          function flushPassiveEffects() {
            if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
              var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
              pendingPassiveEffectsRenderPriority = NoPriority$1;
              {
                return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
              }
            }
            return false;
          }
          function enqueuePendingPassiveHookEffectMount(fiber, effect) {
            pendingPassiveHookEffectsMount.push(effect, fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
            pendingPassiveHookEffectsUnmount.push(effect, fiber);
            {
              fiber.flags |= PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags |= PassiveUnmountPendingDev;
              }
            }
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback(NormalPriority$1, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          function invokePassiveEffectCreate(effect) {
            var create = effect.create;
            effect.destroy = create();
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
              {
                throw Error("Cannot flush passive effects while already rendering.");
              }
            }
            {
              isFlushingPassiveEffects = true;
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            var unmountEffects = pendingPassiveHookEffectsUnmount;
            pendingPassiveHookEffectsUnmount = [];
            for (var i = 0; i < unmountEffects.length; i += 2) {
              var _effect = unmountEffects[i];
              var fiber = unmountEffects[i + 1];
              var destroy = _effect.destroy;
              _effect.destroy = void 0;
              {
                fiber.flags &= ~PassiveUnmountPendingDev;
                var alternate = fiber.alternate;
                if (alternate !== null) {
                  alternate.flags &= ~PassiveUnmountPendingDev;
                }
              }
              if (typeof destroy === "function") {
                {
                  setCurrentFiber(fiber);
                  {
                    invokeGuardedCallback(null, destroy, null);
                  }
                  if (hasCaughtError()) {
                    if (!(fiber !== null)) {
                      {
                        throw Error("Should be working on an effect.");
                      }
                    }
                    var error2 = clearCaughtError();
                    captureCommitPhaseError(fiber, error2);
                  }
                  resetCurrentFiber();
                }
              }
            }
            var mountEffects = pendingPassiveHookEffectsMount;
            pendingPassiveHookEffectsMount = [];
            for (var _i = 0; _i < mountEffects.length; _i += 2) {
              var _effect2 = mountEffects[_i];
              var _fiber = mountEffects[_i + 1];
              {
                setCurrentFiber(_fiber);
                {
                  invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
                }
                if (hasCaughtError()) {
                  if (!(_fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error4 = clearCaughtError();
                  captureCommitPhaseError(_fiber, _error4);
                }
                resetCurrentFiber();
              }
            }
            var effect = root2.current.firstEffect;
            while (effect !== null) {
              var nextNextEffect = effect.nextEffect;
              effect.nextEffect = null;
              if (effect.flags & Deletion) {
                detachFiberAfterEffects(effect);
              }
              effect = nextNextEffect;
            }
            {
              popInteractions(prevInteractions);
              finishPendingInteractions(root2, lanes);
            }
            {
              isFlushingPassiveEffects = false;
            }
            executionContext = prevExecutionContext;
            flushSyncCallbackQueue();
            nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValue(error2, sourceFiber);
            var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            enqueueUpdate(rootFiber, update);
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, SyncLane);
            }
          }
          function captureCommitPhaseError(sourceFiber, error2) {
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
              return;
            }
            var fiber = sourceFiber.return;
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValue(error2, sourceFiber);
                  var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  enqueueUpdate(fiber, update);
                  var eventTime = requestEventTime();
                  var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                    schedulePendingInteractions(root2, SyncLane);
                  } else {
                    if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                      try {
                        instance.componentDidCatch(error2, errorInfo);
                      } catch (errorToIgnore) {
                      }
                    }
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, pingedLanes);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, retryLane);
            }
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            {
              retryCache = boundaryFiber.stateNode;
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              {
                {
                  throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
                }
              }
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var didWarnStateUpdateForUnmountedComponent = null;
          function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
            {
              var tag = fiber.tag;
              if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
                return;
              }
              if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
                return;
              }
              var componentName = getComponentName(fiber.type) || "ReactComponent";
              if (didWarnStateUpdateForUnmountedComponent !== null) {
                if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForUnmountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              if (isFlushingPassiveEffects)
                ;
              else {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  throw replayError;
                } else {
                  throw originalError;
                }
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef2:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          var IsThisRendererActing = {
            current: false
          };
          function warnIfNotScopedWithMatchingAct(fiber) {
            {
              if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
            {
              if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              }
            }
          }
          function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
            {
              if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
          var didWarnAboutUnmockedScheduler = false;
          function warnIfUnmockedScheduler(fiber) {
            {
              if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
                if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                  didWarnAboutUnmockedScheduler = true;
                  error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
                }
              }
            }
          }
          function computeThreadID(root2, lane) {
            return lane * 1e3 + root2.interactionThreadID;
          }
          function markSpawnedWork(lane) {
            if (spawnedWorkDuringRender === null) {
              spawnedWorkDuringRender = [lane];
            } else {
              spawnedWorkDuringRender.push(lane);
            }
          }
          function scheduleInteractions(root2, lane, interactions) {
            if (interactions.size > 0) {
              var pendingInteractionMap = root2.pendingInteractionMap;
              var pendingInteractions = pendingInteractionMap.get(lane);
              if (pendingInteractions != null) {
                interactions.forEach(function(interaction) {
                  if (!pendingInteractions.has(interaction)) {
                    interaction.__count++;
                  }
                  pendingInteractions.add(interaction);
                });
              } else {
                pendingInteractionMap.set(lane, new Set(interactions));
                interactions.forEach(function(interaction) {
                  interaction.__count++;
                });
              }
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lane);
                subscriber.onWorkScheduled(interactions, threadID);
              }
            }
          }
          function schedulePendingInteractions(root2, lane) {
            scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
          }
          function startWorkOnPendingInteractions(root2, lanes) {
            var interactions = /* @__PURE__ */ new Set();
            root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
              if (includesSomeLane(lanes, scheduledLane)) {
                scheduledInteractions.forEach(function(interaction) {
                  return interactions.add(interaction);
                });
              }
            });
            root2.memoizedInteractions = interactions;
            if (interactions.size > 0) {
              var subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null) {
                var threadID = computeThreadID(root2, lanes);
                try {
                  subscriber.onWorkStarted(interactions, threadID);
                } catch (error2) {
                  scheduleCallback(ImmediatePriority$1, function() {
                    throw error2;
                  });
                }
              }
            }
          }
          function finishPendingInteractions(root2, committedLanes) {
            var remainingLanesAfterCommit = root2.pendingLanes;
            var subscriber;
            try {
              subscriber = tracing.__subscriberRef.current;
              if (subscriber !== null && root2.memoizedInteractions.size > 0) {
                var threadID = computeThreadID(root2, committedLanes);
                subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
              }
            } catch (error2) {
              scheduleCallback(ImmediatePriority$1, function() {
                throw error2;
              });
            } finally {
              var pendingInteractionMap = root2.pendingInteractionMap;
              pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
                if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                  pendingInteractionMap.delete(lane);
                  scheduledInteractions.forEach(function(interaction) {
                    interaction.__count--;
                    if (subscriber !== null && interaction.__count === 0) {
                      try {
                        subscriber.onInteractionScheduledWorkCompleted(interaction);
                      } catch (error2) {
                        scheduleCallback(ImmediatePriority$1, function() {
                          throw error2;
                        });
                      }
                    }
                  });
                }
              });
            }
          }
          function shouldForceFlushFallbacksInDEV() {
            return actingUpdatesScopeDepth > 0;
          }
          var actingUpdatesScopeDepth = 0;
          function detachFiberAfterEffects(fiber) {
            fiber.sibling = null;
            fiber.stateNode = null;
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef2: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
              flushPassiveEffects();
              flushSync(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          var debugCounter = 1;
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.nextEffect = null;
            this.firstEffect = null;
            this.lastEffect = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugID = debugCounter++;
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef2;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugID = current2._debugID;
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.nextEffect = null;
              workInProgress2.firstEffect = null;
              workInProgress2.lastEffect = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef2:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= Placement;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode | BlockingMode | StrictMode;
            } else if (tag === BlockingRoot) {
              mode = BlockingMode | StrictMode;
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= DebugTracingMode;
                    break;
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictMode;
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                    return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                  case REACT_SCOPE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef2;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                        case REACT_BLOCK_TYPE:
                          fiberTag = Block;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentName(owner.type) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    {
                      {
                        throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                      }
                    }
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment10, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" as a prop');
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.type = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.type = REACT_SUSPENSE_TYPE;
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_SUSPENSE_LIST_TYPE;
            }
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_OFFSCREEN_TYPE;
            }
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
            var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
            {
              fiber.type = REACT_LEGACY_HIDDEN_TYPE;
            }
            fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            fiber.type = "DELETED";
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.nextEffect = source.nextEffect;
            target.firstEffect = source.firstEffect;
            target.lastEffect = source.lastEffect;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugID = source._debugID;
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate3) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.hydrate = hydrate3;
            this.callbackNode = null;
            this.callbackPriority = NoLanePriority;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.interactionThreadID = tracing.unstable_getThreadID();
              this.memoizedInteractions = /* @__PURE__ */ new Set();
              this.pendingInteractionMap = /* @__PURE__ */ new Map();
            }
            {
              switch (tag) {
                case BlockingRoot:
                  this._debugRootType = "createBlockingRoot()";
                  break;
                case ConcurrentRoot:
                  this._debugRootType = "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = "createLegacyRoot()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate3, hydrationCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate3);
            var uninitializedFiber = createHostRootFiber(tag);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            return {
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  {
                    {
                      throw Error("Unable to find node on an unmounted component.");
                    }
                  }
                } else {
                  {
                    {
                      throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                    }
                  }
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictMode) {
                var componentName = getComponentName(fiber.type) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrate3, hydrationCallbacks) {
            return createFiberRoot(containerInfo, tag, hydrate3);
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            {
              if (typeof jest !== "undefined") {
                warnIfUnmockedScheduler(current$1);
                warnIfNotScopedWithMatchingAct(current$1);
              }
            }
            var lane = requestUpdateLane(current$1);
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
              }
            }
            var update = createUpdate(eventTime, lane);
            update.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update.callback = callback;
            }
            enqueueUpdate(current$1, update);
            scheduleUpdateOnFiber(current$1, lane, eventTime);
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptUserBlockingHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = InputDiscreteHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = SelectiveHydrationLane;
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function runWithPriority$2(priority, fn) {
            try {
              setCurrentUpdateLanePriority(priority);
              return fn();
            } finally {
            }
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.tag === FundamentalComponent) {
              return hostFiber.stateNode.instance;
            }
            return hostFiber.stateNode;
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index2) {
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === path.length) {
                if (Array.isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
              var oldKey = oldPath[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              if (index2 + 1 === oldPath.length) {
                var newKey = newPath[index2];
                updated[newKey] = updated[oldKey];
                if (Array.isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index2, value) {
              if (index2 >= path.length) {
                return value;
              }
              var key = path[index2];
              var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = _assign({}, fiber.memoizedProps);
                scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            scheduleUpdate = function(fiber) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              getCurrentFiber: getCurrentFiberForDevTools
            });
          }
          function ReactDOMRoot(container, options2) {
            this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
          }
          function ReactDOMBlockingRoot(container, tag, options2) {
            this._internalRoot = createRootImpl(container, tag, options2);
          }
          ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            var container = root2.containerInfo;
            updateContainer(null, root2, null, function() {
              unmarkContainerAsRoot(container);
            });
          };
          function createRootImpl(container, tag, options2) {
            var hydrate3 = options2 != null && options2.hydrate === true;
            var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
            var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
            var root2 = createContainer(container, tag, hydrate3);
            markContainerAsRoot(root2.current, container);
            var containerNodeType = container.nodeType;
            {
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
            }
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return root2;
          }
          function createLegacyRoot(container, options2) {
            return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          var warnedAboutHydrateAPI = false;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function shouldHydrateDueToLegacyHeuristic(container) {
            var rootElement = getReactRootElementInContainer(container);
            return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
          }
          function legacyCreateRootFromDOMContainer(container, forceHydrate) {
            var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
            if (!shouldHydrate) {
              var warned = false;
              var rootSibling;
              while (rootSibling = container.lastChild) {
                {
                  if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                    warned = true;
                    error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                  }
                }
                container.removeChild(rootSibling);
              }
            }
            {
              if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
                warnedAboutHydrateAPI = true;
                warn("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
              }
            }
            return createLegacyRoot(container, shouldHydrate ? {
              hydrate: true
            } : void 0);
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var root2 = container._reactRootContainer;
            var fiberRoot;
            if (!root2) {
              root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  originalCallback.call(instance);
                };
              }
              unbatchedUpdates(function() {
                updateContainer(children, fiberRoot, parentComponent, callback);
              });
            } else {
              fiberRoot = root2._internalRoot;
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(fiberRoot);
                  _originalCallback.call(instance);
                };
              }
              updateContainer(children, fiberRoot, parentComponent, callback);
            }
            return getPublicRootInstance(fiberRoot);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate2(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            if (!isValidContainer(containerNode)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            if (!(parentComponent != null && has(parentComponent))) {
              {
                throw Error("parentComponent must be a valid React Component");
              }
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainer(container)) {
              {
                throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
              }
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              unbatchedUpdates(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setAttemptHydrationAtPriority(runWithPriority$2);
          var didWarnAboutUnstableCreatePortal = false;
          {
            if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              {
                throw Error("Target container is not a DOM element.");
              }
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          function unstable_createPortal(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            {
              if (!didWarnAboutUnstableCreatePortal) {
                didWarnAboutUnstableCreatePortal = true;
                warn('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
              }
            }
            return createPortal$1(children, container, key);
          }
          var Internals = {
            Events: [
              getInstanceFromNode,
              getNodeFromInstance,
              getFiberCurrentPropsFromNode,
              enqueueStateRestore,
              restoreStateIfNeeded,
              flushPassiveEffects,
              IsThisRendererActing
            ]
          };
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync;
          exports.hydrate = hydrate2;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_createPortal = unstable_createPortal;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment10 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment10;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement6, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                  printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement6(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + ".");
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode);
              }
              if (propValue === null || isValidElement6(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/@mui/utils/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/@mui/utils/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment10 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment10;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/@mui/utils/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/@mui/utils/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React55 = require_react();
          var _assign = require_object_assign();
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          exports.Fragment = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            exports.Fragment = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React55.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return "" + item;
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName2(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentName(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case exports.Fragment:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName2(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  return getComponentName(type.type);
                case REACT_BLOCK_TYPE:
                  return getComponentName(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentName(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: _assign({}, props, {
                    value: prevLog
                  }),
                  info: _assign({}, props, {
                    value: prevInfo
                  }),
                  warn: _assign({}, props, {
                    value: prevWarn
                  }),
                  error: _assign({}, props, {
                    value: prevError
                  }),
                  group: _assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: _assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: _assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix2;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix2 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix2 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix2 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype = Component.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_BLOCK_TYPE:
                  return describeFunctionComponentFrame(type._render);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(Object.prototype.hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty2.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty2.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config, self) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                var componentName = getComponentName(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              $$typeof: REACT_ELEMENT_TYPE,
              type,
              key,
              ref,
              props,
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config, maybeKey, source, self) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                key = "" + maybeKey;
              }
              if (hasValidKey(config)) {
                key = "" + config.key;
              }
              if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config, self);
              }
              for (propName in config) {
                if (hasOwnProperty2.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps = type.defaultProps;
                for (propName in defaultProps) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement6(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentName(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName2 = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName2 + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (Array.isArray(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement6(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement6(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement6(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentName(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentName(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (Array.isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (Array.isArray(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === exports.Fragment) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.jsx = jsx;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/@mui/material/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/@mui/material/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment10 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo2 = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment4(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment10;
          exports.Lazy = Lazy;
          exports.Memo = Memo2;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment4;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/@mui/material/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/@mui/material/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // (disabled):node_modules/jsdom/lib/api.js
  var require_api = __commonJS({
    "(disabled):node_modules/jsdom/lib/api.js"() {
    }
  });

  // (disabled):node_modules/jsdom/lib/jsdom/living/generated/utils.js
  var require_utils = __commonJS({
    "(disabled):node_modules/jsdom/lib/jsdom/living/generated/utils.js"() {
    }
  });

  // (disabled):node_modules/jsdom/lib/jsdom/utils.js
  var require_utils2 = __commonJS({
    "(disabled):node_modules/jsdom/lib/jsdom/utils.js"() {
    }
  });

  // node_modules/fabric/dist/fabric.js
  var require_fabric = __commonJS({
    "node_modules/fabric/dist/fabric.js"(exports) {
      var fabric4 = fabric4 || { version: "4.6.0" };
      if (typeof exports !== "undefined") {
        exports.fabric = fabric4;
      } else if (typeof define === "function" && define.amd) {
        define([], function() {
          return fabric4;
        });
      }
      if (typeof document !== "undefined" && typeof window !== "undefined") {
        if (document instanceof (typeof HTMLDocument !== "undefined" ? HTMLDocument : Document)) {
          fabric4.document = document;
        } else {
          fabric4.document = document.implementation.createHTMLDocument("");
        }
        fabric4.window = window;
      } else {
        jsdom = require_api();
        virtualWindow = new jsdom.JSDOM(decodeURIComponent("%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E"), {
          features: {
            FetchExternalResources: ["img"]
          },
          resources: "usable"
        }).window;
        fabric4.document = virtualWindow.document;
        fabric4.jsdomImplForWrapper = require_utils().implForWrapper;
        fabric4.nodeCanvas = require_utils2().Canvas;
        fabric4.window = virtualWindow;
        DOMParser = fabric4.window.DOMParser;
      }
      var jsdom;
      var virtualWindow;
      fabric4.isTouchSupported = "ontouchstart" in fabric4.window || "ontouchstart" in fabric4.document || fabric4.window && fabric4.window.navigator && fabric4.window.navigator.maxTouchPoints > 0;
      fabric4.isLikelyNode = typeof Buffer !== "undefined" && typeof window === "undefined";
      fabric4.SHARED_ATTRIBUTES = [
        "display",
        "transform",
        "fill",
        "fill-opacity",
        "fill-rule",
        "opacity",
        "stroke",
        "stroke-dasharray",
        "stroke-linecap",
        "stroke-dashoffset",
        "stroke-linejoin",
        "stroke-miterlimit",
        "stroke-opacity",
        "stroke-width",
        "id",
        "paint-order",
        "vector-effect",
        "instantiated_by_use",
        "clip-path"
      ];
      fabric4.DPI = 96;
      fabric4.reNum = "(?:[-+]?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?)";
      fabric4.commaWsp = "(?:\\s+,?\\s*|,\\s*)";
      fabric4.rePathCommand = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:[eE][-+]?\d+)?)/ig;
      fabric4.reNonWord = /[ \n\.,;!\?\-]/;
      fabric4.fontPaths = {};
      fabric4.iMatrix = [1, 0, 0, 1, 0, 0];
      fabric4.svgNS = "http://www.w3.org/2000/svg";
      fabric4.perfLimitSizeTotal = 2097152;
      fabric4.maxCacheSideLimit = 4096;
      fabric4.minCacheSideLimit = 256;
      fabric4.charWidthsCache = {};
      fabric4.textureSize = 2048;
      fabric4.disableStyleCopyPaste = false;
      fabric4.enableGLFiltering = true;
      fabric4.devicePixelRatio = fabric4.window.devicePixelRatio || fabric4.window.webkitDevicePixelRatio || fabric4.window.mozDevicePixelRatio || 1;
      fabric4.browserShadowBlurConstant = 1;
      fabric4.arcToSegmentsCache = {};
      fabric4.boundsOfCurveCache = {};
      fabric4.cachesBoundsOfCurve = true;
      fabric4.forceGLPutImageData = false;
      fabric4.initFilterBackend = function() {
        if (fabric4.enableGLFiltering && fabric4.isWebglSupported && fabric4.isWebglSupported(fabric4.textureSize)) {
          console.log("max texture size: " + fabric4.maxTextureSize);
          return new fabric4.WebglFilterBackend({ tileSize: fabric4.textureSize });
        } else if (fabric4.Canvas2dFilterBackend) {
          return new fabric4.Canvas2dFilterBackend();
        }
      };
      if (typeof document !== "undefined" && typeof window !== "undefined") {
        window.fabric = fabric4;
      }
      (function() {
        function _removeEventListener(eventName, handler) {
          if (!this.__eventListeners[eventName]) {
            return;
          }
          var eventListener = this.__eventListeners[eventName];
          if (handler) {
            eventListener[eventListener.indexOf(handler)] = false;
          } else {
            fabric4.util.array.fill(eventListener, false);
          }
        }
        function on(eventName, handler) {
          if (!this.__eventListeners) {
            this.__eventListeners = {};
          }
          if (arguments.length === 1) {
            for (var prop in eventName) {
              this.on(prop, eventName[prop]);
            }
          } else {
            if (!this.__eventListeners[eventName]) {
              this.__eventListeners[eventName] = [];
            }
            this.__eventListeners[eventName].push(handler);
          }
          return this;
        }
        function _once(eventName, handler) {
          var _handler = function() {
            handler.apply(this, arguments);
            this.off(eventName, _handler);
          }.bind(this);
          this.on(eventName, _handler);
        }
        function once(eventName, handler) {
          if (arguments.length === 1) {
            for (var prop in eventName) {
              _once.call(this, prop, eventName[prop]);
            }
          } else {
            _once.call(this, eventName, handler);
          }
          return this;
        }
        function off(eventName, handler) {
          if (!this.__eventListeners) {
            return this;
          }
          if (arguments.length === 0) {
            for (eventName in this.__eventListeners) {
              _removeEventListener.call(this, eventName);
            }
          } else if (arguments.length === 1 && typeof arguments[0] === "object") {
            for (var prop in eventName) {
              _removeEventListener.call(this, prop, eventName[prop]);
            }
          } else {
            _removeEventListener.call(this, eventName, handler);
          }
          return this;
        }
        function fire(eventName, options) {
          if (!this.__eventListeners) {
            return this;
          }
          var listenersForEvent = this.__eventListeners[eventName];
          if (!listenersForEvent) {
            return this;
          }
          for (var i = 0, len = listenersForEvent.length; i < len; i++) {
            listenersForEvent[i] && listenersForEvent[i].call(this, options || {});
          }
          this.__eventListeners[eventName] = listenersForEvent.filter(function(value) {
            return value !== false;
          });
          return this;
        }
        fabric4.Observable = {
          fire,
          on,
          once,
          off
        };
      })();
      fabric4.Collection = {
        _objects: [],
        add: function() {
          this._objects.push.apply(this._objects, arguments);
          if (this._onObjectAdded) {
            for (var i = 0, length2 = arguments.length; i < length2; i++) {
              this._onObjectAdded(arguments[i]);
            }
          }
          this.renderOnAddRemove && this.requestRenderAll();
          return this;
        },
        insertAt: function(object, index, nonSplicing) {
          var objects = this._objects;
          if (nonSplicing) {
            objects[index] = object;
          } else {
            objects.splice(index, 0, object);
          }
          this._onObjectAdded && this._onObjectAdded(object);
          this.renderOnAddRemove && this.requestRenderAll();
          return this;
        },
        remove: function() {
          var objects = this._objects, index, somethingRemoved = false;
          for (var i = 0, length2 = arguments.length; i < length2; i++) {
            index = objects.indexOf(arguments[i]);
            if (index !== -1) {
              somethingRemoved = true;
              objects.splice(index, 1);
              this._onObjectRemoved && this._onObjectRemoved(arguments[i]);
            }
          }
          this.renderOnAddRemove && somethingRemoved && this.requestRenderAll();
          return this;
        },
        forEachObject: function(callback, context) {
          var objects = this.getObjects();
          for (var i = 0, len = objects.length; i < len; i++) {
            callback.call(context, objects[i], i, objects);
          }
          return this;
        },
        getObjects: function(type) {
          if (typeof type === "undefined") {
            return this._objects.concat();
          }
          return this._objects.filter(function(o) {
            return o.type === type;
          });
        },
        item: function(index) {
          return this._objects[index];
        },
        isEmpty: function() {
          return this._objects.length === 0;
        },
        size: function() {
          return this._objects.length;
        },
        contains: function(object, deep) {
          if (this._objects.indexOf(object) > -1) {
            return true;
          } else if (deep) {
            return this._objects.some(function(obj) {
              return typeof obj.contains === "function" && obj.contains(object, true);
            });
          }
          return false;
        },
        complexity: function() {
          return this._objects.reduce(function(memo2, current) {
            memo2 += current.complexity ? current.complexity() : 0;
            return memo2;
          }, 0);
        }
      };
      fabric4.CommonMethods = {
        _setOptions: function(options) {
          for (var prop in options) {
            this.set(prop, options[prop]);
          }
        },
        _initGradient: function(filler, property) {
          if (filler && filler.colorStops && !(filler instanceof fabric4.Gradient)) {
            this.set(property, new fabric4.Gradient(filler));
          }
        },
        _initPattern: function(filler, property, callback) {
          if (filler && filler.source && !(filler instanceof fabric4.Pattern)) {
            this.set(property, new fabric4.Pattern(filler, callback));
          } else {
            callback && callback();
          }
        },
        _setObject: function(obj) {
          for (var prop in obj) {
            this._set(prop, obj[prop]);
          }
        },
        set: function(key, value) {
          if (typeof key === "object") {
            this._setObject(key);
          } else {
            this._set(key, value);
          }
          return this;
        },
        _set: function(key, value) {
          this[key] = value;
        },
        toggle: function(property) {
          var value = this.get(property);
          if (typeof value === "boolean") {
            this.set(property, !value);
          }
          return this;
        },
        get: function(property) {
          return this[property];
        }
      };
      (function(global2) {
        var sqrt = Math.sqrt, atan2 = Math.atan2, pow = Math.pow, PiBy180 = Math.PI / 180, PiBy2 = Math.PI / 2;
        fabric4.util = {
          cos: function(angle) {
            if (angle === 0) {
              return 1;
            }
            if (angle < 0) {
              angle = -angle;
            }
            var angleSlice = angle / PiBy2;
            switch (angleSlice) {
              case 1:
              case 3:
                return 0;
              case 2:
                return -1;
            }
            return Math.cos(angle);
          },
          sin: function(angle) {
            if (angle === 0) {
              return 0;
            }
            var angleSlice = angle / PiBy2, sign = 1;
            if (angle < 0) {
              sign = -1;
            }
            switch (angleSlice) {
              case 1:
                return sign;
              case 2:
                return 0;
              case 3:
                return -sign;
            }
            return Math.sin(angle);
          },
          removeFromArray: function(array, value) {
            var idx = array.indexOf(value);
            if (idx !== -1) {
              array.splice(idx, 1);
            }
            return array;
          },
          getRandomInt: function(min, max) {
            return Math.floor(Math.random() * (max - min + 1)) + min;
          },
          degreesToRadians: function(degrees) {
            return degrees * PiBy180;
          },
          radiansToDegrees: function(radians) {
            return radians / PiBy180;
          },
          rotatePoint: function(point, origin, radians) {
            var newPoint = new fabric4.Point(point.x - origin.x, point.y - origin.y), v = fabric4.util.rotateVector(newPoint, radians);
            return new fabric4.Point(v.x, v.y).addEquals(origin);
          },
          rotateVector: function(vector, radians) {
            var sin = fabric4.util.sin(radians), cos = fabric4.util.cos(radians), rx = vector.x * cos - vector.y * sin, ry = vector.x * sin + vector.y * cos;
            return {
              x: rx,
              y: ry
            };
          },
          transformPoint: function(p, t, ignoreOffset) {
            if (ignoreOffset) {
              return new fabric4.Point(t[0] * p.x + t[2] * p.y, t[1] * p.x + t[3] * p.y);
            }
            return new fabric4.Point(t[0] * p.x + t[2] * p.y + t[4], t[1] * p.x + t[3] * p.y + t[5]);
          },
          makeBoundingBoxFromPoints: function(points, transform2) {
            if (transform2) {
              for (var i = 0; i < points.length; i++) {
                points[i] = fabric4.util.transformPoint(points[i], transform2);
              }
            }
            var xPoints = [points[0].x, points[1].x, points[2].x, points[3].x], minX = fabric4.util.array.min(xPoints), maxX = fabric4.util.array.max(xPoints), width2 = maxX - minX, yPoints = [points[0].y, points[1].y, points[2].y, points[3].y], minY = fabric4.util.array.min(yPoints), maxY = fabric4.util.array.max(yPoints), height2 = maxY - minY;
            return {
              left: minX,
              top: minY,
              width: width2,
              height: height2
            };
          },
          invertTransform: function(t) {
            var a = 1 / (t[0] * t[3] - t[1] * t[2]), r = [a * t[3], -a * t[1], -a * t[2], a * t[0]], o = fabric4.util.transformPoint({ x: t[4], y: t[5] }, r, true);
            r[4] = -o.x;
            r[5] = -o.y;
            return r;
          },
          toFixed: function(number, fractionDigits) {
            return parseFloat(Number(number).toFixed(fractionDigits));
          },
          parseUnit: function(value, fontSize2) {
            var unit = /\D{0,2}$/.exec(value), number = parseFloat(value);
            if (!fontSize2) {
              fontSize2 = fabric4.Text.DEFAULT_SVG_FONT_SIZE;
            }
            switch (unit[0]) {
              case "mm":
                return number * fabric4.DPI / 25.4;
              case "cm":
                return number * fabric4.DPI / 2.54;
              case "in":
                return number * fabric4.DPI;
              case "pt":
                return number * fabric4.DPI / 72;
              case "pc":
                return number * fabric4.DPI / 72 * 12;
              case "em":
                return number * fontSize2;
              default:
                return number;
            }
          },
          falseFunction: function() {
            return false;
          },
          getKlass: function(type, namespace) {
            type = fabric4.util.string.camelize(type.charAt(0).toUpperCase() + type.slice(1));
            return fabric4.util.resolveNamespace(namespace)[type];
          },
          getSvgAttributes: function(type) {
            var attributes = [
              "instantiated_by_use",
              "style",
              "id",
              "class"
            ];
            switch (type) {
              case "linearGradient":
                attributes = attributes.concat(["x1", "y1", "x2", "y2", "gradientUnits", "gradientTransform"]);
                break;
              case "radialGradient":
                attributes = attributes.concat(["gradientUnits", "gradientTransform", "cx", "cy", "r", "fx", "fy", "fr"]);
                break;
              case "stop":
                attributes = attributes.concat(["offset", "stop-color", "stop-opacity"]);
                break;
            }
            return attributes;
          },
          resolveNamespace: function(namespace) {
            if (!namespace) {
              return fabric4;
            }
            var parts = namespace.split("."), len = parts.length, i, obj = global2 || fabric4.window;
            for (i = 0; i < len; ++i) {
              obj = obj[parts[i]];
            }
            return obj;
          },
          loadImage: function(url, callback, context, crossOrigin) {
            if (!url) {
              callback && callback.call(context, url);
              return;
            }
            var img = fabric4.util.createImage();
            var onLoadCallback = function() {
              callback && callback.call(context, img, false);
              img = img.onload = img.onerror = null;
            };
            img.onload = onLoadCallback;
            img.onerror = function() {
              fabric4.log("Error loading " + img.src);
              callback && callback.call(context, null, true);
              img = img.onload = img.onerror = null;
            };
            if (url.indexOf("data") !== 0 && crossOrigin !== void 0 && crossOrigin !== null) {
              img.crossOrigin = crossOrigin;
            }
            if (url.substring(0, 14) === "data:image/svg") {
              img.onload = null;
              fabric4.util.loadImageInDom(img, onLoadCallback);
            }
            img.src = url;
          },
          loadImageInDom: function(img, onLoadCallback) {
            var div = fabric4.document.createElement("div");
            div.style.width = div.style.height = "1px";
            div.style.left = div.style.top = "-100%";
            div.style.position = "absolute";
            div.appendChild(img);
            fabric4.document.querySelector("body").appendChild(div);
            img.onload = function() {
              onLoadCallback();
              div.parentNode.removeChild(div);
              div = null;
            };
          },
          enlivenObjects: function(objects, callback, namespace, reviver) {
            objects = objects || [];
            var enlivenedObjects = [], numLoadedObjects = 0, numTotalObjects = objects.length;
            function onLoaded() {
              if (++numLoadedObjects === numTotalObjects) {
                callback && callback(enlivenedObjects.filter(function(obj) {
                  return obj;
                }));
              }
            }
            if (!numTotalObjects) {
              callback && callback(enlivenedObjects);
              return;
            }
            objects.forEach(function(o, index) {
              if (!o || !o.type) {
                onLoaded();
                return;
              }
              var klass = fabric4.util.getKlass(o.type, namespace);
              klass.fromObject(o, function(obj, error) {
                error || (enlivenedObjects[index] = obj);
                reviver && reviver(o, obj, error);
                onLoaded();
              });
            });
          },
          enlivenPatterns: function(patterns, callback) {
            patterns = patterns || [];
            function onLoaded() {
              if (++numLoadedPatterns === numPatterns) {
                callback && callback(enlivenedPatterns);
              }
            }
            var enlivenedPatterns = [], numLoadedPatterns = 0, numPatterns = patterns.length;
            if (!numPatterns) {
              callback && callback(enlivenedPatterns);
              return;
            }
            patterns.forEach(function(p, index) {
              if (p && p.source) {
                new fabric4.Pattern(p, function(pattern) {
                  enlivenedPatterns[index] = pattern;
                  onLoaded();
                });
              } else {
                enlivenedPatterns[index] = p;
                onLoaded();
              }
            });
          },
          groupSVGElements: function(elements, options, path) {
            var object;
            if (elements && elements.length === 1) {
              return elements[0];
            }
            if (options) {
              if (options.width && options.height) {
                options.centerPoint = {
                  x: options.width / 2,
                  y: options.height / 2
                };
              } else {
                delete options.width;
                delete options.height;
              }
            }
            object = new fabric4.Group(elements, options);
            if (typeof path !== "undefined") {
              object.sourcePath = path;
            }
            return object;
          },
          populateWithProperties: function(source, destination, properties2) {
            if (properties2 && Object.prototype.toString.call(properties2) === "[object Array]") {
              for (var i = 0, len = properties2.length; i < len; i++) {
                if (properties2[i] in source) {
                  destination[properties2[i]] = source[properties2[i]];
                }
              }
            }
          },
          drawDashedLine: function(ctx, x, y, x2, y2, da) {
            var dx = x2 - x, dy = y2 - y, len = sqrt(dx * dx + dy * dy), rot = atan2(dy, dx), dc = da.length, di = 0, draw = true;
            ctx.save();
            ctx.translate(x, y);
            ctx.moveTo(0, 0);
            ctx.rotate(rot);
            x = 0;
            while (len > x) {
              x += da[di++ % dc];
              if (x > len) {
                x = len;
              }
              ctx[draw ? "lineTo" : "moveTo"](x, 0);
              draw = !draw;
            }
            ctx.restore();
          },
          createCanvasElement: function() {
            return fabric4.document.createElement("canvas");
          },
          copyCanvasElement: function(canvas) {
            var newCanvas = fabric4.util.createCanvasElement();
            newCanvas.width = canvas.width;
            newCanvas.height = canvas.height;
            newCanvas.getContext("2d").drawImage(canvas, 0, 0);
            return newCanvas;
          },
          toDataURL: function(canvasEl, format, quality) {
            return canvasEl.toDataURL("image/" + format, quality);
          },
          createImage: function() {
            return fabric4.document.createElement("img");
          },
          multiplyTransformMatrices: function(a, b, is2x2) {
            return [
              a[0] * b[0] + a[2] * b[1],
              a[1] * b[0] + a[3] * b[1],
              a[0] * b[2] + a[2] * b[3],
              a[1] * b[2] + a[3] * b[3],
              is2x2 ? 0 : a[0] * b[4] + a[2] * b[5] + a[4],
              is2x2 ? 0 : a[1] * b[4] + a[3] * b[5] + a[5]
            ];
          },
          qrDecompose: function(a) {
            var angle = atan2(a[1], a[0]), denom = pow(a[0], 2) + pow(a[1], 2), scaleX = sqrt(denom), scaleY = (a[0] * a[3] - a[2] * a[1]) / scaleX, skewX = atan2(a[0] * a[2] + a[1] * a[3], denom);
            return {
              angle: angle / PiBy180,
              scaleX,
              scaleY,
              skewX: skewX / PiBy180,
              skewY: 0,
              translateX: a[4],
              translateY: a[5]
            };
          },
          calcRotateMatrix: function(options) {
            if (!options.angle) {
              return fabric4.iMatrix.concat();
            }
            var theta = fabric4.util.degreesToRadians(options.angle), cos = fabric4.util.cos(theta), sin = fabric4.util.sin(theta);
            return [cos, sin, -sin, cos, 0, 0];
          },
          calcDimensionsMatrix: function(options) {
            var scaleX = typeof options.scaleX === "undefined" ? 1 : options.scaleX, scaleY = typeof options.scaleY === "undefined" ? 1 : options.scaleY, scaleMatrix = [
              options.flipX ? -scaleX : scaleX,
              0,
              0,
              options.flipY ? -scaleY : scaleY,
              0,
              0
            ], multiply = fabric4.util.multiplyTransformMatrices, degreesToRadians = fabric4.util.degreesToRadians;
            if (options.skewX) {
              scaleMatrix = multiply(scaleMatrix, [1, 0, Math.tan(degreesToRadians(options.skewX)), 1], true);
            }
            if (options.skewY) {
              scaleMatrix = multiply(scaleMatrix, [1, Math.tan(degreesToRadians(options.skewY)), 0, 1], true);
            }
            return scaleMatrix;
          },
          composeMatrix: function(options) {
            var matrix = [1, 0, 0, 1, options.translateX || 0, options.translateY || 0], multiply = fabric4.util.multiplyTransformMatrices;
            if (options.angle) {
              matrix = multiply(matrix, fabric4.util.calcRotateMatrix(options));
            }
            if (options.scaleX !== 1 || options.scaleY !== 1 || options.skewX || options.skewY || options.flipX || options.flipY) {
              matrix = multiply(matrix, fabric4.util.calcDimensionsMatrix(options));
            }
            return matrix;
          },
          resetObjectTransform: function(target) {
            target.scaleX = 1;
            target.scaleY = 1;
            target.skewX = 0;
            target.skewY = 0;
            target.flipX = false;
            target.flipY = false;
            target.rotate(0);
          },
          saveObjectTransform: function(target) {
            return {
              scaleX: target.scaleX,
              scaleY: target.scaleY,
              skewX: target.skewX,
              skewY: target.skewY,
              angle: target.angle,
              left: target.left,
              flipX: target.flipX,
              flipY: target.flipY,
              top: target.top
            };
          },
          isTransparent: function(ctx, x, y, tolerance) {
            if (tolerance > 0) {
              if (x > tolerance) {
                x -= tolerance;
              } else {
                x = 0;
              }
              if (y > tolerance) {
                y -= tolerance;
              } else {
                y = 0;
              }
            }
            var _isTransparent = true, i, temp, imageData = ctx.getImageData(x, y, tolerance * 2 || 1, tolerance * 2 || 1), l = imageData.data.length;
            for (i = 3; i < l; i += 4) {
              temp = imageData.data[i];
              _isTransparent = temp <= 0;
              if (_isTransparent === false) {
                break;
              }
            }
            imageData = null;
            return _isTransparent;
          },
          parsePreserveAspectRatioAttribute: function(attribute) {
            var meetOrSlice = "meet", alignX = "Mid", alignY = "Mid", aspectRatioAttrs = attribute.split(" "), align;
            if (aspectRatioAttrs && aspectRatioAttrs.length) {
              meetOrSlice = aspectRatioAttrs.pop();
              if (meetOrSlice !== "meet" && meetOrSlice !== "slice") {
                align = meetOrSlice;
                meetOrSlice = "meet";
              } else if (aspectRatioAttrs.length) {
                align = aspectRatioAttrs.pop();
              }
            }
            alignX = align !== "none" ? align.slice(1, 4) : "none";
            alignY = align !== "none" ? align.slice(5, 8) : "none";
            return {
              meetOrSlice,
              alignX,
              alignY
            };
          },
          clearFabricFontCache: function(fontFamily2) {
            fontFamily2 = (fontFamily2 || "").toLowerCase();
            if (!fontFamily2) {
              fabric4.charWidthsCache = {};
            } else if (fabric4.charWidthsCache[fontFamily2]) {
              delete fabric4.charWidthsCache[fontFamily2];
            }
          },
          limitDimsByArea: function(ar, maximumArea) {
            var roughWidth = Math.sqrt(maximumArea * ar), perfLimitSizeY = Math.floor(maximumArea / roughWidth);
            return { x: Math.floor(roughWidth), y: perfLimitSizeY };
          },
          capValue: function(min, value, max) {
            return Math.max(min, Math.min(value, max));
          },
          findScaleToFit: function(source, destination) {
            return Math.min(destination.width / source.width, destination.height / source.height);
          },
          findScaleToCover: function(source, destination) {
            return Math.max(destination.width / source.width, destination.height / source.height);
          },
          matrixToSVG: function(transform2) {
            return "matrix(" + transform2.map(function(value) {
              return fabric4.util.toFixed(value, fabric4.Object.NUM_FRACTION_DIGITS);
            }).join(" ") + ")";
          },
          removeTransformFromObject: function(object, transform2) {
            var inverted = fabric4.util.invertTransform(transform2), finalTransform = fabric4.util.multiplyTransformMatrices(inverted, object.calcOwnMatrix());
            fabric4.util.applyTransformToObject(object, finalTransform);
          },
          addTransformToObject: function(object, transform2) {
            fabric4.util.applyTransformToObject(object, fabric4.util.multiplyTransformMatrices(transform2, object.calcOwnMatrix()));
          },
          applyTransformToObject: function(object, transform2) {
            var options = fabric4.util.qrDecompose(transform2), center = new fabric4.Point(options.translateX, options.translateY);
            object.flipX = false;
            object.flipY = false;
            object.set("scaleX", options.scaleX);
            object.set("scaleY", options.scaleY);
            object.skewX = options.skewX;
            object.skewY = options.skewY;
            object.angle = options.angle;
            object.setPositionByOrigin(center, "center", "center");
          },
          sizeAfterTransform: function(width2, height2, options) {
            var dimX = width2 / 2, dimY = height2 / 2, points = [
              {
                x: -dimX,
                y: -dimY
              },
              {
                x: dimX,
                y: -dimY
              },
              {
                x: -dimX,
                y: dimY
              },
              {
                x: dimX,
                y: dimY
              }
            ], transformMatrix = fabric4.util.calcDimensionsMatrix(options), bbox = fabric4.util.makeBoundingBoxFromPoints(points, transformMatrix);
            return {
              x: bbox.width,
              y: bbox.height
            };
          }
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function() {
        var _join = Array.prototype.join, commandLengths = {
          m: 2,
          l: 2,
          h: 1,
          v: 1,
          c: 6,
          s: 4,
          q: 4,
          t: 2,
          a: 7
        }, repeatedCommands = {
          m: "l",
          M: "L"
        };
        function segmentToBezier(th2, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY) {
          var costh2 = fabric4.util.cos(th2), sinth2 = fabric4.util.sin(th2), costh3 = fabric4.util.cos(th3), sinth3 = fabric4.util.sin(th3), toX = cosTh * rx * costh3 - sinTh * ry * sinth3 + cx1, toY = sinTh * rx * costh3 + cosTh * ry * sinth3 + cy1, cp1X = fromX + mT * (-cosTh * rx * sinth2 - sinTh * ry * costh2), cp1Y = fromY + mT * (-sinTh * rx * sinth2 + cosTh * ry * costh2), cp2X = toX + mT * (cosTh * rx * sinth3 + sinTh * ry * costh3), cp2Y = toY + mT * (sinTh * rx * sinth3 - cosTh * ry * costh3);
          return [
            "C",
            cp1X,
            cp1Y,
            cp2X,
            cp2Y,
            toX,
            toY
          ];
        }
        function arcToSegments(toX, toY, rx, ry, large, sweep, rotateX) {
          var PI = Math.PI, th = rotateX * PI / 180, sinTh = fabric4.util.sin(th), cosTh = fabric4.util.cos(th), fromX = 0, fromY = 0;
          rx = Math.abs(rx);
          ry = Math.abs(ry);
          var px = -cosTh * toX * 0.5 - sinTh * toY * 0.5, py = -cosTh * toY * 0.5 + sinTh * toX * 0.5, rx2 = rx * rx, ry2 = ry * ry, py2 = py * py, px2 = px * px, pl = rx2 * ry2 - rx2 * py2 - ry2 * px2, root = 0;
          if (pl < 0) {
            var s = Math.sqrt(1 - pl / (rx2 * ry2));
            rx *= s;
            ry *= s;
          } else {
            root = (large === sweep ? -1 : 1) * Math.sqrt(pl / (rx2 * py2 + ry2 * px2));
          }
          var cx2 = root * rx * py / ry, cy = -root * ry * px / rx, cx1 = cosTh * cx2 - sinTh * cy + toX * 0.5, cy1 = sinTh * cx2 + cosTh * cy + toY * 0.5, mTheta = calcVectorAngle(1, 0, (px - cx2) / rx, (py - cy) / ry), dtheta = calcVectorAngle((px - cx2) / rx, (py - cy) / ry, (-px - cx2) / rx, (-py - cy) / ry);
          if (sweep === 0 && dtheta > 0) {
            dtheta -= 2 * PI;
          } else if (sweep === 1 && dtheta < 0) {
            dtheta += 2 * PI;
          }
          var segments = Math.ceil(Math.abs(dtheta / PI * 2)), result = [], mDelta = dtheta / segments, mT = 8 / 3 * Math.sin(mDelta / 4) * Math.sin(mDelta / 4) / Math.sin(mDelta / 2), th3 = mTheta + mDelta;
          for (var i = 0; i < segments; i++) {
            result[i] = segmentToBezier(mTheta, th3, cosTh, sinTh, rx, ry, cx1, cy1, mT, fromX, fromY);
            fromX = result[i][5];
            fromY = result[i][6];
            mTheta = th3;
            th3 += mDelta;
          }
          return result;
        }
        function calcVectorAngle(ux, uy, vx, vy) {
          var ta = Math.atan2(uy, ux), tb = Math.atan2(vy, vx);
          if (tb >= ta) {
            return tb - ta;
          } else {
            return 2 * Math.PI - (ta - tb);
          }
        }
        function getBoundsOfCurve(x0, y0, x1, y1, x2, y2, x3, y3) {
          var argsString;
          if (fabric4.cachesBoundsOfCurve) {
            argsString = _join.call(arguments);
            if (fabric4.boundsOfCurveCache[argsString]) {
              return fabric4.boundsOfCurveCache[argsString];
            }
          }
          var sqrt = Math.sqrt, min = Math.min, max = Math.max, abs2 = Math.abs, tvalues = [], bounds = [[], []], a, b, c, t, t1, t2, b2ac, sqrtb2ac;
          b = 6 * x0 - 12 * x1 + 6 * x2;
          a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
          c = 3 * x1 - 3 * x0;
          for (var i = 0; i < 2; ++i) {
            if (i > 0) {
              b = 6 * y0 - 12 * y1 + 6 * y2;
              a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
              c = 3 * y1 - 3 * y0;
            }
            if (abs2(a) < 1e-12) {
              if (abs2(b) < 1e-12) {
                continue;
              }
              t = -c / b;
              if (0 < t && t < 1) {
                tvalues.push(t);
              }
              continue;
            }
            b2ac = b * b - 4 * c * a;
            if (b2ac < 0) {
              continue;
            }
            sqrtb2ac = sqrt(b2ac);
            t1 = (-b + sqrtb2ac) / (2 * a);
            if (0 < t1 && t1 < 1) {
              tvalues.push(t1);
            }
            t2 = (-b - sqrtb2ac) / (2 * a);
            if (0 < t2 && t2 < 1) {
              tvalues.push(t2);
            }
          }
          var x, y, j = tvalues.length, jlen = j, mt;
          while (j--) {
            t = tvalues[j];
            mt = 1 - t;
            x = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
            bounds[0][j] = x;
            y = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
            bounds[1][j] = y;
          }
          bounds[0][jlen] = x0;
          bounds[1][jlen] = y0;
          bounds[0][jlen + 1] = x3;
          bounds[1][jlen + 1] = y3;
          var result = [
            {
              x: min.apply(null, bounds[0]),
              y: min.apply(null, bounds[1])
            },
            {
              x: max.apply(null, bounds[0]),
              y: max.apply(null, bounds[1])
            }
          ];
          if (fabric4.cachesBoundsOfCurve) {
            fabric4.boundsOfCurveCache[argsString] = result;
          }
          return result;
        }
        function fromArcToBeziers(fx, fy, coords) {
          var rx = coords[1], ry = coords[2], rot = coords[3], large = coords[4], sweep = coords[5], tx = coords[6], ty = coords[7], segsNorm = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);
          for (var i = 0, len = segsNorm.length; i < len; i++) {
            segsNorm[i][1] += fx;
            segsNorm[i][2] += fy;
            segsNorm[i][3] += fx;
            segsNorm[i][4] += fy;
            segsNorm[i][5] += fx;
            segsNorm[i][6] += fy;
          }
          return segsNorm;
        }
        ;
        function makePathSimpler(path) {
          var x = 0, y = 0, len = path.length, x1 = 0, y1 = 0, current, i, converted, destinationPath = [], previous, controlX, controlY;
          for (i = 0; i < len; ++i) {
            converted = false;
            current = path[i].slice(0);
            switch (current[0]) {
              case "l":
                current[0] = "L";
                current[1] += x;
                current[2] += y;
              case "L":
                x = current[1];
                y = current[2];
                break;
              case "h":
                current[1] += x;
              case "H":
                current[0] = "L";
                current[2] = y;
                x = current[1];
                break;
              case "v":
                current[1] += y;
              case "V":
                current[0] = "L";
                y = current[1];
                current[1] = x;
                current[2] = y;
                break;
              case "m":
                current[0] = "M";
                current[1] += x;
                current[2] += y;
              case "M":
                x = current[1];
                y = current[2];
                x1 = current[1];
                y1 = current[2];
                break;
              case "c":
                current[0] = "C";
                current[1] += x;
                current[2] += y;
                current[3] += x;
                current[4] += y;
                current[5] += x;
                current[6] += y;
              case "C":
                controlX = current[3];
                controlY = current[4];
                x = current[5];
                y = current[6];
                break;
              case "s":
                current[0] = "S";
                current[1] += x;
                current[2] += y;
                current[3] += x;
                current[4] += y;
              case "S":
                if (previous === "C") {
                  controlX = 2 * x - controlX;
                  controlY = 2 * y - controlY;
                } else {
                  controlX = x;
                  controlY = y;
                }
                x = current[3];
                y = current[4];
                current[0] = "C";
                current[5] = current[3];
                current[6] = current[4];
                current[3] = current[1];
                current[4] = current[2];
                current[1] = controlX;
                current[2] = controlY;
                controlX = current[3];
                controlY = current[4];
                break;
              case "q":
                current[0] = "Q";
                current[1] += x;
                current[2] += y;
                current[3] += x;
                current[4] += y;
              case "Q":
                controlX = current[1];
                controlY = current[2];
                x = current[3];
                y = current[4];
                break;
              case "t":
                current[0] = "T";
                current[1] += x;
                current[2] += y;
              case "T":
                if (previous === "Q") {
                  controlX = 2 * x - controlX;
                  controlY = 2 * y - controlY;
                } else {
                  controlX = x;
                  controlY = y;
                }
                current[0] = "Q";
                x = current[1];
                y = current[2];
                current[1] = controlX;
                current[2] = controlY;
                current[3] = x;
                current[4] = y;
                break;
              case "a":
                current[0] = "A";
                current[6] += x;
                current[7] += y;
              case "A":
                converted = true;
                destinationPath = destinationPath.concat(fromArcToBeziers(x, y, current));
                x = current[6];
                y = current[7];
                break;
              case "z":
              case "Z":
                x = x1;
                y = y1;
                break;
              default:
            }
            if (!converted) {
              destinationPath.push(current);
            }
            previous = current[0];
          }
          return destinationPath;
        }
        ;
        function calcLineLength(x1, y1, x2, y2) {
          return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
        }
        function CB1(t) {
          return t * t * t;
        }
        function CB2(t) {
          return 3 * t * t * (1 - t);
        }
        function CB3(t) {
          return 3 * t * (1 - t) * (1 - t);
        }
        function CB4(t) {
          return (1 - t) * (1 - t) * (1 - t);
        }
        function getPointOnCubicBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {
          return function(pct) {
            var c1 = CB1(pct), c2 = CB2(pct), c3 = CB3(pct), c4 = CB4(pct);
            return {
              x: p4x * c1 + p3x * c2 + p2x * c3 + p1x * c4,
              y: p4y * c1 + p3y * c2 + p2y * c3 + p1y * c4
            };
          };
        }
        function getTangentCubicIterator(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {
          return function(pct) {
            var invT = 1 - pct, tangentX = 3 * invT * invT * (p2x - p1x) + 6 * invT * pct * (p3x - p2x) + 3 * pct * pct * (p4x - p3x), tangentY = 3 * invT * invT * (p2y - p1y) + 6 * invT * pct * (p3y - p2y) + 3 * pct * pct * (p4y - p3y);
            return Math.atan2(tangentY, tangentX);
          };
        }
        function QB1(t) {
          return t * t;
        }
        function QB2(t) {
          return 2 * t * (1 - t);
        }
        function QB3(t) {
          return (1 - t) * (1 - t);
        }
        function getPointOnQuadraticBezierIterator(p1x, p1y, p2x, p2y, p3x, p3y) {
          return function(pct) {
            var c1 = QB1(pct), c2 = QB2(pct), c3 = QB3(pct);
            return {
              x: p3x * c1 + p2x * c2 + p1x * c3,
              y: p3y * c1 + p2y * c2 + p1y * c3
            };
          };
        }
        function getTangentQuadraticIterator(p1x, p1y, p2x, p2y, p3x, p3y) {
          return function(pct) {
            var invT = 1 - pct, tangentX = 2 * invT * (p2x - p1x) + 2 * pct * (p3x - p2x), tangentY = 2 * invT * (p2y - p1y) + 2 * pct * (p3y - p2y);
            return Math.atan2(tangentY, tangentX);
          };
        }
        function pathIterator(iterator, x1, y1) {
          var tempP = { x: x1, y: y1 }, p, tmpLen = 0, perc;
          for (perc = 1; perc <= 100; perc += 1) {
            p = iterator(perc / 100);
            tmpLen += calcLineLength(tempP.x, tempP.y, p.x, p.y);
            tempP = p;
          }
          return tmpLen;
        }
        function findPercentageForDistance(segInfo, distance) {
          var perc = 0, tmpLen = 0, iterator = segInfo.iterator, tempP = { x: segInfo.x, y: segInfo.y }, p, nextLen, nextStep = 0.01, angleFinder = segInfo.angleFinder, lastPerc;
          while (tmpLen < distance && perc <= 1 && nextStep > 1e-4) {
            p = iterator(perc);
            lastPerc = perc;
            nextLen = calcLineLength(tempP.x, tempP.y, p.x, p.y);
            if (nextLen + tmpLen > distance) {
              nextStep /= 2;
              perc -= nextStep;
            } else {
              tempP = p;
              perc += nextStep;
              tmpLen += nextLen;
            }
          }
          p.angle = angleFinder(lastPerc);
          return p;
        }
        function getPathSegmentsInfo(path) {
          var totalLength = 0, len = path.length, current, x1 = 0, y1 = 0, x2 = 0, y2 = 0, info = [], iterator, tempInfo, angleFinder;
          for (var i = 0; i < len; i++) {
            current = path[i];
            tempInfo = {
              x: x1,
              y: y1,
              command: current[0]
            };
            switch (current[0]) {
              case "M":
                tempInfo.length = 0;
                x2 = x1 = current[1];
                y2 = y1 = current[2];
                break;
              case "L":
                tempInfo.length = calcLineLength(x1, y1, current[1], current[2]);
                x1 = current[1];
                y1 = current[2];
                break;
              case "C":
                iterator = getPointOnCubicBezierIterator(x1, y1, current[1], current[2], current[3], current[4], current[5], current[6]);
                angleFinder = getTangentCubicIterator(x1, y1, current[1], current[2], current[3], current[4], current[5], current[6]);
                tempInfo.iterator = iterator;
                tempInfo.angleFinder = angleFinder;
                tempInfo.length = pathIterator(iterator, x1, y1);
                x1 = current[5];
                y1 = current[6];
                break;
              case "Q":
                iterator = getPointOnQuadraticBezierIterator(x1, y1, current[1], current[2], current[3], current[4]);
                angleFinder = getTangentQuadraticIterator(x1, y1, current[1], current[2], current[3], current[4]);
                tempInfo.iterator = iterator;
                tempInfo.angleFinder = angleFinder;
                tempInfo.length = pathIterator(iterator, x1, y1);
                x1 = current[3];
                y1 = current[4];
                break;
              case "Z":
              case "z":
                tempInfo.destX = x2;
                tempInfo.destY = y2;
                tempInfo.length = calcLineLength(x1, y1, x2, y2);
                x1 = x2;
                y1 = y2;
                break;
            }
            totalLength += tempInfo.length;
            info.push(tempInfo);
          }
          info.push({ length: totalLength, x: x1, y: y1 });
          return info;
        }
        function getPointOnPath(path, distance, infos) {
          if (!infos) {
            infos = getPathSegmentsInfo(path);
          }
          var i = 0;
          while (distance - infos[i].length > 0 && i < infos.length - 2) {
            distance -= infos[i].length;
            i++;
          }
          var segInfo = infos[i], segPercent = distance / segInfo.length, command = segInfo.command, segment = path[i], info;
          switch (command) {
            case "M":
              return { x: segInfo.x, y: segInfo.y, angle: 0 };
            case "Z":
            case "z":
              info = new fabric4.Point(segInfo.x, segInfo.y).lerp(new fabric4.Point(segInfo.destX, segInfo.destY), segPercent);
              info.angle = Math.atan2(segInfo.destY - segInfo.y, segInfo.destX - segInfo.x);
              return info;
            case "L":
              info = new fabric4.Point(segInfo.x, segInfo.y).lerp(new fabric4.Point(segment[1], segment[2]), segPercent);
              info.angle = Math.atan2(segment[2] - segInfo.y, segment[1] - segInfo.x);
              return info;
            case "C":
              return findPercentageForDistance(segInfo, distance);
            case "Q":
              return findPercentageForDistance(segInfo, distance);
          }
        }
        function parsePath(pathString) {
          var result = [], coords = [], currentPath, parsed, re = fabric4.rePathCommand, rNumber = "[-+]?(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][-+]?\\d+)?\\s*", rNumberCommaWsp = "(" + rNumber + ")" + fabric4.commaWsp, rFlagCommaWsp = "([01])" + fabric4.commaWsp + "?", rArcSeq = rNumberCommaWsp + "?" + rNumberCommaWsp + "?" + rNumberCommaWsp + rFlagCommaWsp + rFlagCommaWsp + rNumberCommaWsp + "?(" + rNumber + ")", regArcArgumentSequence = new RegExp(rArcSeq, "g"), match2, coordsStr, path;
          if (!pathString || !pathString.match) {
            return result;
          }
          path = pathString.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi);
          for (var i = 0, coordsParsed, len = path.length; i < len; i++) {
            currentPath = path[i];
            coordsStr = currentPath.slice(1).trim();
            coords.length = 0;
            var command = currentPath.charAt(0);
            coordsParsed = [command];
            if (command.toLowerCase() === "a") {
              for (var args; args = regArcArgumentSequence.exec(coordsStr); ) {
                for (var j = 1; j < args.length; j++) {
                  coords.push(args[j]);
                }
              }
            } else {
              while (match2 = re.exec(coordsStr)) {
                coords.push(match2[0]);
              }
            }
            for (var j = 0, jlen = coords.length; j < jlen; j++) {
              parsed = parseFloat(coords[j]);
              if (!isNaN(parsed)) {
                coordsParsed.push(parsed);
              }
            }
            var commandLength = commandLengths[command.toLowerCase()], repeatedCommand = repeatedCommands[command] || command;
            if (coordsParsed.length - 1 > commandLength) {
              for (var k = 1, klen = coordsParsed.length; k < klen; k += commandLength) {
                result.push([command].concat(coordsParsed.slice(k, k + commandLength)));
                command = repeatedCommand;
              }
            } else {
              result.push(coordsParsed);
            }
          }
          return result;
        }
        ;
        function getSmoothPathFromPoints(points, correction) {
          var path = [], i, p1 = new fabric4.Point(points[0].x, points[0].y), p2 = new fabric4.Point(points[1].x, points[1].y), len = points.length, multSignX = 1, multSignY = 0, manyPoints = len > 2;
          correction = correction || 0;
          if (manyPoints) {
            multSignX = points[2].x < p2.x ? -1 : points[2].x === p2.x ? 0 : 1;
            multSignY = points[2].y < p2.y ? -1 : points[2].y === p2.y ? 0 : 1;
          }
          path.push(["M", p1.x - multSignX * correction, p1.y - multSignY * correction]);
          for (i = 1; i < len; i++) {
            if (!p1.eq(p2)) {
              var midPoint = p1.midPointFrom(p2);
              path.push(["Q", p1.x, p1.y, midPoint.x, midPoint.y]);
            }
            p1 = points[i];
            if (i + 1 < points.length) {
              p2 = points[i + 1];
            }
          }
          if (manyPoints) {
            multSignX = p1.x > points[i - 2].x ? 1 : p1.x === points[i - 2].x ? 0 : -1;
            multSignY = p1.y > points[i - 2].y ? 1 : p1.y === points[i - 2].y ? 0 : -1;
          }
          path.push(["L", p1.x + multSignX * correction, p1.y + multSignY * correction]);
          return path;
        }
        function transformPath(path, transform2, pathOffset) {
          if (pathOffset) {
            transform2 = fabric4.util.multiplyTransformMatrices(transform2, [1, 0, 0, 1, -pathOffset.x, -pathOffset.y]);
          }
          return path.map(function(pathSegment) {
            var newSegment = pathSegment.slice(0), point = {};
            for (var i = 1; i < pathSegment.length - 1; i += 2) {
              point.x = pathSegment[i];
              point.y = pathSegment[i + 1];
              point = fabric4.util.transformPoint(point, transform2);
              newSegment[i] = point.x;
              newSegment[i + 1] = point.y;
            }
            return newSegment;
          });
        }
        function getBoundsOfArc(fx, fy, rx, ry, rot, large, sweep, tx, ty) {
          var fromX = 0, fromY = 0, bound, bounds = [], segs = arcToSegments(tx - fx, ty - fy, rx, ry, large, sweep, rot);
          for (var i = 0, len = segs.length; i < len; i++) {
            bound = getBoundsOfCurve(fromX, fromY, segs[i][1], segs[i][2], segs[i][3], segs[i][4], segs[i][5], segs[i][6]);
            bounds.push({ x: bound[0].x + fx, y: bound[0].y + fy });
            bounds.push({ x: bound[1].x + fx, y: bound[1].y + fy });
            fromX = segs[i][5];
            fromY = segs[i][6];
          }
          return bounds;
        }
        ;
        function drawArc(ctx, fx, fy, coords) {
          coords = coords.slice(0).unshift("X");
          var beziers = fromArcToBeziers(fx, fy, coords);
          beziers.forEach(function(bezier) {
            ctx.bezierCurveTo.apply(ctx, bezier.slice(1));
          });
        }
        ;
        fabric4.util.joinPath = function(pathData) {
          return pathData.map(function(segment) {
            return segment.join(" ");
          }).join(" ");
        };
        fabric4.util.parsePath = parsePath;
        fabric4.util.makePathSimpler = makePathSimpler;
        fabric4.util.getSmoothPathFromPoints = getSmoothPathFromPoints;
        fabric4.util.getPathSegmentsInfo = getPathSegmentsInfo;
        fabric4.util.getBoundsOfCurve = getBoundsOfCurve;
        fabric4.util.getPointOnPath = getPointOnPath;
        fabric4.util.transformPath = transformPath;
        fabric4.util.fromArcToBeizers = fromArcToBeziers;
        fabric4.util.getBoundsOfArc = getBoundsOfArc;
        fabric4.util.drawArc = drawArc;
      })();
      (function() {
        var slice2 = Array.prototype.slice;
        function invoke(array, method) {
          var args = slice2.call(arguments, 2), result = [];
          for (var i = 0, len = array.length; i < len; i++) {
            result[i] = args.length ? array[i][method].apply(array[i], args) : array[i][method].call(array[i]);
          }
          return result;
        }
        function max(array, byProperty) {
          return find(array, byProperty, function(value1, value2) {
            return value1 >= value2;
          });
        }
        function min(array, byProperty) {
          return find(array, byProperty, function(value1, value2) {
            return value1 < value2;
          });
        }
        function fill(array, value) {
          var k = array.length;
          while (k--) {
            array[k] = value;
          }
          return array;
        }
        function find(array, byProperty, condition) {
          if (!array || array.length === 0) {
            return;
          }
          var i = array.length - 1, result = byProperty ? array[i][byProperty] : array[i];
          if (byProperty) {
            while (i--) {
              if (condition(array[i][byProperty], result)) {
                result = array[i][byProperty];
              }
            }
          } else {
            while (i--) {
              if (condition(array[i], result)) {
                result = array[i];
              }
            }
          }
          return result;
        }
        fabric4.util.array = {
          fill,
          invoke,
          min,
          max
        };
      })();
      (function() {
        function extend(destination, source, deep) {
          if (deep) {
            if (!fabric4.isLikelyNode && source instanceof Element) {
              destination = source;
            } else if (source instanceof Array) {
              destination = [];
              for (var i = 0, len = source.length; i < len; i++) {
                destination[i] = extend({}, source[i], deep);
              }
            } else if (source && typeof source === "object") {
              for (var property in source) {
                if (property === "canvas" || property === "group") {
                  destination[property] = null;
                } else if (source.hasOwnProperty(property)) {
                  destination[property] = extend({}, source[property], deep);
                }
              }
            } else {
              destination = source;
            }
          } else {
            for (var property in source) {
              destination[property] = source[property];
            }
          }
          return destination;
        }
        function clone(object, deep) {
          return extend({}, object, deep);
        }
        fabric4.util.object = {
          extend,
          clone
        };
        fabric4.util.object.extend(fabric4.util, fabric4.Observable);
      })();
      (function() {
        function camelize(string) {
          return string.replace(/-+(.)?/g, function(match2, character2) {
            return character2 ? character2.toUpperCase() : "";
          });
        }
        function capitalize2(string, firstLetterOnly) {
          return string.charAt(0).toUpperCase() + (firstLetterOnly ? string.slice(1) : string.slice(1).toLowerCase());
        }
        function escapeXml(string) {
          return string.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        }
        function graphemeSplit(textstring) {
          var i = 0, chr, graphemes = [];
          for (i = 0, chr; i < textstring.length; i++) {
            if ((chr = getWholeChar(textstring, i)) === false) {
              continue;
            }
            graphemes.push(chr);
          }
          return graphemes;
        }
        function getWholeChar(str, i) {
          var code = str.charCodeAt(i);
          if (isNaN(code)) {
            return "";
          }
          if (code < 55296 || code > 57343) {
            return str.charAt(i);
          }
          if (55296 <= code && code <= 56319) {
            if (str.length <= i + 1) {
              throw "High surrogate without following low surrogate";
            }
            var next2 = str.charCodeAt(i + 1);
            if (56320 > next2 || next2 > 57343) {
              throw "High surrogate without following low surrogate";
            }
            return str.charAt(i) + str.charAt(i + 1);
          }
          if (i === 0) {
            throw "Low surrogate without preceding high surrogate";
          }
          var prev2 = str.charCodeAt(i - 1);
          if (55296 > prev2 || prev2 > 56319) {
            throw "Low surrogate without preceding high surrogate";
          }
          return false;
        }
        fabric4.util.string = {
          camelize,
          capitalize: capitalize2,
          escapeXml,
          graphemeSplit
        };
      })();
      (function() {
        var slice2 = Array.prototype.slice, emptyFunction = function() {
        }, IS_DONTENUM_BUGGY = function() {
          for (var p in { toString: 1 }) {
            if (p === "toString") {
              return false;
            }
          }
          return true;
        }(), addMethods = function(klass, source, parent) {
          for (var property in source) {
            if (property in klass.prototype && typeof klass.prototype[property] === "function" && (source[property] + "").indexOf("callSuper") > -1) {
              klass.prototype[property] = function(property2) {
                return function() {
                  var superclass = this.constructor.superclass;
                  this.constructor.superclass = parent;
                  var returnValue = source[property2].apply(this, arguments);
                  this.constructor.superclass = superclass;
                  if (property2 !== "initialize") {
                    return returnValue;
                  }
                };
              }(property);
            } else {
              klass.prototype[property] = source[property];
            }
            if (IS_DONTENUM_BUGGY) {
              if (source.toString !== Object.prototype.toString) {
                klass.prototype.toString = source.toString;
              }
              if (source.valueOf !== Object.prototype.valueOf) {
                klass.prototype.valueOf = source.valueOf;
              }
            }
          }
        };
        function Subclass() {
        }
        function callSuper(methodName) {
          var parentMethod = null, _this = this;
          while (_this.constructor.superclass) {
            var superClassMethod = _this.constructor.superclass.prototype[methodName];
            if (_this[methodName] !== superClassMethod) {
              parentMethod = superClassMethod;
              break;
            }
            _this = _this.constructor.superclass.prototype;
          }
          if (!parentMethod) {
            return console.log("tried to callSuper " + methodName + ", method not found in prototype chain", this);
          }
          return arguments.length > 1 ? parentMethod.apply(this, slice2.call(arguments, 1)) : parentMethod.call(this);
        }
        function createClass() {
          var parent = null, properties2 = slice2.call(arguments, 0);
          if (typeof properties2[0] === "function") {
            parent = properties2.shift();
          }
          function klass() {
            this.initialize.apply(this, arguments);
          }
          klass.superclass = parent;
          klass.subclasses = [];
          if (parent) {
            Subclass.prototype = parent.prototype;
            klass.prototype = new Subclass();
            parent.subclasses.push(klass);
          }
          for (var i = 0, length2 = properties2.length; i < length2; i++) {
            addMethods(klass, properties2[i], parent);
          }
          if (!klass.prototype.initialize) {
            klass.prototype.initialize = emptyFunction;
          }
          klass.prototype.constructor = klass;
          klass.prototype.callSuper = callSuper;
          return klass;
        }
        fabric4.util.createClass = createClass;
      })();
      (function() {
        var couldUseAttachEvent = !!fabric4.document.createElement("div").attachEvent, touchEvents = ["touchstart", "touchmove", "touchend"];
        fabric4.util.addListener = function(element, eventName, handler, options) {
          element && element.addEventListener(eventName, handler, couldUseAttachEvent ? false : options);
        };
        fabric4.util.removeListener = function(element, eventName, handler, options) {
          element && element.removeEventListener(eventName, handler, couldUseAttachEvent ? false : options);
        };
        function getTouchInfo(event) {
          var touchProp = event.changedTouches;
          if (touchProp && touchProp[0]) {
            return touchProp[0];
          }
          return event;
        }
        fabric4.util.getPointer = function(event) {
          var element = event.target, scroll = fabric4.util.getScrollLeftTop(element), _evt = getTouchInfo(event);
          return {
            x: _evt.clientX + scroll.left,
            y: _evt.clientY + scroll.top
          };
        };
        fabric4.util.isTouchEvent = function(event) {
          return touchEvents.indexOf(event.type) > -1 || event.pointerType === "touch";
        };
      })();
      (function() {
        function setStyle(element, styles4) {
          var elementStyle = element.style;
          if (!elementStyle) {
            return element;
          }
          if (typeof styles4 === "string") {
            element.style.cssText += ";" + styles4;
            return styles4.indexOf("opacity") > -1 ? setOpacity(element, styles4.match(/opacity:\s*(\d?\.?\d*)/)[1]) : element;
          }
          for (var property in styles4) {
            if (property === "opacity") {
              setOpacity(element, styles4[property]);
            } else {
              var normalizedProperty = property === "float" || property === "cssFloat" ? typeof elementStyle.styleFloat === "undefined" ? "cssFloat" : "styleFloat" : property;
              elementStyle[normalizedProperty] = styles4[property];
            }
          }
          return element;
        }
        var parseEl = fabric4.document.createElement("div"), supportsOpacity = typeof parseEl.style.opacity === "string", supportsFilters = typeof parseEl.style.filter === "string", reOpacity = /alpha\s*\(\s*opacity\s*=\s*([^\)]+)\)/, setOpacity = function(element) {
          return element;
        };
        if (supportsOpacity) {
          setOpacity = function(element, value) {
            element.style.opacity = value;
            return element;
          };
        } else if (supportsFilters) {
          setOpacity = function(element, value) {
            var es = element.style;
            if (element.currentStyle && !element.currentStyle.hasLayout) {
              es.zoom = 1;
            }
            if (reOpacity.test(es.filter)) {
              value = value >= 0.9999 ? "" : "alpha(opacity=" + value * 100 + ")";
              es.filter = es.filter.replace(reOpacity, value);
            } else {
              es.filter += " alpha(opacity=" + value * 100 + ")";
            }
            return element;
          };
        }
        fabric4.util.setStyle = setStyle;
      })();
      (function() {
        var _slice = Array.prototype.slice;
        function getById(id) {
          return typeof id === "string" ? fabric4.document.getElementById(id) : id;
        }
        var sliceCanConvertNodelists, toArray = function(arrayLike) {
          return _slice.call(arrayLike, 0);
        };
        try {
          sliceCanConvertNodelists = toArray(fabric4.document.childNodes) instanceof Array;
        } catch (err) {
        }
        if (!sliceCanConvertNodelists) {
          toArray = function(arrayLike) {
            var arr = new Array(arrayLike.length), i = arrayLike.length;
            while (i--) {
              arr[i] = arrayLike[i];
            }
            return arr;
          };
        }
        function makeElement(tagName, attributes) {
          var el = fabric4.document.createElement(tagName);
          for (var prop in attributes) {
            if (prop === "class") {
              el.className = attributes[prop];
            } else if (prop === "for") {
              el.htmlFor = attributes[prop];
            } else {
              el.setAttribute(prop, attributes[prop]);
            }
          }
          return el;
        }
        function addClass(element, className) {
          if (element && (" " + element.className + " ").indexOf(" " + className + " ") === -1) {
            element.className += (element.className ? " " : "") + className;
          }
        }
        function wrapElement(element, wrapper, attributes) {
          if (typeof wrapper === "string") {
            wrapper = makeElement(wrapper, attributes);
          }
          if (element.parentNode) {
            element.parentNode.replaceChild(wrapper, element);
          }
          wrapper.appendChild(element);
          return wrapper;
        }
        function getScrollLeftTop(element) {
          var left2 = 0, top2 = 0, docElement = fabric4.document.documentElement, body = fabric4.document.body || {
            scrollLeft: 0,
            scrollTop: 0
          };
          while (element && (element.parentNode || element.host)) {
            element = element.parentNode || element.host;
            if (element === fabric4.document) {
              left2 = body.scrollLeft || docElement.scrollLeft || 0;
              top2 = body.scrollTop || docElement.scrollTop || 0;
            } else {
              left2 += element.scrollLeft || 0;
              top2 += element.scrollTop || 0;
            }
            if (element.nodeType === 1 && element.style.position === "fixed") {
              break;
            }
          }
          return { left: left2, top: top2 };
        }
        function getElementOffset(element) {
          var docElem, doc = element && element.ownerDocument, box = { left: 0, top: 0 }, offset = { left: 0, top: 0 }, scrollLeftTop, offsetAttributes = {
            borderLeftWidth: "left",
            borderTopWidth: "top",
            paddingLeft: "left",
            paddingTop: "top"
          };
          if (!doc) {
            return offset;
          }
          for (var attr in offsetAttributes) {
            offset[offsetAttributes[attr]] += parseInt(getElementStyle(element, attr), 10) || 0;
          }
          docElem = doc.documentElement;
          if (typeof element.getBoundingClientRect !== "undefined") {
            box = element.getBoundingClientRect();
          }
          scrollLeftTop = getScrollLeftTop(element);
          return {
            left: box.left + scrollLeftTop.left - (docElem.clientLeft || 0) + offset.left,
            top: box.top + scrollLeftTop.top - (docElem.clientTop || 0) + offset.top
          };
        }
        var getElementStyle;
        if (fabric4.document.defaultView && fabric4.document.defaultView.getComputedStyle) {
          getElementStyle = function(element, attr) {
            var style3 = fabric4.document.defaultView.getComputedStyle(element, null);
            return style3 ? style3[attr] : void 0;
          };
        } else {
          getElementStyle = function(element, attr) {
            var value = element.style[attr];
            if (!value && element.currentStyle) {
              value = element.currentStyle[attr];
            }
            return value;
          };
        }
        (function() {
          var style3 = fabric4.document.documentElement.style, selectProp = "userSelect" in style3 ? "userSelect" : "MozUserSelect" in style3 ? "MozUserSelect" : "WebkitUserSelect" in style3 ? "WebkitUserSelect" : "KhtmlUserSelect" in style3 ? "KhtmlUserSelect" : "";
          function makeElementUnselectable(element) {
            if (typeof element.onselectstart !== "undefined") {
              element.onselectstart = fabric4.util.falseFunction;
            }
            if (selectProp) {
              element.style[selectProp] = "none";
            } else if (typeof element.unselectable === "string") {
              element.unselectable = "on";
            }
            return element;
          }
          function makeElementSelectable(element) {
            if (typeof element.onselectstart !== "undefined") {
              element.onselectstart = null;
            }
            if (selectProp) {
              element.style[selectProp] = "";
            } else if (typeof element.unselectable === "string") {
              element.unselectable = "";
            }
            return element;
          }
          fabric4.util.makeElementUnselectable = makeElementUnselectable;
          fabric4.util.makeElementSelectable = makeElementSelectable;
        })();
        function getNodeCanvas(element) {
          var impl = fabric4.jsdomImplForWrapper(element);
          return impl._canvas || impl._image;
        }
        ;
        function cleanUpJsdomNode(element) {
          if (!fabric4.isLikelyNode) {
            return;
          }
          var impl = fabric4.jsdomImplForWrapper(element);
          if (impl) {
            impl._image = null;
            impl._canvas = null;
            impl._currentSrc = null;
            impl._attributes = null;
            impl._classList = null;
          }
        }
        function setImageSmoothing(ctx, value) {
          ctx.imageSmoothingEnabled = ctx.imageSmoothingEnabled || ctx.webkitImageSmoothingEnabled || ctx.mozImageSmoothingEnabled || ctx.msImageSmoothingEnabled || ctx.oImageSmoothingEnabled;
          ctx.imageSmoothingEnabled = value;
        }
        fabric4.util.setImageSmoothing = setImageSmoothing;
        fabric4.util.getById = getById;
        fabric4.util.toArray = toArray;
        fabric4.util.addClass = addClass;
        fabric4.util.makeElement = makeElement;
        fabric4.util.wrapElement = wrapElement;
        fabric4.util.getScrollLeftTop = getScrollLeftTop;
        fabric4.util.getElementOffset = getElementOffset;
        fabric4.util.getNodeCanvas = getNodeCanvas;
        fabric4.util.cleanUpJsdomNode = cleanUpJsdomNode;
      })();
      (function() {
        function addParamToUrl(url, param) {
          return url + (/\?/.test(url) ? "&" : "?") + param;
        }
        function emptyFn() {
        }
        function request(url, options) {
          options || (options = {});
          var method = options.method ? options.method.toUpperCase() : "GET", onComplete = options.onComplete || function() {
          }, xhr = new fabric4.window.XMLHttpRequest(), body = options.body || options.parameters;
          xhr.onreadystatechange = function() {
            if (xhr.readyState === 4) {
              onComplete(xhr);
              xhr.onreadystatechange = emptyFn;
            }
          };
          if (method === "GET") {
            body = null;
            if (typeof options.parameters === "string") {
              url = addParamToUrl(url, options.parameters);
            }
          }
          xhr.open(method, url, true);
          if (method === "POST" || method === "PUT") {
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          }
          xhr.send(body);
          return xhr;
        }
        fabric4.util.request = request;
      })();
      fabric4.log = console.log;
      fabric4.warn = console.warn;
      (function() {
        function noop2() {
          return false;
        }
        function defaultEasing(t, b, c, d) {
          return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
        }
        function animate(options) {
          var cancel = false;
          requestAnimFrame(function(timestamp) {
            options || (options = {});
            var start = timestamp || +new Date(), duration2 = options.duration || 500, finish = start + duration2, time, onChange = options.onChange || noop2, abort = options.abort || noop2, onComplete = options.onComplete || noop2, easing2 = options.easing || defaultEasing, startValue = "startValue" in options ? options.startValue : 0, endValue = "endValue" in options ? options.endValue : 100, byValue = options.byValue || endValue - startValue;
            options.onStart && options.onStart();
            (function tick(ticktime) {
              time = ticktime || +new Date();
              var currentTime = time > finish ? duration2 : time - start, timePerc = currentTime / duration2, current = easing2(currentTime, startValue, byValue, duration2), valuePerc = Math.abs((current - startValue) / byValue);
              if (cancel) {
                return;
              }
              if (abort(current, valuePerc, timePerc)) {
                onComplete(endValue, 1, 1);
                return;
              }
              if (time > finish) {
                onChange(endValue, 1, 1);
                onComplete(endValue, 1, 1);
                return;
              } else {
                onChange(current, valuePerc, timePerc);
                requestAnimFrame(tick);
              }
            })(start);
          });
          return function() {
            cancel = true;
          };
        }
        var _requestAnimFrame = fabric4.window.requestAnimationFrame || fabric4.window.webkitRequestAnimationFrame || fabric4.window.mozRequestAnimationFrame || fabric4.window.oRequestAnimationFrame || fabric4.window.msRequestAnimationFrame || function(callback) {
          return fabric4.window.setTimeout(callback, 1e3 / 60);
        };
        var _cancelAnimFrame = fabric4.window.cancelAnimationFrame || fabric4.window.clearTimeout;
        function requestAnimFrame() {
          return _requestAnimFrame.apply(fabric4.window, arguments);
        }
        function cancelAnimFrame() {
          return _cancelAnimFrame.apply(fabric4.window, arguments);
        }
        fabric4.util.animate = animate;
        fabric4.util.requestAnimFrame = requestAnimFrame;
        fabric4.util.cancelAnimFrame = cancelAnimFrame;
      })();
      (function() {
        function calculateColor(begin, end, pos) {
          var color2 = "rgba(" + parseInt(begin[0] + pos * (end[0] - begin[0]), 10) + "," + parseInt(begin[1] + pos * (end[1] - begin[1]), 10) + "," + parseInt(begin[2] + pos * (end[2] - begin[2]), 10);
          color2 += "," + (begin && end ? parseFloat(begin[3] + pos * (end[3] - begin[3])) : 1);
          color2 += ")";
          return color2;
        }
        function animateColor(fromColor, toColor, duration2, options) {
          var startColor = new fabric4.Color(fromColor).getSource(), endColor = new fabric4.Color(toColor).getSource(), originalOnComplete = options.onComplete, originalOnChange = options.onChange;
          options = options || {};
          return fabric4.util.animate(fabric4.util.object.extend(options, {
            duration: duration2 || 500,
            startValue: startColor,
            endValue: endColor,
            byValue: endColor,
            easing: function(currentTime, startValue, byValue, duration3) {
              var posValue = options.colorEasing ? options.colorEasing(currentTime, duration3) : 1 - Math.cos(currentTime / duration3 * (Math.PI / 2));
              return calculateColor(startValue, byValue, posValue);
            },
            onComplete: function(current, valuePerc, timePerc) {
              if (originalOnComplete) {
                return originalOnComplete(calculateColor(endColor, endColor, 0), valuePerc, timePerc);
              }
            },
            onChange: function(current, valuePerc, timePerc) {
              if (originalOnChange) {
                if (Array.isArray(current)) {
                  return originalOnChange(calculateColor(current, current, 0), valuePerc, timePerc);
                }
                originalOnChange(current, valuePerc, timePerc);
              }
            }
          }));
        }
        fabric4.util.animateColor = animateColor;
      })();
      (function() {
        function normalize(a, c, p, s) {
          if (a < Math.abs(c)) {
            a = c;
            s = p / 4;
          } else {
            if (c === 0 && a === 0) {
              s = p / (2 * Math.PI) * Math.asin(1);
            } else {
              s = p / (2 * Math.PI) * Math.asin(c / a);
            }
          }
          return { a, c, p, s };
        }
        function elastic(opts, t, d) {
          return opts.a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p);
        }
        function easeOutCubic(t, b, c, d) {
          return c * ((t = t / d - 1) * t * t + 1) + b;
        }
        function easeInOutCubic(t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return c / 2 * t * t * t + b;
          }
          return c / 2 * ((t -= 2) * t * t + 2) + b;
        }
        function easeInQuart(t, b, c, d) {
          return c * (t /= d) * t * t * t + b;
        }
        function easeOutQuart(t, b, c, d) {
          return -c * ((t = t / d - 1) * t * t * t - 1) + b;
        }
        function easeInOutQuart(t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return c / 2 * t * t * t * t + b;
          }
          return -c / 2 * ((t -= 2) * t * t * t - 2) + b;
        }
        function easeInQuint(t, b, c, d) {
          return c * (t /= d) * t * t * t * t + b;
        }
        function easeOutQuint(t, b, c, d) {
          return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
        }
        function easeInOutQuint(t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return c / 2 * t * t * t * t * t + b;
          }
          return c / 2 * ((t -= 2) * t * t * t * t + 2) + b;
        }
        function easeInSine(t, b, c, d) {
          return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
        }
        function easeOutSine(t, b, c, d) {
          return c * Math.sin(t / d * (Math.PI / 2)) + b;
        }
        function easeInOutSine(t, b, c, d) {
          return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
        }
        function easeInExpo(t, b, c, d) {
          return t === 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b;
        }
        function easeOutExpo(t, b, c, d) {
          return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b;
        }
        function easeInOutExpo(t, b, c, d) {
          if (t === 0) {
            return b;
          }
          if (t === d) {
            return b + c;
          }
          t /= d / 2;
          if (t < 1) {
            return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
          }
          return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b;
        }
        function easeInCirc(t, b, c, d) {
          return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b;
        }
        function easeOutCirc(t, b, c, d) {
          return c * Math.sqrt(1 - (t = t / d - 1) * t) + b;
        }
        function easeInOutCirc(t, b, c, d) {
          t /= d / 2;
          if (t < 1) {
            return -c / 2 * (Math.sqrt(1 - t * t) - 1) + b;
          }
          return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b;
        }
        function easeInElastic(t, b, c, d) {
          var s = 1.70158, p = 0, a = c;
          if (t === 0) {
            return b;
          }
          t /= d;
          if (t === 1) {
            return b + c;
          }
          if (!p) {
            p = d * 0.3;
          }
          var opts = normalize(a, c, p, s);
          return -elastic(opts, t, d) + b;
        }
        function easeOutElastic(t, b, c, d) {
          var s = 1.70158, p = 0, a = c;
          if (t === 0) {
            return b;
          }
          t /= d;
          if (t === 1) {
            return b + c;
          }
          if (!p) {
            p = d * 0.3;
          }
          var opts = normalize(a, c, p, s);
          return opts.a * Math.pow(2, -10 * t) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p) + opts.c + b;
        }
        function easeInOutElastic(t, b, c, d) {
          var s = 1.70158, p = 0, a = c;
          if (t === 0) {
            return b;
          }
          t /= d / 2;
          if (t === 2) {
            return b + c;
          }
          if (!p) {
            p = d * (0.3 * 1.5);
          }
          var opts = normalize(a, c, p, s);
          if (t < 1) {
            return -0.5 * elastic(opts, t, d) + b;
          }
          return opts.a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - opts.s) * (2 * Math.PI) / opts.p) * 0.5 + opts.c + b;
        }
        function easeInBack(t, b, c, d, s) {
          if (s === void 0) {
            s = 1.70158;
          }
          return c * (t /= d) * t * ((s + 1) * t - s) + b;
        }
        function easeOutBack(t, b, c, d, s) {
          if (s === void 0) {
            s = 1.70158;
          }
          return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
        }
        function easeInOutBack(t, b, c, d, s) {
          if (s === void 0) {
            s = 1.70158;
          }
          t /= d / 2;
          if (t < 1) {
            return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
          }
          return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
        }
        function easeInBounce(t, b, c, d) {
          return c - easeOutBounce(d - t, 0, c, d) + b;
        }
        function easeOutBounce(t, b, c, d) {
          if ((t /= d) < 1 / 2.75) {
            return c * (7.5625 * t * t) + b;
          } else if (t < 2 / 2.75) {
            return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
          } else if (t < 2.5 / 2.75) {
            return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
          } else {
            return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
          }
        }
        function easeInOutBounce(t, b, c, d) {
          if (t < d / 2) {
            return easeInBounce(t * 2, 0, c, d) * 0.5 + b;
          }
          return easeOutBounce(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
        }
        fabric4.util.ease = {
          easeInQuad: function(t, b, c, d) {
            return c * (t /= d) * t + b;
          },
          easeOutQuad: function(t, b, c, d) {
            return -c * (t /= d) * (t - 2) + b;
          },
          easeInOutQuad: function(t, b, c, d) {
            t /= d / 2;
            if (t < 1) {
              return c / 2 * t * t + b;
            }
            return -c / 2 * (--t * (t - 2) - 1) + b;
          },
          easeInCubic: function(t, b, c, d) {
            return c * (t /= d) * t * t + b;
          },
          easeOutCubic,
          easeInOutCubic,
          easeInQuart,
          easeOutQuart,
          easeInOutQuart,
          easeInQuint,
          easeOutQuint,
          easeInOutQuint,
          easeInSine,
          easeOutSine,
          easeInOutSine,
          easeInExpo,
          easeOutExpo,
          easeInOutExpo,
          easeInCirc,
          easeOutCirc,
          easeInOutCirc,
          easeInElastic,
          easeOutElastic,
          easeInOutElastic,
          easeInBack,
          easeOutBack,
          easeInOutBack,
          easeInBounce,
          easeOutBounce,
          easeInOutBounce
        };
      })();
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), extend = fabric5.util.object.extend, clone = fabric5.util.object.clone, toFixed = fabric5.util.toFixed, parseUnit = fabric5.util.parseUnit, multiplyTransformMatrices = fabric5.util.multiplyTransformMatrices, svgValidTagNames = [
          "path",
          "circle",
          "polygon",
          "polyline",
          "ellipse",
          "rect",
          "line",
          "image",
          "text"
        ], svgViewBoxElements = ["symbol", "image", "marker", "pattern", "view", "svg"], svgInvalidAncestors = ["pattern", "defs", "symbol", "metadata", "clipPath", "mask", "desc"], svgValidParents = ["symbol", "g", "a", "svg", "clipPath", "defs"], attributesMap = {
          cx: "left",
          x: "left",
          r: "radius",
          cy: "top",
          y: "top",
          display: "visible",
          visibility: "visible",
          transform: "transformMatrix",
          "fill-opacity": "fillOpacity",
          "fill-rule": "fillRule",
          "font-family": "fontFamily",
          "font-size": "fontSize",
          "font-style": "fontStyle",
          "font-weight": "fontWeight",
          "letter-spacing": "charSpacing",
          "paint-order": "paintFirst",
          "stroke-dasharray": "strokeDashArray",
          "stroke-dashoffset": "strokeDashOffset",
          "stroke-linecap": "strokeLineCap",
          "stroke-linejoin": "strokeLineJoin",
          "stroke-miterlimit": "strokeMiterLimit",
          "stroke-opacity": "strokeOpacity",
          "stroke-width": "strokeWidth",
          "text-decoration": "textDecoration",
          "text-anchor": "textAnchor",
          opacity: "opacity",
          "clip-path": "clipPath",
          "clip-rule": "clipRule",
          "vector-effect": "strokeUniform",
          "image-rendering": "imageSmoothing"
        }, colorAttributes = {
          stroke: "strokeOpacity",
          fill: "fillOpacity"
        }, fSize = "font-size", cPath = "clip-path";
        fabric5.svgValidTagNamesRegEx = getSvgRegex(svgValidTagNames);
        fabric5.svgViewBoxElementsRegEx = getSvgRegex(svgViewBoxElements);
        fabric5.svgInvalidAncestorsRegEx = getSvgRegex(svgInvalidAncestors);
        fabric5.svgValidParentsRegEx = getSvgRegex(svgValidParents);
        fabric5.cssRules = {};
        fabric5.gradientDefs = {};
        fabric5.clipPaths = {};
        function normalizeAttr(attr) {
          if (attr in attributesMap) {
            return attributesMap[attr];
          }
          return attr;
        }
        function normalizeValue(attr, value, parentAttributes, fontSize2) {
          var isArray = Object.prototype.toString.call(value) === "[object Array]", parsed;
          if ((attr === "fill" || attr === "stroke") && value === "none") {
            value = "";
          } else if (attr === "strokeUniform") {
            return value === "non-scaling-stroke";
          } else if (attr === "strokeDashArray") {
            if (value === "none") {
              value = null;
            } else {
              value = value.replace(/,/g, " ").split(/\s+/).map(parseFloat);
            }
          } else if (attr === "transformMatrix") {
            if (parentAttributes && parentAttributes.transformMatrix) {
              value = multiplyTransformMatrices(parentAttributes.transformMatrix, fabric5.parseTransformAttribute(value));
            } else {
              value = fabric5.parseTransformAttribute(value);
            }
          } else if (attr === "visible") {
            value = value !== "none" && value !== "hidden";
            if (parentAttributes && parentAttributes.visible === false) {
              value = false;
            }
          } else if (attr === "opacity") {
            value = parseFloat(value);
            if (parentAttributes && typeof parentAttributes.opacity !== "undefined") {
              value *= parentAttributes.opacity;
            }
          } else if (attr === "textAnchor") {
            value = value === "start" ? "left" : value === "end" ? "right" : "center";
          } else if (attr === "charSpacing") {
            parsed = parseUnit(value, fontSize2) / fontSize2 * 1e3;
          } else if (attr === "paintFirst") {
            var fillIndex = value.indexOf("fill");
            var strokeIndex = value.indexOf("stroke");
            var value = "fill";
            if (fillIndex > -1 && strokeIndex > -1 && strokeIndex < fillIndex) {
              value = "stroke";
            } else if (fillIndex === -1 && strokeIndex > -1) {
              value = "stroke";
            }
          } else if (attr === "href" || attr === "xlink:href" || attr === "font") {
            return value;
          } else if (attr === "imageSmoothing") {
            return value === "optimizeQuality";
          } else {
            parsed = isArray ? value.map(parseUnit) : parseUnit(value, fontSize2);
          }
          return !isArray && isNaN(parsed) ? value : parsed;
        }
        function getSvgRegex(arr) {
          return new RegExp("^(" + arr.join("|") + ")\\b", "i");
        }
        function _setStrokeFillOpacity(attributes) {
          for (var attr in colorAttributes) {
            if (typeof attributes[colorAttributes[attr]] === "undefined" || attributes[attr] === "") {
              continue;
            }
            if (typeof attributes[attr] === "undefined") {
              if (!fabric5.Object.prototype[attr]) {
                continue;
              }
              attributes[attr] = fabric5.Object.prototype[attr];
            }
            if (attributes[attr].indexOf("url(") === 0) {
              continue;
            }
            var color2 = new fabric5.Color(attributes[attr]);
            attributes[attr] = color2.setAlpha(toFixed(color2.getAlpha() * attributes[colorAttributes[attr]], 2)).toRgba();
          }
          return attributes;
        }
        function _getMultipleNodes(doc, nodeNames) {
          var nodeName, nodeArray = [], nodeList, i, len;
          for (i = 0, len = nodeNames.length; i < len; i++) {
            nodeName = nodeNames[i];
            nodeList = doc.getElementsByTagName(nodeName);
            nodeArray = nodeArray.concat(Array.prototype.slice.call(nodeList));
          }
          return nodeArray;
        }
        fabric5.parseTransformAttribute = function() {
          function rotateMatrix(matrix2, args) {
            var cos = fabric5.util.cos(args[0]), sin = fabric5.util.sin(args[0]), x = 0, y = 0;
            if (args.length === 3) {
              x = args[1];
              y = args[2];
            }
            matrix2[0] = cos;
            matrix2[1] = sin;
            matrix2[2] = -sin;
            matrix2[3] = cos;
            matrix2[4] = x - (cos * x - sin * y);
            matrix2[5] = y - (sin * x + cos * y);
          }
          function scaleMatrix(matrix2, args) {
            var multiplierX = args[0], multiplierY = args.length === 2 ? args[1] : args[0];
            matrix2[0] = multiplierX;
            matrix2[3] = multiplierY;
          }
          function skewMatrix(matrix2, args, pos) {
            matrix2[pos] = Math.tan(fabric5.util.degreesToRadians(args[0]));
          }
          function translateMatrix(matrix2, args) {
            matrix2[4] = args[0];
            if (args.length === 2) {
              matrix2[5] = args[1];
            }
          }
          var iMatrix = fabric5.iMatrix, number = fabric5.reNum, commaWsp = fabric5.commaWsp, skewX = "(?:(skewX)\\s*\\(\\s*(" + number + ")\\s*\\))", skewY = "(?:(skewY)\\s*\\(\\s*(" + number + ")\\s*\\))", rotate = "(?:(rotate)\\s*\\(\\s*(" + number + ")(?:" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + "))?\\s*\\))", scale = "(?:(scale)\\s*\\(\\s*(" + number + ")(?:" + commaWsp + "(" + number + "))?\\s*\\))", translate = "(?:(translate)\\s*\\(\\s*(" + number + ")(?:" + commaWsp + "(" + number + "))?\\s*\\))", matrix = "(?:(matrix)\\s*\\(\\s*(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")" + commaWsp + "(" + number + ")\\s*\\))", transform2 = "(?:" + matrix + "|" + translate + "|" + scale + "|" + rotate + "|" + skewX + "|" + skewY + ")", transforms = "(?:" + transform2 + "(?:" + commaWsp + "*" + transform2 + ")*)", transformList = "^\\s*(?:" + transforms + "?)\\s*$", reTransformList = new RegExp(transformList), reTransform = new RegExp(transform2, "g");
          return function(attributeValue) {
            var matrix2 = iMatrix.concat(), matrices = [];
            if (!attributeValue || attributeValue && !reTransformList.test(attributeValue)) {
              return matrix2;
            }
            attributeValue.replace(reTransform, function(match2) {
              var m = new RegExp(transform2).exec(match2).filter(function(match3) {
                return !!match3;
              }), operation = m[1], args = m.slice(2).map(parseFloat);
              switch (operation) {
                case "translate":
                  translateMatrix(matrix2, args);
                  break;
                case "rotate":
                  args[0] = fabric5.util.degreesToRadians(args[0]);
                  rotateMatrix(matrix2, args);
                  break;
                case "scale":
                  scaleMatrix(matrix2, args);
                  break;
                case "skewX":
                  skewMatrix(matrix2, args, 2);
                  break;
                case "skewY":
                  skewMatrix(matrix2, args, 1);
                  break;
                case "matrix":
                  matrix2 = args;
                  break;
              }
              matrices.push(matrix2.concat());
              matrix2 = iMatrix.concat();
            });
            var combinedMatrix = matrices[0];
            while (matrices.length > 1) {
              matrices.shift();
              combinedMatrix = fabric5.util.multiplyTransformMatrices(combinedMatrix, matrices[0]);
            }
            return combinedMatrix;
          };
        }();
        function parseStyleString(style3, oStyle) {
          var attr, value;
          style3.replace(/;\s*$/, "").split(";").forEach(function(chunk) {
            var pair = chunk.split(":");
            attr = pair[0].trim().toLowerCase();
            value = pair[1].trim();
            oStyle[attr] = value;
          });
        }
        function parseStyleObject(style3, oStyle) {
          var attr, value;
          for (var prop in style3) {
            if (typeof style3[prop] === "undefined") {
              continue;
            }
            attr = prop.toLowerCase();
            value = style3[prop];
            oStyle[attr] = value;
          }
        }
        function getGlobalStylesForElement(element, svgUid) {
          var styles4 = {};
          for (var rule in fabric5.cssRules[svgUid]) {
            if (elementMatchesRule(element, rule.split(" "))) {
              for (var property in fabric5.cssRules[svgUid][rule]) {
                styles4[property] = fabric5.cssRules[svgUid][rule][property];
              }
            }
          }
          return styles4;
        }
        function elementMatchesRule(element, selectors) {
          var firstMatching, parentMatching = true;
          firstMatching = selectorMatches(element, selectors.pop());
          if (firstMatching && selectors.length) {
            parentMatching = doesSomeParentMatch(element, selectors);
          }
          return firstMatching && parentMatching && selectors.length === 0;
        }
        function doesSomeParentMatch(element, selectors) {
          var selector, parentMatching = true;
          while (element.parentNode && element.parentNode.nodeType === 1 && selectors.length) {
            if (parentMatching) {
              selector = selectors.pop();
            }
            element = element.parentNode;
            parentMatching = selectorMatches(element, selector);
          }
          return selectors.length === 0;
        }
        function selectorMatches(element, selector) {
          var nodeName = element.nodeName, classNames = element.getAttribute("class"), id = element.getAttribute("id"), matcher, i;
          matcher = new RegExp("^" + nodeName, "i");
          selector = selector.replace(matcher, "");
          if (id && selector.length) {
            matcher = new RegExp("#" + id + "(?![a-zA-Z\\-]+)", "i");
            selector = selector.replace(matcher, "");
          }
          if (classNames && selector.length) {
            classNames = classNames.split(" ");
            for (i = classNames.length; i--; ) {
              matcher = new RegExp("\\." + classNames[i] + "(?![a-zA-Z\\-]+)", "i");
              selector = selector.replace(matcher, "");
            }
          }
          return selector.length === 0;
        }
        function elementById(doc, id) {
          var el;
          doc.getElementById && (el = doc.getElementById(id));
          if (el) {
            return el;
          }
          var node2, i, len, nodelist = doc.getElementsByTagName("*");
          for (i = 0, len = nodelist.length; i < len; i++) {
            node2 = nodelist[i];
            if (id === node2.getAttribute("id")) {
              return node2;
            }
          }
        }
        function parseUseDirectives(doc) {
          var nodelist = _getMultipleNodes(doc, ["use", "svg:use"]), i = 0;
          while (nodelist.length && i < nodelist.length) {
            var el = nodelist[i], xlinkAttribute = el.getAttribute("xlink:href") || el.getAttribute("href");
            if (xlinkAttribute === null) {
              return;
            }
            var xlink = xlinkAttribute.substr(1), x = el.getAttribute("x") || 0, y = el.getAttribute("y") || 0, el2 = elementById(doc, xlink).cloneNode(true), currentTrans = (el2.getAttribute("transform") || "") + " translate(" + x + ", " + y + ")", parentNode, oldLength = nodelist.length, attr, j, attrs, len, namespace = fabric5.svgNS;
            applyViewboxTransform(el2);
            if (/^svg$/i.test(el2.nodeName)) {
              var el3 = el2.ownerDocument.createElementNS(namespace, "g");
              for (j = 0, attrs = el2.attributes, len = attrs.length; j < len; j++) {
                attr = attrs.item(j);
                el3.setAttributeNS(namespace, attr.nodeName, attr.nodeValue);
              }
              while (el2.firstChild) {
                el3.appendChild(el2.firstChild);
              }
              el2 = el3;
            }
            for (j = 0, attrs = el.attributes, len = attrs.length; j < len; j++) {
              attr = attrs.item(j);
              if (attr.nodeName === "x" || attr.nodeName === "y" || attr.nodeName === "xlink:href" || attr.nodeName === "href") {
                continue;
              }
              if (attr.nodeName === "transform") {
                currentTrans = attr.nodeValue + " " + currentTrans;
              } else {
                el2.setAttribute(attr.nodeName, attr.nodeValue);
              }
            }
            el2.setAttribute("transform", currentTrans);
            el2.setAttribute("instantiated_by_use", "1");
            el2.removeAttribute("id");
            parentNode = el.parentNode;
            parentNode.replaceChild(el2, el);
            if (nodelist.length === oldLength) {
              i++;
            }
          }
        }
        var reViewBoxAttrValue = new RegExp("^\\s*(" + fabric5.reNum + "+)\\s*,?\\s*(" + fabric5.reNum + "+)\\s*,?\\s*(" + fabric5.reNum + "+)\\s*,?\\s*(" + fabric5.reNum + "+)\\s*$");
        function applyViewboxTransform(element) {
          if (!fabric5.svgViewBoxElementsRegEx.test(element.nodeName)) {
            return {};
          }
          var viewBoxAttr = element.getAttribute("viewBox"), scaleX = 1, scaleY = 1, minX = 0, minY = 0, viewBoxWidth, viewBoxHeight, matrix, el, widthAttr = element.getAttribute("width"), heightAttr = element.getAttribute("height"), x = element.getAttribute("x") || 0, y = element.getAttribute("y") || 0, preserveAspectRatio = element.getAttribute("preserveAspectRatio") || "", missingViewBox = !viewBoxAttr || !(viewBoxAttr = viewBoxAttr.match(reViewBoxAttrValue)), missingDimAttr = !widthAttr || !heightAttr || widthAttr === "100%" || heightAttr === "100%", toBeParsed = missingViewBox && missingDimAttr, parsedDim = {}, translateMatrix = "", widthDiff = 0, heightDiff = 0;
          parsedDim.width = 0;
          parsedDim.height = 0;
          parsedDim.toBeParsed = toBeParsed;
          if (missingViewBox) {
            if ((x || y) && element.parentNode && element.parentNode.nodeName !== "#document") {
              translateMatrix = " translate(" + parseUnit(x) + " " + parseUnit(y) + ") ";
              matrix = (element.getAttribute("transform") || "") + translateMatrix;
              element.setAttribute("transform", matrix);
              element.removeAttribute("x");
              element.removeAttribute("y");
            }
          }
          if (toBeParsed) {
            return parsedDim;
          }
          if (missingViewBox) {
            parsedDim.width = parseUnit(widthAttr);
            parsedDim.height = parseUnit(heightAttr);
            return parsedDim;
          }
          minX = -parseFloat(viewBoxAttr[1]);
          minY = -parseFloat(viewBoxAttr[2]);
          viewBoxWidth = parseFloat(viewBoxAttr[3]);
          viewBoxHeight = parseFloat(viewBoxAttr[4]);
          parsedDim.minX = minX;
          parsedDim.minY = minY;
          parsedDim.viewBoxWidth = viewBoxWidth;
          parsedDim.viewBoxHeight = viewBoxHeight;
          if (!missingDimAttr) {
            parsedDim.width = parseUnit(widthAttr);
            parsedDim.height = parseUnit(heightAttr);
            scaleX = parsedDim.width / viewBoxWidth;
            scaleY = parsedDim.height / viewBoxHeight;
          } else {
            parsedDim.width = viewBoxWidth;
            parsedDim.height = viewBoxHeight;
          }
          preserveAspectRatio = fabric5.util.parsePreserveAspectRatioAttribute(preserveAspectRatio);
          if (preserveAspectRatio.alignX !== "none") {
            if (preserveAspectRatio.meetOrSlice === "meet") {
              scaleY = scaleX = scaleX > scaleY ? scaleY : scaleX;
            }
            if (preserveAspectRatio.meetOrSlice === "slice") {
              scaleY = scaleX = scaleX > scaleY ? scaleX : scaleY;
            }
            widthDiff = parsedDim.width - viewBoxWidth * scaleX;
            heightDiff = parsedDim.height - viewBoxHeight * scaleX;
            if (preserveAspectRatio.alignX === "Mid") {
              widthDiff /= 2;
            }
            if (preserveAspectRatio.alignY === "Mid") {
              heightDiff /= 2;
            }
            if (preserveAspectRatio.alignX === "Min") {
              widthDiff = 0;
            }
            if (preserveAspectRatio.alignY === "Min") {
              heightDiff = 0;
            }
          }
          if (scaleX === 1 && scaleY === 1 && minX === 0 && minY === 0 && x === 0 && y === 0) {
            return parsedDim;
          }
          if ((x || y) && element.parentNode.nodeName !== "#document") {
            translateMatrix = " translate(" + parseUnit(x) + " " + parseUnit(y) + ") ";
          }
          matrix = translateMatrix + " matrix(" + scaleX + " 0 0 " + scaleY + " " + (minX * scaleX + widthDiff) + " " + (minY * scaleY + heightDiff) + ") ";
          if (element.nodeName === "svg") {
            el = element.ownerDocument.createElementNS(fabric5.svgNS, "g");
            while (element.firstChild) {
              el.appendChild(element.firstChild);
            }
            element.appendChild(el);
          } else {
            el = element;
            el.removeAttribute("x");
            el.removeAttribute("y");
            matrix = el.getAttribute("transform") + matrix;
          }
          el.setAttribute("transform", matrix);
          return parsedDim;
        }
        function hasAncestorWithNodeName(element, nodeName) {
          while (element && (element = element.parentNode)) {
            if (element.nodeName && nodeName.test(element.nodeName.replace("svg:", "")) && !element.getAttribute("instantiated_by_use")) {
              return true;
            }
          }
          return false;
        }
        fabric5.parseSVGDocument = function(doc, callback, reviver, parsingOptions) {
          if (!doc) {
            return;
          }
          parseUseDirectives(doc);
          var svgUid = fabric5.Object.__uid++, i, len, options = applyViewboxTransform(doc), descendants = fabric5.util.toArray(doc.getElementsByTagName("*"));
          options.crossOrigin = parsingOptions && parsingOptions.crossOrigin;
          options.svgUid = svgUid;
          if (descendants.length === 0 && fabric5.isLikelyNode) {
            descendants = doc.selectNodes('//*[name(.)!="svg"]');
            var arr = [];
            for (i = 0, len = descendants.length; i < len; i++) {
              arr[i] = descendants[i];
            }
            descendants = arr;
          }
          var elements = descendants.filter(function(el) {
            applyViewboxTransform(el);
            return fabric5.svgValidTagNamesRegEx.test(el.nodeName.replace("svg:", "")) && !hasAncestorWithNodeName(el, fabric5.svgInvalidAncestorsRegEx);
          });
          if (!elements || elements && !elements.length) {
            callback && callback([], {});
            return;
          }
          var clipPaths = {};
          descendants.filter(function(el) {
            return el.nodeName.replace("svg:", "") === "clipPath";
          }).forEach(function(el) {
            var id = el.getAttribute("id");
            clipPaths[id] = fabric5.util.toArray(el.getElementsByTagName("*")).filter(function(el2) {
              return fabric5.svgValidTagNamesRegEx.test(el2.nodeName.replace("svg:", ""));
            });
          });
          fabric5.gradientDefs[svgUid] = fabric5.getGradientDefs(doc);
          fabric5.cssRules[svgUid] = fabric5.getCSSRules(doc);
          fabric5.clipPaths[svgUid] = clipPaths;
          fabric5.parseElements(elements, function(instances, elements2) {
            if (callback) {
              callback(instances, options, elements2, descendants);
              delete fabric5.gradientDefs[svgUid];
              delete fabric5.cssRules[svgUid];
              delete fabric5.clipPaths[svgUid];
            }
          }, clone(options), reviver, parsingOptions);
        };
        function recursivelyParseGradientsXlink(doc, gradient) {
          var gradientsAttrs = ["gradientTransform", "x1", "x2", "y1", "y2", "gradientUnits", "cx", "cy", "r", "fx", "fy"], xlinkAttr = "xlink:href", xLink = gradient.getAttribute(xlinkAttr).substr(1), referencedGradient = elementById(doc, xLink);
          if (referencedGradient && referencedGradient.getAttribute(xlinkAttr)) {
            recursivelyParseGradientsXlink(doc, referencedGradient);
          }
          gradientsAttrs.forEach(function(attr) {
            if (referencedGradient && !gradient.hasAttribute(attr) && referencedGradient.hasAttribute(attr)) {
              gradient.setAttribute(attr, referencedGradient.getAttribute(attr));
            }
          });
          if (!gradient.children.length) {
            var referenceClone = referencedGradient.cloneNode(true);
            while (referenceClone.firstChild) {
              gradient.appendChild(referenceClone.firstChild);
            }
          }
          gradient.removeAttribute(xlinkAttr);
        }
        var reFontDeclaration = new RegExp("(normal|italic)?\\s*(normal|small-caps)?\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\s*(" + fabric5.reNum + "(?:px|cm|mm|em|pt|pc|in)*)(?:\\/(normal|" + fabric5.reNum + "))?\\s+(.*)");
        extend(fabric5, {
          parseFontDeclaration: function(value, oStyle) {
            var match2 = value.match(reFontDeclaration);
            if (!match2) {
              return;
            }
            var fontStyle2 = match2[1], fontWeight2 = match2[3], fontSize2 = match2[4], lineHeight2 = match2[5], fontFamily2 = match2[6];
            if (fontStyle2) {
              oStyle.fontStyle = fontStyle2;
            }
            if (fontWeight2) {
              oStyle.fontWeight = isNaN(parseFloat(fontWeight2)) ? fontWeight2 : parseFloat(fontWeight2);
            }
            if (fontSize2) {
              oStyle.fontSize = parseUnit(fontSize2);
            }
            if (fontFamily2) {
              oStyle.fontFamily = fontFamily2;
            }
            if (lineHeight2) {
              oStyle.lineHeight = lineHeight2 === "normal" ? 1 : lineHeight2;
            }
          },
          getGradientDefs: function(doc) {
            var tagArray = [
              "linearGradient",
              "radialGradient",
              "svg:linearGradient",
              "svg:radialGradient"
            ], elList = _getMultipleNodes(doc, tagArray), el, j = 0, gradientDefs = {};
            j = elList.length;
            while (j--) {
              el = elList[j];
              if (el.getAttribute("xlink:href")) {
                recursivelyParseGradientsXlink(doc, el);
              }
              gradientDefs[el.getAttribute("id")] = el;
            }
            return gradientDefs;
          },
          parseAttributes: function(element, attributes, svgUid) {
            if (!element) {
              return;
            }
            var value, parentAttributes = {}, fontSize2, parentFontSize;
            if (typeof svgUid === "undefined") {
              svgUid = element.getAttribute("svgUid");
            }
            if (element.parentNode && fabric5.svgValidParentsRegEx.test(element.parentNode.nodeName)) {
              parentAttributes = fabric5.parseAttributes(element.parentNode, attributes, svgUid);
            }
            var ownAttributes = attributes.reduce(function(memo2, attr2) {
              value = element.getAttribute(attr2);
              if (value) {
                memo2[attr2] = value;
              }
              return memo2;
            }, {});
            var cssAttrs = extend(getGlobalStylesForElement(element, svgUid), fabric5.parseStyleAttribute(element));
            ownAttributes = extend(ownAttributes, cssAttrs);
            if (cssAttrs[cPath]) {
              element.setAttribute(cPath, cssAttrs[cPath]);
            }
            fontSize2 = parentFontSize = parentAttributes.fontSize || fabric5.Text.DEFAULT_SVG_FONT_SIZE;
            if (ownAttributes[fSize]) {
              ownAttributes[fSize] = fontSize2 = parseUnit(ownAttributes[fSize], parentFontSize);
            }
            var normalizedAttr, normalizedValue, normalizedStyle = {};
            for (var attr in ownAttributes) {
              normalizedAttr = normalizeAttr(attr);
              normalizedValue = normalizeValue(normalizedAttr, ownAttributes[attr], parentAttributes, fontSize2);
              normalizedStyle[normalizedAttr] = normalizedValue;
            }
            if (normalizedStyle && normalizedStyle.font) {
              fabric5.parseFontDeclaration(normalizedStyle.font, normalizedStyle);
            }
            var mergedAttrs = extend(parentAttributes, normalizedStyle);
            return fabric5.svgValidParentsRegEx.test(element.nodeName) ? mergedAttrs : _setStrokeFillOpacity(mergedAttrs);
          },
          parseElements: function(elements, callback, options, reviver, parsingOptions) {
            new fabric5.ElementsParser(elements, callback, options, reviver, parsingOptions).parse();
          },
          parseStyleAttribute: function(element) {
            var oStyle = {}, style3 = element.getAttribute("style");
            if (!style3) {
              return oStyle;
            }
            if (typeof style3 === "string") {
              parseStyleString(style3, oStyle);
            } else {
              parseStyleObject(style3, oStyle);
            }
            return oStyle;
          },
          parsePointsAttribute: function(points) {
            if (!points) {
              return null;
            }
            points = points.replace(/,/g, " ").trim();
            points = points.split(/\s+/);
            var parsedPoints = [], i, len;
            for (i = 0, len = points.length; i < len; i += 2) {
              parsedPoints.push({
                x: parseFloat(points[i]),
                y: parseFloat(points[i + 1])
              });
            }
            return parsedPoints;
          },
          getCSSRules: function(doc) {
            var styles4 = doc.getElementsByTagName("style"), i, len, allRules = {}, rules;
            for (i = 0, len = styles4.length; i < len; i++) {
              var styleContents = styles4[i].textContent;
              styleContents = styleContents.replace(/\/\*[\s\S]*?\*\//g, "");
              if (styleContents.trim() === "") {
                continue;
              }
              rules = styleContents.match(/[^{]*\{[\s\S]*?\}/g);
              rules = rules.map(function(rule) {
                return rule.trim();
              });
              rules.forEach(function(rule) {
                var match2 = rule.match(/([\s\S]*?)\s*\{([^}]*)\}/), ruleObj = {}, declaration2 = match2[2].trim(), propertyValuePairs = declaration2.replace(/;$/, "").split(/\s*;\s*/);
                for (i = 0, len = propertyValuePairs.length; i < len; i++) {
                  var pair = propertyValuePairs[i].split(/\s*:\s*/), property = pair[0], value = pair[1];
                  ruleObj[property] = value;
                }
                rule = match2[1];
                rule.split(",").forEach(function(_rule) {
                  _rule = _rule.replace(/^svg/i, "").trim();
                  if (_rule === "") {
                    return;
                  }
                  if (allRules[_rule]) {
                    fabric5.util.object.extend(allRules[_rule], ruleObj);
                  } else {
                    allRules[_rule] = fabric5.util.object.clone(ruleObj);
                  }
                });
              });
            }
            return allRules;
          },
          loadSVGFromURL: function(url, callback, reviver, options) {
            url = url.replace(/^\n\s*/, "").trim();
            new fabric5.util.request(url, {
              method: "get",
              onComplete
            });
            function onComplete(r) {
              var xml = r.responseXML;
              if (!xml || !xml.documentElement) {
                callback && callback(null);
                return false;
              }
              fabric5.parseSVGDocument(xml.documentElement, function(results, _options, elements, allElements) {
                callback && callback(results, _options, elements, allElements);
              }, reviver, options);
            }
          },
          loadSVGFromString: function(string, callback, reviver, options) {
            var parser = new fabric5.window.DOMParser(), doc = parser.parseFromString(string.trim(), "text/xml");
            fabric5.parseSVGDocument(doc.documentElement, function(results, _options, elements, allElements) {
              callback(results, _options, elements, allElements);
            }, reviver, options);
          }
        });
      })(typeof exports !== "undefined" ? exports : exports);
      fabric4.ElementsParser = function(elements, callback, options, reviver, parsingOptions, doc) {
        this.elements = elements;
        this.callback = callback;
        this.options = options;
        this.reviver = reviver;
        this.svgUid = options && options.svgUid || 0;
        this.parsingOptions = parsingOptions;
        this.regexUrl = /^url\(['"]?#([^'"]+)['"]?\)/g;
        this.doc = doc;
      };
      (function(proto) {
        proto.parse = function() {
          this.instances = new Array(this.elements.length);
          this.numElements = this.elements.length;
          this.createObjects();
        };
        proto.createObjects = function() {
          var _this = this;
          this.elements.forEach(function(element, i) {
            element.setAttribute("svgUid", _this.svgUid);
            _this.createObject(element, i);
          });
        };
        proto.findTag = function(el) {
          return fabric4[fabric4.util.string.capitalize(el.tagName.replace("svg:", ""))];
        };
        proto.createObject = function(el, index) {
          var klass = this.findTag(el);
          if (klass && klass.fromElement) {
            try {
              klass.fromElement(el, this.createCallback(index, el), this.options);
            } catch (err) {
              fabric4.log(err);
            }
          } else {
            this.checkIfDone();
          }
        };
        proto.createCallback = function(index, el) {
          var _this = this;
          return function(obj) {
            var _options;
            _this.resolveGradient(obj, el, "fill");
            _this.resolveGradient(obj, el, "stroke");
            if (obj instanceof fabric4.Image && obj._originalElement) {
              _options = obj.parsePreserveAspectRatioAttribute(el);
            }
            obj._removeTransformMatrix(_options);
            _this.resolveClipPath(obj, el);
            _this.reviver && _this.reviver(el, obj);
            _this.instances[index] = obj;
            _this.checkIfDone();
          };
        };
        proto.extractPropertyDefinition = function(obj, property, storage) {
          var value = obj[property], regex = this.regexUrl;
          if (!regex.test(value)) {
            return;
          }
          regex.lastIndex = 0;
          var id = regex.exec(value)[1];
          regex.lastIndex = 0;
          return fabric4[storage][this.svgUid][id];
        };
        proto.resolveGradient = function(obj, el, property) {
          var gradientDef = this.extractPropertyDefinition(obj, property, "gradientDefs");
          if (gradientDef) {
            var opacityAttr = el.getAttribute(property + "-opacity");
            var gradient = fabric4.Gradient.fromElement(gradientDef, obj, opacityAttr, this.options);
            obj.set(property, gradient);
          }
        };
        proto.createClipPathCallback = function(obj, container) {
          return function(_newObj) {
            _newObj._removeTransformMatrix();
            _newObj.fillRule = _newObj.clipRule;
            container.push(_newObj);
          };
        };
        proto.resolveClipPath = function(obj, usingElement) {
          var clipPath = this.extractPropertyDefinition(obj, "clipPath", "clipPaths"), element, klass, objTransformInv, container, gTransform, options;
          if (clipPath) {
            container = [];
            objTransformInv = fabric4.util.invertTransform(obj.calcTransformMatrix());
            var clipPathTag = clipPath[0].parentNode;
            var clipPathOwner = usingElement;
            while (clipPathOwner.parentNode && clipPathOwner.getAttribute("clip-path") !== obj.clipPath) {
              clipPathOwner = clipPathOwner.parentNode;
            }
            clipPathOwner.parentNode.appendChild(clipPathTag);
            for (var i = 0; i < clipPath.length; i++) {
              element = clipPath[i];
              klass = this.findTag(element);
              klass.fromElement(element, this.createClipPathCallback(obj, container), this.options);
            }
            if (container.length === 1) {
              clipPath = container[0];
            } else {
              clipPath = new fabric4.Group(container);
            }
            gTransform = fabric4.util.multiplyTransformMatrices(objTransformInv, clipPath.calcTransformMatrix());
            if (clipPath.clipPath) {
              this.resolveClipPath(clipPath, clipPathOwner);
            }
            var options = fabric4.util.qrDecompose(gTransform);
            clipPath.flipX = false;
            clipPath.flipY = false;
            clipPath.set("scaleX", options.scaleX);
            clipPath.set("scaleY", options.scaleY);
            clipPath.angle = options.angle;
            clipPath.skewX = options.skewX;
            clipPath.skewY = 0;
            clipPath.setPositionByOrigin({ x: options.translateX, y: options.translateY }, "center", "center");
            obj.clipPath = clipPath;
          } else {
            delete obj.clipPath;
          }
        };
        proto.checkIfDone = function() {
          if (--this.numElements === 0) {
            this.instances = this.instances.filter(function(el) {
              return el != null;
            });
            this.callback(this.instances, this.elements);
          }
        };
      })(fabric4.ElementsParser.prototype);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {});
        if (fabric5.Point) {
          fabric5.warn("fabric.Point is already defined");
          return;
        }
        fabric5.Point = Point;
        function Point(x, y) {
          this.x = x;
          this.y = y;
        }
        Point.prototype = {
          type: "point",
          constructor: Point,
          add: function(that) {
            return new Point(this.x + that.x, this.y + that.y);
          },
          addEquals: function(that) {
            this.x += that.x;
            this.y += that.y;
            return this;
          },
          scalarAdd: function(scalar) {
            return new Point(this.x + scalar, this.y + scalar);
          },
          scalarAddEquals: function(scalar) {
            this.x += scalar;
            this.y += scalar;
            return this;
          },
          subtract: function(that) {
            return new Point(this.x - that.x, this.y - that.y);
          },
          subtractEquals: function(that) {
            this.x -= that.x;
            this.y -= that.y;
            return this;
          },
          scalarSubtract: function(scalar) {
            return new Point(this.x - scalar, this.y - scalar);
          },
          scalarSubtractEquals: function(scalar) {
            this.x -= scalar;
            this.y -= scalar;
            return this;
          },
          multiply: function(scalar) {
            return new Point(this.x * scalar, this.y * scalar);
          },
          multiplyEquals: function(scalar) {
            this.x *= scalar;
            this.y *= scalar;
            return this;
          },
          divide: function(scalar) {
            return new Point(this.x / scalar, this.y / scalar);
          },
          divideEquals: function(scalar) {
            this.x /= scalar;
            this.y /= scalar;
            return this;
          },
          eq: function(that) {
            return this.x === that.x && this.y === that.y;
          },
          lt: function(that) {
            return this.x < that.x && this.y < that.y;
          },
          lte: function(that) {
            return this.x <= that.x && this.y <= that.y;
          },
          gt: function(that) {
            return this.x > that.x && this.y > that.y;
          },
          gte: function(that) {
            return this.x >= that.x && this.y >= that.y;
          },
          lerp: function(that, t) {
            if (typeof t === "undefined") {
              t = 0.5;
            }
            t = Math.max(Math.min(1, t), 0);
            return new Point(this.x + (that.x - this.x) * t, this.y + (that.y - this.y) * t);
          },
          distanceFrom: function(that) {
            var dx = this.x - that.x, dy = this.y - that.y;
            return Math.sqrt(dx * dx + dy * dy);
          },
          midPointFrom: function(that) {
            return this.lerp(that);
          },
          min: function(that) {
            return new Point(Math.min(this.x, that.x), Math.min(this.y, that.y));
          },
          max: function(that) {
            return new Point(Math.max(this.x, that.x), Math.max(this.y, that.y));
          },
          toString: function() {
            return this.x + "," + this.y;
          },
          setXY: function(x, y) {
            this.x = x;
            this.y = y;
            return this;
          },
          setX: function(x) {
            this.x = x;
            return this;
          },
          setY: function(y) {
            this.y = y;
            return this;
          },
          setFromPoint: function(that) {
            this.x = that.x;
            this.y = that.y;
            return this;
          },
          swap: function(that) {
            var x = this.x, y = this.y;
            this.x = that.x;
            this.y = that.y;
            that.x = x;
            that.y = y;
          },
          clone: function() {
            return new Point(this.x, this.y);
          }
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {});
        if (fabric5.Intersection) {
          fabric5.warn("fabric.Intersection is already defined");
          return;
        }
        function Intersection(status) {
          this.status = status;
          this.points = [];
        }
        fabric5.Intersection = Intersection;
        fabric5.Intersection.prototype = {
          constructor: Intersection,
          appendPoint: function(point) {
            this.points.push(point);
            return this;
          },
          appendPoints: function(points) {
            this.points = this.points.concat(points);
            return this;
          }
        };
        fabric5.Intersection.intersectLineLine = function(a1, a2, b1, b2) {
          var result, uaT = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x), ubT = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x), uB = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);
          if (uB !== 0) {
            var ua = uaT / uB, ub = ubT / uB;
            if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {
              result = new Intersection("Intersection");
              result.appendPoint(new fabric5.Point(a1.x + ua * (a2.x - a1.x), a1.y + ua * (a2.y - a1.y)));
            } else {
              result = new Intersection();
            }
          } else {
            if (uaT === 0 || ubT === 0) {
              result = new Intersection("Coincident");
            } else {
              result = new Intersection("Parallel");
            }
          }
          return result;
        };
        fabric5.Intersection.intersectLinePolygon = function(a1, a2, points) {
          var result = new Intersection(), length2 = points.length, b1, b2, inter, i;
          for (i = 0; i < length2; i++) {
            b1 = points[i];
            b2 = points[(i + 1) % length2];
            inter = Intersection.intersectLineLine(a1, a2, b1, b2);
            result.appendPoints(inter.points);
          }
          if (result.points.length > 0) {
            result.status = "Intersection";
          }
          return result;
        };
        fabric5.Intersection.intersectPolygonPolygon = function(points1, points2) {
          var result = new Intersection(), length2 = points1.length, i;
          for (i = 0; i < length2; i++) {
            var a1 = points1[i], a2 = points1[(i + 1) % length2], inter = Intersection.intersectLinePolygon(a1, a2, points2);
            result.appendPoints(inter.points);
          }
          if (result.points.length > 0) {
            result.status = "Intersection";
          }
          return result;
        };
        fabric5.Intersection.intersectPolygonRectangle = function(points, r1, r2) {
          var min = r1.min(r2), max = r1.max(r2), topRight = new fabric5.Point(max.x, min.y), bottomLeft = new fabric5.Point(min.x, max.y), inter1 = Intersection.intersectLinePolygon(min, topRight, points), inter2 = Intersection.intersectLinePolygon(topRight, max, points), inter3 = Intersection.intersectLinePolygon(max, bottomLeft, points), inter4 = Intersection.intersectLinePolygon(bottomLeft, min, points), result = new Intersection();
          result.appendPoints(inter1.points);
          result.appendPoints(inter2.points);
          result.appendPoints(inter3.points);
          result.appendPoints(inter4.points);
          if (result.points.length > 0) {
            result.status = "Intersection";
          }
          return result;
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {});
        if (fabric5.Color) {
          fabric5.warn("fabric.Color is already defined.");
          return;
        }
        function Color(color2) {
          if (!color2) {
            this.setSource([0, 0, 0, 1]);
          } else {
            this._tryParsingColor(color2);
          }
        }
        fabric5.Color = Color;
        fabric5.Color.prototype = {
          _tryParsingColor: function(color2) {
            var source;
            if (color2 in Color.colorNameMap) {
              color2 = Color.colorNameMap[color2];
            }
            if (color2 === "transparent") {
              source = [255, 255, 255, 0];
            }
            if (!source) {
              source = Color.sourceFromHex(color2);
            }
            if (!source) {
              source = Color.sourceFromRgb(color2);
            }
            if (!source) {
              source = Color.sourceFromHsl(color2);
            }
            if (!source) {
              source = [0, 0, 0, 1];
            }
            if (source) {
              this.setSource(source);
            }
          },
          _rgbToHsl: function(r, g, b) {
            r /= 255;
            g /= 255;
            b /= 255;
            var h, s, l, max = fabric5.util.array.max([r, g, b]), min = fabric5.util.array.min([r, g, b]);
            l = (max + min) / 2;
            if (max === min) {
              h = s = 0;
            } else {
              var d = max - min;
              s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
              switch (max) {
                case r:
                  h = (g - b) / d + (g < b ? 6 : 0);
                  break;
                case g:
                  h = (b - r) / d + 2;
                  break;
                case b:
                  h = (r - g) / d + 4;
                  break;
              }
              h /= 6;
            }
            return [
              Math.round(h * 360),
              Math.round(s * 100),
              Math.round(l * 100)
            ];
          },
          getSource: function() {
            return this._source;
          },
          setSource: function(source) {
            this._source = source;
          },
          toRgb: function() {
            var source = this.getSource();
            return "rgb(" + source[0] + "," + source[1] + "," + source[2] + ")";
          },
          toRgba: function() {
            var source = this.getSource();
            return "rgba(" + source[0] + "," + source[1] + "," + source[2] + "," + source[3] + ")";
          },
          toHsl: function() {
            var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);
            return "hsl(" + hsl[0] + "," + hsl[1] + "%," + hsl[2] + "%)";
          },
          toHsla: function() {
            var source = this.getSource(), hsl = this._rgbToHsl(source[0], source[1], source[2]);
            return "hsla(" + hsl[0] + "," + hsl[1] + "%," + hsl[2] + "%," + source[3] + ")";
          },
          toHex: function() {
            var source = this.getSource(), r, g, b;
            r = source[0].toString(16);
            r = r.length === 1 ? "0" + r : r;
            g = source[1].toString(16);
            g = g.length === 1 ? "0" + g : g;
            b = source[2].toString(16);
            b = b.length === 1 ? "0" + b : b;
            return r.toUpperCase() + g.toUpperCase() + b.toUpperCase();
          },
          toHexa: function() {
            var source = this.getSource(), a;
            a = Math.round(source[3] * 255);
            a = a.toString(16);
            a = a.length === 1 ? "0" + a : a;
            return this.toHex() + a.toUpperCase();
          },
          getAlpha: function() {
            return this.getSource()[3];
          },
          setAlpha: function(alpha2) {
            var source = this.getSource();
            source[3] = alpha2;
            this.setSource(source);
            return this;
          },
          toGrayscale: function() {
            var source = this.getSource(), average = parseInt((source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), 10), currentAlpha = source[3];
            this.setSource([average, average, average, currentAlpha]);
            return this;
          },
          toBlackWhite: function(threshold) {
            var source = this.getSource(), average = (source[0] * 0.3 + source[1] * 0.59 + source[2] * 0.11).toFixed(0), currentAlpha = source[3];
            threshold = threshold || 127;
            average = Number(average) < Number(threshold) ? 0 : 255;
            this.setSource([average, average, average, currentAlpha]);
            return this;
          },
          overlayWith: function(otherColor) {
            if (!(otherColor instanceof Color)) {
              otherColor = new Color(otherColor);
            }
            var result = [], alpha2 = this.getAlpha(), otherAlpha = 0.5, source = this.getSource(), otherSource = otherColor.getSource(), i;
            for (i = 0; i < 3; i++) {
              result.push(Math.round(source[i] * (1 - otherAlpha) + otherSource[i] * otherAlpha));
            }
            result[3] = alpha2;
            this.setSource(result);
            return this;
          }
        };
        fabric5.Color.reRGBa = /^rgba?\(\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*,\s*(\d{1,3}(?:\.\d+)?\%?)\s*(?:\s*,\s*((?:\d*\.?\d+)?)\s*)?\)$/i;
        fabric5.Color.reHSLa = /^hsla?\(\s*(\d{1,3})\s*,\s*(\d{1,3}\%)\s*,\s*(\d{1,3}\%)\s*(?:\s*,\s*(\d+(?:\.\d+)?)\s*)?\)$/i;
        fabric5.Color.reHex = /^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i;
        fabric5.Color.colorNameMap = {
          aliceblue: "#F0F8FF",
          antiquewhite: "#FAEBD7",
          aqua: "#00FFFF",
          aquamarine: "#7FFFD4",
          azure: "#F0FFFF",
          beige: "#F5F5DC",
          bisque: "#FFE4C4",
          black: "#000000",
          blanchedalmond: "#FFEBCD",
          blue: "#0000FF",
          blueviolet: "#8A2BE2",
          brown: "#A52A2A",
          burlywood: "#DEB887",
          cadetblue: "#5F9EA0",
          chartreuse: "#7FFF00",
          chocolate: "#D2691E",
          coral: "#FF7F50",
          cornflowerblue: "#6495ED",
          cornsilk: "#FFF8DC",
          crimson: "#DC143C",
          cyan: "#00FFFF",
          darkblue: "#00008B",
          darkcyan: "#008B8B",
          darkgoldenrod: "#B8860B",
          darkgray: "#A9A9A9",
          darkgrey: "#A9A9A9",
          darkgreen: "#006400",
          darkkhaki: "#BDB76B",
          darkmagenta: "#8B008B",
          darkolivegreen: "#556B2F",
          darkorange: "#FF8C00",
          darkorchid: "#9932CC",
          darkred: "#8B0000",
          darksalmon: "#E9967A",
          darkseagreen: "#8FBC8F",
          darkslateblue: "#483D8B",
          darkslategray: "#2F4F4F",
          darkslategrey: "#2F4F4F",
          darkturquoise: "#00CED1",
          darkviolet: "#9400D3",
          deeppink: "#FF1493",
          deepskyblue: "#00BFFF",
          dimgray: "#696969",
          dimgrey: "#696969",
          dodgerblue: "#1E90FF",
          firebrick: "#B22222",
          floralwhite: "#FFFAF0",
          forestgreen: "#228B22",
          fuchsia: "#FF00FF",
          gainsboro: "#DCDCDC",
          ghostwhite: "#F8F8FF",
          gold: "#FFD700",
          goldenrod: "#DAA520",
          gray: "#808080",
          grey: "#808080",
          green: "#008000",
          greenyellow: "#ADFF2F",
          honeydew: "#F0FFF0",
          hotpink: "#FF69B4",
          indianred: "#CD5C5C",
          indigo: "#4B0082",
          ivory: "#FFFFF0",
          khaki: "#F0E68C",
          lavender: "#E6E6FA",
          lavenderblush: "#FFF0F5",
          lawngreen: "#7CFC00",
          lemonchiffon: "#FFFACD",
          lightblue: "#ADD8E6",
          lightcoral: "#F08080",
          lightcyan: "#E0FFFF",
          lightgoldenrodyellow: "#FAFAD2",
          lightgray: "#D3D3D3",
          lightgrey: "#D3D3D3",
          lightgreen: "#90EE90",
          lightpink: "#FFB6C1",
          lightsalmon: "#FFA07A",
          lightseagreen: "#20B2AA",
          lightskyblue: "#87CEFA",
          lightslategray: "#778899",
          lightslategrey: "#778899",
          lightsteelblue: "#B0C4DE",
          lightyellow: "#FFFFE0",
          lime: "#00FF00",
          limegreen: "#32CD32",
          linen: "#FAF0E6",
          magenta: "#FF00FF",
          maroon: "#800000",
          mediumaquamarine: "#66CDAA",
          mediumblue: "#0000CD",
          mediumorchid: "#BA55D3",
          mediumpurple: "#9370DB",
          mediumseagreen: "#3CB371",
          mediumslateblue: "#7B68EE",
          mediumspringgreen: "#00FA9A",
          mediumturquoise: "#48D1CC",
          mediumvioletred: "#C71585",
          midnightblue: "#191970",
          mintcream: "#F5FFFA",
          mistyrose: "#FFE4E1",
          moccasin: "#FFE4B5",
          navajowhite: "#FFDEAD",
          navy: "#000080",
          oldlace: "#FDF5E6",
          olive: "#808000",
          olivedrab: "#6B8E23",
          orange: "#FFA500",
          orangered: "#FF4500",
          orchid: "#DA70D6",
          palegoldenrod: "#EEE8AA",
          palegreen: "#98FB98",
          paleturquoise: "#AFEEEE",
          palevioletred: "#DB7093",
          papayawhip: "#FFEFD5",
          peachpuff: "#FFDAB9",
          peru: "#CD853F",
          pink: "#FFC0CB",
          plum: "#DDA0DD",
          powderblue: "#B0E0E6",
          purple: "#800080",
          rebeccapurple: "#663399",
          red: "#FF0000",
          rosybrown: "#BC8F8F",
          royalblue: "#4169E1",
          saddlebrown: "#8B4513",
          salmon: "#FA8072",
          sandybrown: "#F4A460",
          seagreen: "#2E8B57",
          seashell: "#FFF5EE",
          sienna: "#A0522D",
          silver: "#C0C0C0",
          skyblue: "#87CEEB",
          slateblue: "#6A5ACD",
          slategray: "#708090",
          slategrey: "#708090",
          snow: "#FFFAFA",
          springgreen: "#00FF7F",
          steelblue: "#4682B4",
          tan: "#D2B48C",
          teal: "#008080",
          thistle: "#D8BFD8",
          tomato: "#FF6347",
          turquoise: "#40E0D0",
          violet: "#EE82EE",
          wheat: "#F5DEB3",
          white: "#FFFFFF",
          whitesmoke: "#F5F5F5",
          yellow: "#FFFF00",
          yellowgreen: "#9ACD32"
        };
        function hue2rgb(p, q, t) {
          if (t < 0) {
            t += 1;
          }
          if (t > 1) {
            t -= 1;
          }
          if (t < 1 / 6) {
            return p + (q - p) * 6 * t;
          }
          if (t < 1 / 2) {
            return q;
          }
          if (t < 2 / 3) {
            return p + (q - p) * (2 / 3 - t) * 6;
          }
          return p;
        }
        fabric5.Color.fromRgb = function(color2) {
          return Color.fromSource(Color.sourceFromRgb(color2));
        };
        fabric5.Color.sourceFromRgb = function(color2) {
          var match2 = color2.match(Color.reRGBa);
          if (match2) {
            var r = parseInt(match2[1], 10) / (/%$/.test(match2[1]) ? 100 : 1) * (/%$/.test(match2[1]) ? 255 : 1), g = parseInt(match2[2], 10) / (/%$/.test(match2[2]) ? 100 : 1) * (/%$/.test(match2[2]) ? 255 : 1), b = parseInt(match2[3], 10) / (/%$/.test(match2[3]) ? 100 : 1) * (/%$/.test(match2[3]) ? 255 : 1);
            return [
              parseInt(r, 10),
              parseInt(g, 10),
              parseInt(b, 10),
              match2[4] ? parseFloat(match2[4]) : 1
            ];
          }
        };
        fabric5.Color.fromRgba = Color.fromRgb;
        fabric5.Color.fromHsl = function(color2) {
          return Color.fromSource(Color.sourceFromHsl(color2));
        };
        fabric5.Color.sourceFromHsl = function(color2) {
          var match2 = color2.match(Color.reHSLa);
          if (!match2) {
            return;
          }
          var h = (parseFloat(match2[1]) % 360 + 360) % 360 / 360, s = parseFloat(match2[2]) / (/%$/.test(match2[2]) ? 100 : 1), l = parseFloat(match2[3]) / (/%$/.test(match2[3]) ? 100 : 1), r, g, b;
          if (s === 0) {
            r = g = b = l;
          } else {
            var q = l <= 0.5 ? l * (s + 1) : l + s - l * s, p = l * 2 - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
          }
          return [
            Math.round(r * 255),
            Math.round(g * 255),
            Math.round(b * 255),
            match2[4] ? parseFloat(match2[4]) : 1
          ];
        };
        fabric5.Color.fromHsla = Color.fromHsl;
        fabric5.Color.fromHex = function(color2) {
          return Color.fromSource(Color.sourceFromHex(color2));
        };
        fabric5.Color.sourceFromHex = function(color2) {
          if (color2.match(Color.reHex)) {
            var value = color2.slice(color2.indexOf("#") + 1), isShortNotation = value.length === 3 || value.length === 4, isRGBa = value.length === 8 || value.length === 4, r = isShortNotation ? value.charAt(0) + value.charAt(0) : value.substring(0, 2), g = isShortNotation ? value.charAt(1) + value.charAt(1) : value.substring(2, 4), b = isShortNotation ? value.charAt(2) + value.charAt(2) : value.substring(4, 6), a = isRGBa ? isShortNotation ? value.charAt(3) + value.charAt(3) : value.substring(6, 8) : "FF";
            return [
              parseInt(r, 16),
              parseInt(g, 16),
              parseInt(b, 16),
              parseFloat((parseInt(a, 16) / 255).toFixed(2))
            ];
          }
        };
        fabric5.Color.fromSource = function(source) {
          var oColor = new Color();
          oColor.setSource(source);
          return oColor;
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), scaleMap = ["e", "se", "s", "sw", "w", "nw", "n", "ne", "e"], skewMap = ["ns", "nesw", "ew", "nwse"], controls = {}, LEFT = "left", TOP = "top", RIGHT = "right", BOTTOM = "bottom", CENTER = "center", opposite = {
          top: BOTTOM,
          bottom: TOP,
          left: RIGHT,
          right: LEFT,
          center: CENTER
        }, radiansToDegrees = fabric5.util.radiansToDegrees, sign = Math.sign || function(x) {
          return (x > 0) - (x < 0) || +x;
        };
        function findCornerQuadrant(fabricObject, control) {
          var cornerAngle = fabricObject.angle + radiansToDegrees(Math.atan2(control.y, control.x)) + 360;
          return Math.round(cornerAngle % 360 / 45);
        }
        function fireEvent(eventName, options) {
          var target = options.transform.target, canvas = target.canvas, canvasOptions = fabric5.util.object.clone(options);
          canvasOptions.target = target;
          canvas && canvas.fire("object:" + eventName, canvasOptions);
          target.fire(eventName, options);
        }
        function scaleIsProportional(eventData, fabricObject) {
          var canvas = fabricObject.canvas, uniScaleKey = canvas.uniScaleKey, uniformIsToggled = eventData[uniScaleKey];
          return canvas.uniformScaling && !uniformIsToggled || !canvas.uniformScaling && uniformIsToggled;
        }
        function isTransformCentered(transform2) {
          return transform2.originX === CENTER && transform2.originY === CENTER;
        }
        function scalingIsForbidden(fabricObject, by, scaleProportionally) {
          var lockX = fabricObject.lockScalingX, lockY = fabricObject.lockScalingY;
          if (lockX && lockY) {
            return true;
          }
          if (!by && (lockX || lockY) && scaleProportionally) {
            return true;
          }
          if (lockX && by === "x") {
            return true;
          }
          if (lockY && by === "y") {
            return true;
          }
          return false;
        }
        function scaleCursorStyleHandler(eventData, control, fabricObject) {
          var notAllowed = "not-allowed", scaleProportionally = scaleIsProportional(eventData, fabricObject), by = "";
          if (control.x !== 0 && control.y === 0) {
            by = "x";
          } else if (control.x === 0 && control.y !== 0) {
            by = "y";
          }
          if (scalingIsForbidden(fabricObject, by, scaleProportionally)) {
            return notAllowed;
          }
          var n = findCornerQuadrant(fabricObject, control);
          return scaleMap[n] + "-resize";
        }
        function skewCursorStyleHandler(eventData, control, fabricObject) {
          var notAllowed = "not-allowed";
          if (control.x !== 0 && fabricObject.lockSkewingY) {
            return notAllowed;
          }
          if (control.y !== 0 && fabricObject.lockSkewingX) {
            return notAllowed;
          }
          var n = findCornerQuadrant(fabricObject, control) % 4;
          return skewMap[n] + "-resize";
        }
        function scaleSkewCursorStyleHandler(eventData, control, fabricObject) {
          if (eventData[fabricObject.canvas.altActionKey]) {
            return controls.skewCursorStyleHandler(eventData, control, fabricObject);
          }
          return controls.scaleCursorStyleHandler(eventData, control, fabricObject);
        }
        function scaleOrSkewActionName(eventData, control, fabricObject) {
          var isAlternative = eventData[fabricObject.canvas.altActionKey];
          if (control.x === 0) {
            return isAlternative ? "skewX" : "scaleY";
          }
          if (control.y === 0) {
            return isAlternative ? "skewY" : "scaleX";
          }
        }
        function rotationStyleHandler(eventData, control, fabricObject) {
          if (fabricObject.lockRotation) {
            return "not-allowed";
          }
          return control.cursorStyle;
        }
        function commonEventInfo(eventData, transform2, x, y) {
          return {
            e: eventData,
            transform: transform2,
            pointer: {
              x,
              y
            }
          };
        }
        function wrapWithFixedAnchor(actionHandler) {
          return function(eventData, transform2, x, y) {
            var target = transform2.target, centerPoint = target.getCenterPoint(), constraint = target.translateToOriginPoint(centerPoint, transform2.originX, transform2.originY), actionPerformed = actionHandler(eventData, transform2, x, y);
            target.setPositionByOrigin(constraint, transform2.originX, transform2.originY);
            return actionPerformed;
          };
        }
        function wrapWithFireEvent(eventName, actionHandler) {
          return function(eventData, transform2, x, y) {
            var actionPerformed = actionHandler(eventData, transform2, x, y);
            if (actionPerformed) {
              fireEvent(eventName, commonEventInfo(eventData, transform2, x, y));
            }
            return actionPerformed;
          };
        }
        function getLocalPoint(transform2, originX, originY, x, y) {
          var target = transform2.target, control = target.controls[transform2.corner], zoom = target.canvas.getZoom(), padding2 = target.padding / zoom, localPoint = target.toLocalPoint(new fabric5.Point(x, y), originX, originY);
          if (localPoint.x >= padding2) {
            localPoint.x -= padding2;
          }
          if (localPoint.x <= -padding2) {
            localPoint.x += padding2;
          }
          if (localPoint.y >= padding2) {
            localPoint.y -= padding2;
          }
          if (localPoint.y <= padding2) {
            localPoint.y += padding2;
          }
          localPoint.x -= control.offsetX;
          localPoint.y -= control.offsetY;
          return localPoint;
        }
        function targetHasOneFlip(target) {
          return target.flipX !== target.flipY;
        }
        function compensateScaleForSkew(target, oppositeSkew, scaleToCompensate, axis, reference) {
          if (target[oppositeSkew] !== 0) {
            var newDim = target._getTransformedDimensions()[axis];
            var newValue = reference / newDim * target[scaleToCompensate];
            target.set(scaleToCompensate, newValue);
          }
        }
        function skewObjectX(eventData, transform2, x, y) {
          var target = transform2.target, dimNoSkew = target._getTransformedDimensions(0, target.skewY), localPoint = getLocalPoint(transform2, transform2.originX, transform2.originY, x, y), totalSkewSize = Math.abs(localPoint.x * 2) - dimNoSkew.x, currentSkew = target.skewX, newSkew;
          if (totalSkewSize < 2) {
            newSkew = 0;
          } else {
            newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleX, dimNoSkew.y / target.scaleY));
            if (transform2.originX === LEFT && transform2.originY === BOTTOM) {
              newSkew = -newSkew;
            }
            if (transform2.originX === RIGHT && transform2.originY === TOP) {
              newSkew = -newSkew;
            }
            if (targetHasOneFlip(target)) {
              newSkew = -newSkew;
            }
          }
          var hasSkewed = currentSkew !== newSkew;
          if (hasSkewed) {
            var dimBeforeSkewing = target._getTransformedDimensions().y;
            target.set("skewX", newSkew);
            compensateScaleForSkew(target, "skewY", "scaleY", "y", dimBeforeSkewing);
          }
          return hasSkewed;
        }
        function skewObjectY(eventData, transform2, x, y) {
          var target = transform2.target, dimNoSkew = target._getTransformedDimensions(target.skewX, 0), localPoint = getLocalPoint(transform2, transform2.originX, transform2.originY, x, y), totalSkewSize = Math.abs(localPoint.y * 2) - dimNoSkew.y, currentSkew = target.skewY, newSkew;
          if (totalSkewSize < 2) {
            newSkew = 0;
          } else {
            newSkew = radiansToDegrees(Math.atan2(totalSkewSize / target.scaleY, dimNoSkew.x / target.scaleX));
            if (transform2.originX === LEFT && transform2.originY === BOTTOM) {
              newSkew = -newSkew;
            }
            if (transform2.originX === RIGHT && transform2.originY === TOP) {
              newSkew = -newSkew;
            }
            if (targetHasOneFlip(target)) {
              newSkew = -newSkew;
            }
          }
          var hasSkewed = currentSkew !== newSkew;
          if (hasSkewed) {
            var dimBeforeSkewing = target._getTransformedDimensions().x;
            target.set("skewY", newSkew);
            compensateScaleForSkew(target, "skewX", "scaleX", "x", dimBeforeSkewing);
          }
          return hasSkewed;
        }
        function skewHandlerX(eventData, transform2, x, y) {
          var target = transform2.target, currentSkew = target.skewX, originX, originY = transform2.originY;
          if (target.lockSkewingX) {
            return false;
          }
          if (currentSkew === 0) {
            var localPointFromCenter = getLocalPoint(transform2, CENTER, CENTER, x, y);
            if (localPointFromCenter.x > 0) {
              originX = LEFT;
            } else {
              originX = RIGHT;
            }
          } else {
            if (currentSkew > 0) {
              originX = originY === TOP ? LEFT : RIGHT;
            }
            if (currentSkew < 0) {
              originX = originY === TOP ? RIGHT : LEFT;
            }
            if (targetHasOneFlip(target)) {
              originX = originX === LEFT ? RIGHT : LEFT;
            }
          }
          transform2.originX = originX;
          var finalHandler = wrapWithFireEvent("skewing", wrapWithFixedAnchor(skewObjectX));
          return finalHandler(eventData, transform2, x, y);
        }
        function skewHandlerY(eventData, transform2, x, y) {
          var target = transform2.target, currentSkew = target.skewY, originY, originX = transform2.originX;
          if (target.lockSkewingY) {
            return false;
          }
          if (currentSkew === 0) {
            var localPointFromCenter = getLocalPoint(transform2, CENTER, CENTER, x, y);
            if (localPointFromCenter.y > 0) {
              originY = TOP;
            } else {
              originY = BOTTOM;
            }
          } else {
            if (currentSkew > 0) {
              originY = originX === LEFT ? TOP : BOTTOM;
            }
            if (currentSkew < 0) {
              originY = originX === LEFT ? BOTTOM : TOP;
            }
            if (targetHasOneFlip(target)) {
              originY = originY === TOP ? BOTTOM : TOP;
            }
          }
          transform2.originY = originY;
          var finalHandler = wrapWithFireEvent("skewing", wrapWithFixedAnchor(skewObjectY));
          return finalHandler(eventData, transform2, x, y);
        }
        function rotationWithSnapping(eventData, transform2, x, y) {
          var t = transform2, target = t.target, pivotPoint = target.translateToOriginPoint(target.getCenterPoint(), t.originX, t.originY);
          if (target.lockRotation) {
            return false;
          }
          var lastAngle = Math.atan2(t.ey - pivotPoint.y, t.ex - pivotPoint.x), curAngle = Math.atan2(y - pivotPoint.y, x - pivotPoint.x), angle = radiansToDegrees(curAngle - lastAngle + t.theta), hasRotated = true;
          if (target.snapAngle > 0) {
            var snapAngle = target.snapAngle, snapThreshold = target.snapThreshold || snapAngle, rightAngleLocked = Math.ceil(angle / snapAngle) * snapAngle, leftAngleLocked = Math.floor(angle / snapAngle) * snapAngle;
            if (Math.abs(angle - leftAngleLocked) < snapThreshold) {
              angle = leftAngleLocked;
            } else if (Math.abs(angle - rightAngleLocked) < snapThreshold) {
              angle = rightAngleLocked;
            }
          }
          if (angle < 0) {
            angle = 360 + angle;
          }
          angle %= 360;
          hasRotated = target.angle !== angle;
          target.angle = angle;
          return hasRotated;
        }
        function scaleObject(eventData, transform2, x, y, options) {
          options = options || {};
          var target = transform2.target, lockScalingX = target.lockScalingX, lockScalingY = target.lockScalingY, by = options.by, newPoint, scaleX, scaleY, dim, scaleProportionally = scaleIsProportional(eventData, target), forbidScaling = scalingIsForbidden(target, by, scaleProportionally), signX, signY, gestureScale = transform2.gestureScale;
          if (forbidScaling) {
            return false;
          }
          if (gestureScale) {
            scaleX = transform2.scaleX * gestureScale;
            scaleY = transform2.scaleY * gestureScale;
          } else {
            newPoint = getLocalPoint(transform2, transform2.originX, transform2.originY, x, y);
            signX = by !== "y" ? sign(newPoint.x) : 1;
            signY = by !== "x" ? sign(newPoint.y) : 1;
            if (!transform2.signX) {
              transform2.signX = signX;
            }
            if (!transform2.signY) {
              transform2.signY = signY;
            }
            if (target.lockScalingFlip && (transform2.signX !== signX || transform2.signY !== signY)) {
              return false;
            }
            dim = target._getTransformedDimensions();
            if (scaleProportionally && !by) {
              var distance = Math.abs(newPoint.x) + Math.abs(newPoint.y), original = transform2.original, originalDistance = Math.abs(dim.x * original.scaleX / target.scaleX) + Math.abs(dim.y * original.scaleY / target.scaleY), scale = distance / originalDistance;
              scaleX = original.scaleX * scale;
              scaleY = original.scaleY * scale;
            } else {
              scaleX = Math.abs(newPoint.x * target.scaleX / dim.x);
              scaleY = Math.abs(newPoint.y * target.scaleY / dim.y);
            }
            if (isTransformCentered(transform2)) {
              scaleX *= 2;
              scaleY *= 2;
            }
            if (transform2.signX !== signX && by !== "y") {
              transform2.originX = opposite[transform2.originX];
              scaleX *= -1;
              transform2.signX = signX;
            }
            if (transform2.signY !== signY && by !== "x") {
              transform2.originY = opposite[transform2.originY];
              scaleY *= -1;
              transform2.signY = signY;
            }
          }
          var oldScaleX = target.scaleX, oldScaleY = target.scaleY;
          if (!by) {
            !lockScalingX && target.set("scaleX", scaleX);
            !lockScalingY && target.set("scaleY", scaleY);
          } else {
            by === "x" && target.set("scaleX", scaleX);
            by === "y" && target.set("scaleY", scaleY);
          }
          return oldScaleX !== target.scaleX || oldScaleY !== target.scaleY;
        }
        function scaleObjectFromCorner(eventData, transform2, x, y) {
          return scaleObject(eventData, transform2, x, y);
        }
        function scaleObjectX(eventData, transform2, x, y) {
          return scaleObject(eventData, transform2, x, y, { by: "x" });
        }
        function scaleObjectY(eventData, transform2, x, y) {
          return scaleObject(eventData, transform2, x, y, { by: "y" });
        }
        function scalingYOrSkewingX(eventData, transform2, x, y) {
          if (eventData[transform2.target.canvas.altActionKey]) {
            return controls.skewHandlerX(eventData, transform2, x, y);
          }
          return controls.scalingY(eventData, transform2, x, y);
        }
        function scalingXOrSkewingY(eventData, transform2, x, y) {
          if (eventData[transform2.target.canvas.altActionKey]) {
            return controls.skewHandlerY(eventData, transform2, x, y);
          }
          return controls.scalingX(eventData, transform2, x, y);
        }
        function changeWidth(eventData, transform2, x, y) {
          var target = transform2.target, localPoint = getLocalPoint(transform2, transform2.originX, transform2.originY, x, y), strokePadding = target.strokeWidth / (target.strokeUniform ? target.scaleX : 1), multiplier = isTransformCentered(transform2) ? 2 : 1, oldWidth = target.width, newWidth = Math.abs(localPoint.x * multiplier / target.scaleX) - strokePadding;
          target.set("width", Math.max(newWidth, 0));
          return oldWidth !== newWidth;
        }
        function dragHandler(eventData, transform2, x, y) {
          var target = transform2.target, newLeft = x - transform2.offsetX, newTop = y - transform2.offsetY, moveX = !target.get("lockMovementX") && target.left !== newLeft, moveY = !target.get("lockMovementY") && target.top !== newTop;
          moveX && target.set("left", newLeft);
          moveY && target.set("top", newTop);
          if (moveX || moveY) {
            fireEvent("moving", commonEventInfo(eventData, transform2, x, y));
          }
          return moveX || moveY;
        }
        controls.scaleCursorStyleHandler = scaleCursorStyleHandler;
        controls.skewCursorStyleHandler = skewCursorStyleHandler;
        controls.scaleSkewCursorStyleHandler = scaleSkewCursorStyleHandler;
        controls.rotationWithSnapping = wrapWithFireEvent("rotating", wrapWithFixedAnchor(rotationWithSnapping));
        controls.scalingEqually = wrapWithFireEvent("scaling", wrapWithFixedAnchor(scaleObjectFromCorner));
        controls.scalingX = wrapWithFireEvent("scaling", wrapWithFixedAnchor(scaleObjectX));
        controls.scalingY = wrapWithFireEvent("scaling", wrapWithFixedAnchor(scaleObjectY));
        controls.scalingYOrSkewingX = scalingYOrSkewingX;
        controls.scalingXOrSkewingY = scalingXOrSkewingY;
        controls.changeWidth = wrapWithFireEvent("resizing", wrapWithFixedAnchor(changeWidth));
        controls.skewHandlerX = skewHandlerX;
        controls.skewHandlerY = skewHandlerY;
        controls.dragHandler = dragHandler;
        controls.scaleOrSkewActionName = scaleOrSkewActionName;
        controls.rotationStyleHandler = rotationStyleHandler;
        controls.fireEvent = fireEvent;
        controls.wrapWithFixedAnchor = wrapWithFixedAnchor;
        controls.wrapWithFireEvent = wrapWithFireEvent;
        controls.getLocalPoint = getLocalPoint;
        fabric5.controlsUtils = controls;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), degreesToRadians = fabric5.util.degreesToRadians, controls = fabric5.controlsUtils;
        function renderCircleControl(ctx, left2, top2, styleOverride, fabricObject) {
          styleOverride = styleOverride || {};
          var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize, ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== "undefined" ? styleOverride.transparentCorners : fabricObject.transparentCorners, methodName = transparentCorners ? "stroke" : "fill", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor), myLeft = left2, myTop = top2, size;
          ctx.save();
          ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;
          ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;
          if (xSize > ySize) {
            size = xSize;
            ctx.scale(1, ySize / xSize);
            myTop = top2 * xSize / ySize;
          } else if (ySize > xSize) {
            size = ySize;
            ctx.scale(xSize / ySize, 1);
            myLeft = left2 * ySize / xSize;
          } else {
            size = xSize;
          }
          ctx.lineWidth = 1;
          ctx.beginPath();
          ctx.arc(myLeft, myTop, size / 2, 0, 2 * Math.PI, false);
          ctx[methodName]();
          if (stroke) {
            ctx.stroke();
          }
          ctx.restore();
        }
        function renderSquareControl(ctx, left2, top2, styleOverride, fabricObject) {
          styleOverride = styleOverride || {};
          var xSize = this.sizeX || styleOverride.cornerSize || fabricObject.cornerSize, ySize = this.sizeY || styleOverride.cornerSize || fabricObject.cornerSize, transparentCorners = typeof styleOverride.transparentCorners !== "undefined" ? styleOverride.transparentCorners : fabricObject.transparentCorners, methodName = transparentCorners ? "stroke" : "fill", stroke = !transparentCorners && (styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor), xSizeBy2 = xSize / 2, ySizeBy2 = ySize / 2;
          ctx.save();
          ctx.fillStyle = styleOverride.cornerColor || fabricObject.cornerColor;
          ctx.strokeStyle = styleOverride.cornerStrokeColor || fabricObject.cornerStrokeColor;
          ctx.lineWidth = 1;
          ctx.translate(left2, top2);
          ctx.rotate(degreesToRadians(fabricObject.angle));
          ctx[methodName + "Rect"](-xSizeBy2, -ySizeBy2, xSize, ySize);
          if (stroke) {
            ctx.strokeRect(-xSizeBy2, -ySizeBy2, xSize, ySize);
          }
          ctx.restore();
        }
        controls.renderCircleControl = renderCircleControl;
        controls.renderSquareControl = renderSquareControl;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {});
        function Control(options) {
          for (var i in options) {
            this[i] = options[i];
          }
        }
        fabric5.Control = Control;
        fabric5.Control.prototype = {
          visible: true,
          actionName: "scale",
          angle: 0,
          x: 0,
          y: 0,
          offsetX: 0,
          offsetY: 0,
          sizeX: null,
          sizeY: null,
          touchSizeX: null,
          touchSizeY: null,
          cursorStyle: "crosshair",
          withConnection: false,
          actionHandler: function() {
          },
          mouseDownHandler: function() {
          },
          mouseUpHandler: function() {
          },
          getActionHandler: function() {
            return this.actionHandler;
          },
          getMouseDownHandler: function() {
            return this.mouseDownHandler;
          },
          getMouseUpHandler: function() {
            return this.mouseUpHandler;
          },
          cursorStyleHandler: function(eventData, control) {
            return control.cursorStyle;
          },
          getActionName: function(eventData, control) {
            return control.actionName;
          },
          getVisibility: function(fabricObject, controlKey) {
            var objectVisibility = fabricObject._controlsVisibility;
            if (objectVisibility && typeof objectVisibility[controlKey] !== "undefined") {
              return objectVisibility[controlKey];
            }
            return this.visible;
          },
          setVisibility: function(visibility2) {
            this.visible = visibility2;
          },
          positionHandler: function(dim, finalMatrix) {
            var point = fabric5.util.transformPoint({
              x: this.x * dim.x + this.offsetX,
              y: this.y * dim.y + this.offsetY
            }, finalMatrix);
            return point;
          },
          calcCornerCoords: function(objectAngle, objectCornerSize, centerX, centerY, isTouch) {
            var cosHalfOffset, sinHalfOffset, cosHalfOffsetComp, sinHalfOffsetComp, xSize = isTouch ? this.touchSizeX : this.sizeX, ySize = isTouch ? this.touchSizeY : this.sizeY;
            if (xSize && ySize && xSize !== ySize) {
              var controlTriangleAngle = Math.atan2(ySize, xSize);
              var cornerHypotenuse = Math.sqrt(xSize * xSize + ySize * ySize) / 2;
              var newTheta = controlTriangleAngle - fabric5.util.degreesToRadians(objectAngle);
              var newThetaComp = Math.PI / 2 - controlTriangleAngle - fabric5.util.degreesToRadians(objectAngle);
              cosHalfOffset = cornerHypotenuse * fabric5.util.cos(newTheta);
              sinHalfOffset = cornerHypotenuse * fabric5.util.sin(newTheta);
              cosHalfOffsetComp = cornerHypotenuse * fabric5.util.cos(newThetaComp);
              sinHalfOffsetComp = cornerHypotenuse * fabric5.util.sin(newThetaComp);
            } else {
              var cornerSize = xSize && ySize ? xSize : objectCornerSize;
              cornerHypotenuse = cornerSize * 0.7071067812;
              var newTheta = fabric5.util.degreesToRadians(45 - objectAngle);
              cosHalfOffset = cosHalfOffsetComp = cornerHypotenuse * fabric5.util.cos(newTheta);
              sinHalfOffset = sinHalfOffsetComp = cornerHypotenuse * fabric5.util.sin(newTheta);
            }
            return {
              tl: {
                x: centerX - sinHalfOffsetComp,
                y: centerY - cosHalfOffsetComp
              },
              tr: {
                x: centerX + cosHalfOffset,
                y: centerY - sinHalfOffset
              },
              bl: {
                x: centerX - cosHalfOffset,
                y: centerY + sinHalfOffset
              },
              br: {
                x: centerX + sinHalfOffsetComp,
                y: centerY + cosHalfOffsetComp
              }
            };
          },
          render: function(ctx, left2, top2, styleOverride, fabricObject) {
            styleOverride = styleOverride || {};
            switch (styleOverride.cornerStyle || fabricObject.cornerStyle) {
              case "circle":
                fabric5.controlsUtils.renderCircleControl.call(this, ctx, left2, top2, styleOverride, fabricObject);
                break;
              default:
                fabric5.controlsUtils.renderSquareControl.call(this, ctx, left2, top2, styleOverride, fabricObject);
            }
          }
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function() {
        function getColorStop(el, multiplier) {
          var style3 = el.getAttribute("style"), offset = el.getAttribute("offset") || 0, color2, colorAlpha, opacity, i;
          offset = parseFloat(offset) / (/%$/.test(offset) ? 100 : 1);
          offset = offset < 0 ? 0 : offset > 1 ? 1 : offset;
          if (style3) {
            var keyValuePairs = style3.split(/\s*;\s*/);
            if (keyValuePairs[keyValuePairs.length - 1] === "") {
              keyValuePairs.pop();
            }
            for (i = keyValuePairs.length; i--; ) {
              var split = keyValuePairs[i].split(/\s*:\s*/), key = split[0].trim(), value = split[1].trim();
              if (key === "stop-color") {
                color2 = value;
              } else if (key === "stop-opacity") {
                opacity = value;
              }
            }
          }
          if (!color2) {
            color2 = el.getAttribute("stop-color") || "rgb(0,0,0)";
          }
          if (!opacity) {
            opacity = el.getAttribute("stop-opacity");
          }
          color2 = new fabric4.Color(color2);
          colorAlpha = color2.getAlpha();
          opacity = isNaN(parseFloat(opacity)) ? 1 : parseFloat(opacity);
          opacity *= colorAlpha * multiplier;
          return {
            offset,
            color: color2.toRgb(),
            opacity
          };
        }
        function getLinearCoords(el) {
          return {
            x1: el.getAttribute("x1") || 0,
            y1: el.getAttribute("y1") || 0,
            x2: el.getAttribute("x2") || "100%",
            y2: el.getAttribute("y2") || 0
          };
        }
        function getRadialCoords(el) {
          return {
            x1: el.getAttribute("fx") || el.getAttribute("cx") || "50%",
            y1: el.getAttribute("fy") || el.getAttribute("cy") || "50%",
            r1: 0,
            x2: el.getAttribute("cx") || "50%",
            y2: el.getAttribute("cy") || "50%",
            r2: el.getAttribute("r") || "50%"
          };
        }
        var clone = fabric4.util.object.clone;
        fabric4.Gradient = fabric4.util.createClass({
          offsetX: 0,
          offsetY: 0,
          gradientTransform: null,
          gradientUnits: "pixels",
          type: "linear",
          initialize: function(options) {
            options || (options = {});
            options.coords || (options.coords = {});
            var coords, _this = this;
            Object.keys(options).forEach(function(option) {
              _this[option] = options[option];
            });
            if (this.id) {
              this.id += "_" + fabric4.Object.__uid++;
            } else {
              this.id = fabric4.Object.__uid++;
            }
            coords = {
              x1: options.coords.x1 || 0,
              y1: options.coords.y1 || 0,
              x2: options.coords.x2 || 0,
              y2: options.coords.y2 || 0
            };
            if (this.type === "radial") {
              coords.r1 = options.coords.r1 || 0;
              coords.r2 = options.coords.r2 || 0;
            }
            this.coords = coords;
            this.colorStops = options.colorStops.slice();
          },
          addColorStop: function(colorStops) {
            for (var position3 in colorStops) {
              var color2 = new fabric4.Color(colorStops[position3]);
              this.colorStops.push({
                offset: parseFloat(position3),
                color: color2.toRgb(),
                opacity: color2.getAlpha()
              });
            }
            return this;
          },
          toObject: function(propertiesToInclude) {
            var object = {
              type: this.type,
              coords: this.coords,
              colorStops: this.colorStops,
              offsetX: this.offsetX,
              offsetY: this.offsetY,
              gradientUnits: this.gradientUnits,
              gradientTransform: this.gradientTransform ? this.gradientTransform.concat() : this.gradientTransform
            };
            fabric4.util.populateWithProperties(this, object, propertiesToInclude);
            return object;
          },
          toSVG: function(object, options) {
            var coords = clone(this.coords, true), i, len, options = options || {}, markup, commonAttributes, colorStops = clone(this.colorStops, true), needsSwap = coords.r1 > coords.r2, transform2 = this.gradientTransform ? this.gradientTransform.concat() : fabric4.iMatrix.concat(), offsetX = -this.offsetX, offsetY = -this.offsetY, withViewport = !!options.additionalTransform, gradientUnits = this.gradientUnits === "pixels" ? "userSpaceOnUse" : "objectBoundingBox";
            colorStops.sort(function(a, b) {
              return a.offset - b.offset;
            });
            if (gradientUnits === "objectBoundingBox") {
              offsetX /= object.width;
              offsetY /= object.height;
            } else {
              offsetX += object.width / 2;
              offsetY += object.height / 2;
            }
            if (object.type === "path" && this.gradientUnits !== "percentage") {
              offsetX -= object.pathOffset.x;
              offsetY -= object.pathOffset.y;
            }
            transform2[4] -= offsetX;
            transform2[5] -= offsetY;
            commonAttributes = 'id="SVGID_' + this.id + '" gradientUnits="' + gradientUnits + '"';
            commonAttributes += ' gradientTransform="' + (withViewport ? options.additionalTransform + " " : "") + fabric4.util.matrixToSVG(transform2) + '" ';
            if (this.type === "linear") {
              markup = [
                "<linearGradient ",
                commonAttributes,
                ' x1="',
                coords.x1,
                '" y1="',
                coords.y1,
                '" x2="',
                coords.x2,
                '" y2="',
                coords.y2,
                '">\n'
              ];
            } else if (this.type === "radial") {
              markup = [
                "<radialGradient ",
                commonAttributes,
                ' cx="',
                needsSwap ? coords.x1 : coords.x2,
                '" cy="',
                needsSwap ? coords.y1 : coords.y2,
                '" r="',
                needsSwap ? coords.r1 : coords.r2,
                '" fx="',
                needsSwap ? coords.x2 : coords.x1,
                '" fy="',
                needsSwap ? coords.y2 : coords.y1,
                '">\n'
              ];
            }
            if (this.type === "radial") {
              if (needsSwap) {
                colorStops = colorStops.concat();
                colorStops.reverse();
                for (i = 0, len = colorStops.length; i < len; i++) {
                  colorStops[i].offset = 1 - colorStops[i].offset;
                }
              }
              var minRadius = Math.min(coords.r1, coords.r2);
              if (minRadius > 0) {
                var maxRadius = Math.max(coords.r1, coords.r2), percentageShift = minRadius / maxRadius;
                for (i = 0, len = colorStops.length; i < len; i++) {
                  colorStops[i].offset += percentageShift * (1 - colorStops[i].offset);
                }
              }
            }
            for (i = 0, len = colorStops.length; i < len; i++) {
              var colorStop = colorStops[i];
              markup.push("<stop ", 'offset="', colorStop.offset * 100 + "%", '" style="stop-color:', colorStop.color, typeof colorStop.opacity !== "undefined" ? ";stop-opacity: " + colorStop.opacity : ";", '"/>\n');
            }
            markup.push(this.type === "linear" ? "</linearGradient>\n" : "</radialGradient>\n");
            return markup.join("");
          },
          toLive: function(ctx) {
            var gradient, coords = fabric4.util.object.clone(this.coords), i, len;
            if (!this.type) {
              return;
            }
            if (this.type === "linear") {
              gradient = ctx.createLinearGradient(coords.x1, coords.y1, coords.x2, coords.y2);
            } else if (this.type === "radial") {
              gradient = ctx.createRadialGradient(coords.x1, coords.y1, coords.r1, coords.x2, coords.y2, coords.r2);
            }
            for (i = 0, len = this.colorStops.length; i < len; i++) {
              var color2 = this.colorStops[i].color, opacity = this.colorStops[i].opacity, offset = this.colorStops[i].offset;
              if (typeof opacity !== "undefined") {
                color2 = new fabric4.Color(color2).setAlpha(opacity).toRgba();
              }
              gradient.addColorStop(offset, color2);
            }
            return gradient;
          }
        });
        fabric4.util.object.extend(fabric4.Gradient, {
          fromElement: function(el, instance, opacityAttr, svgOptions) {
            var multiplier = parseFloat(opacityAttr) / (/%$/.test(opacityAttr) ? 100 : 1);
            multiplier = multiplier < 0 ? 0 : multiplier > 1 ? 1 : multiplier;
            if (isNaN(multiplier)) {
              multiplier = 1;
            }
            var colorStopEls = el.getElementsByTagName("stop"), type, gradientUnits = el.getAttribute("gradientUnits") === "userSpaceOnUse" ? "pixels" : "percentage", gradientTransform = el.getAttribute("gradientTransform") || "", colorStops = [], coords, i, offsetX = 0, offsetY = 0, transformMatrix;
            if (el.nodeName === "linearGradient" || el.nodeName === "LINEARGRADIENT") {
              type = "linear";
              coords = getLinearCoords(el);
            } else {
              type = "radial";
              coords = getRadialCoords(el);
            }
            for (i = colorStopEls.length; i--; ) {
              colorStops.push(getColorStop(colorStopEls[i], multiplier));
            }
            transformMatrix = fabric4.parseTransformAttribute(gradientTransform);
            __convertPercentUnitsToValues(instance, coords, svgOptions, gradientUnits);
            if (gradientUnits === "pixels") {
              offsetX = -instance.left;
              offsetY = -instance.top;
            }
            var gradient = new fabric4.Gradient({
              id: el.getAttribute("id"),
              type,
              coords,
              colorStops,
              gradientUnits,
              gradientTransform: transformMatrix,
              offsetX,
              offsetY
            });
            return gradient;
          }
        });
        function __convertPercentUnitsToValues(instance, options, svgOptions, gradientUnits) {
          var propValue, finalValue;
          Object.keys(options).forEach(function(prop) {
            propValue = options[prop];
            if (propValue === "Infinity") {
              finalValue = 1;
            } else if (propValue === "-Infinity") {
              finalValue = 0;
            } else {
              finalValue = parseFloat(options[prop], 10);
              if (typeof propValue === "string" && /^(\d+\.\d+)%|(\d+)%$/.test(propValue)) {
                finalValue *= 0.01;
                if (gradientUnits === "pixels") {
                  if (prop === "x1" || prop === "x2" || prop === "r2") {
                    finalValue *= svgOptions.viewBoxWidth || svgOptions.width;
                  }
                  if (prop === "y1" || prop === "y2") {
                    finalValue *= svgOptions.viewBoxHeight || svgOptions.height;
                  }
                }
              }
            }
            options[prop] = finalValue;
          });
        }
      })();
      (function() {
        "use strict";
        var toFixed = fabric4.util.toFixed;
        fabric4.Pattern = fabric4.util.createClass({
          repeat: "repeat",
          offsetX: 0,
          offsetY: 0,
          crossOrigin: "",
          patternTransform: null,
          initialize: function(options, callback) {
            options || (options = {});
            this.id = fabric4.Object.__uid++;
            this.setOptions(options);
            if (!options.source || options.source && typeof options.source !== "string") {
              callback && callback(this);
              return;
            } else {
              var _this = this;
              this.source = fabric4.util.createImage();
              fabric4.util.loadImage(options.source, function(img, isError) {
                _this.source = img;
                callback && callback(_this, isError);
              }, null, this.crossOrigin);
            }
          },
          toObject: function(propertiesToInclude) {
            var NUM_FRACTION_DIGITS = fabric4.Object.NUM_FRACTION_DIGITS, source, object;
            if (typeof this.source.src === "string") {
              source = this.source.src;
            } else if (typeof this.source === "object" && this.source.toDataURL) {
              source = this.source.toDataURL();
            }
            object = {
              type: "pattern",
              source,
              repeat: this.repeat,
              crossOrigin: this.crossOrigin,
              offsetX: toFixed(this.offsetX, NUM_FRACTION_DIGITS),
              offsetY: toFixed(this.offsetY, NUM_FRACTION_DIGITS),
              patternTransform: this.patternTransform ? this.patternTransform.concat() : null
            };
            fabric4.util.populateWithProperties(this, object, propertiesToInclude);
            return object;
          },
          toSVG: function(object) {
            var patternSource = typeof this.source === "function" ? this.source() : this.source, patternWidth = patternSource.width / object.width, patternHeight = patternSource.height / object.height, patternOffsetX = this.offsetX / object.width, patternOffsetY = this.offsetY / object.height, patternImgSrc = "";
            if (this.repeat === "repeat-x" || this.repeat === "no-repeat") {
              patternHeight = 1;
              if (patternOffsetY) {
                patternHeight += Math.abs(patternOffsetY);
              }
            }
            if (this.repeat === "repeat-y" || this.repeat === "no-repeat") {
              patternWidth = 1;
              if (patternOffsetX) {
                patternWidth += Math.abs(patternOffsetX);
              }
            }
            if (patternSource.src) {
              patternImgSrc = patternSource.src;
            } else if (patternSource.toDataURL) {
              patternImgSrc = patternSource.toDataURL();
            }
            return '<pattern id="SVGID_' + this.id + '" x="' + patternOffsetX + '" y="' + patternOffsetY + '" width="' + patternWidth + '" height="' + patternHeight + '">\n<image x="0" y="0" width="' + patternSource.width + '" height="' + patternSource.height + '" xlink:href="' + patternImgSrc + '"></image>\n</pattern>\n';
          },
          setOptions: function(options) {
            for (var prop in options) {
              this[prop] = options[prop];
            }
          },
          toLive: function(ctx) {
            var source = this.source;
            if (!source) {
              return "";
            }
            if (typeof source.src !== "undefined") {
              if (!source.complete) {
                return "";
              }
              if (source.naturalWidth === 0 || source.naturalHeight === 0) {
                return "";
              }
            }
            return ctx.createPattern(source, this.repeat);
          }
        });
      })();
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), toFixed = fabric5.util.toFixed;
        if (fabric5.Shadow) {
          fabric5.warn("fabric.Shadow is already defined.");
          return;
        }
        fabric5.Shadow = fabric5.util.createClass({
          color: "rgb(0,0,0)",
          blur: 0,
          offsetX: 0,
          offsetY: 0,
          affectStroke: false,
          includeDefaultValues: true,
          nonScaling: false,
          initialize: function(options) {
            if (typeof options === "string") {
              options = this._parseShadow(options);
            }
            for (var prop in options) {
              this[prop] = options[prop];
            }
            this.id = fabric5.Object.__uid++;
          },
          _parseShadow: function(shadow) {
            var shadowStr = shadow.trim(), offsetsAndBlur = fabric5.Shadow.reOffsetsAndBlur.exec(shadowStr) || [], color2 = shadowStr.replace(fabric5.Shadow.reOffsetsAndBlur, "") || "rgb(0,0,0)";
            return {
              color: color2.trim(),
              offsetX: parseFloat(offsetsAndBlur[1], 10) || 0,
              offsetY: parseFloat(offsetsAndBlur[2], 10) || 0,
              blur: parseFloat(offsetsAndBlur[3], 10) || 0
            };
          },
          toString: function() {
            return [this.offsetX, this.offsetY, this.blur, this.color].join("px ");
          },
          toSVG: function(object) {
            var fBoxX = 40, fBoxY = 40, NUM_FRACTION_DIGITS = fabric5.Object.NUM_FRACTION_DIGITS, offset = fabric5.util.rotateVector({ x: this.offsetX, y: this.offsetY }, fabric5.util.degreesToRadians(-object.angle)), BLUR_BOX = 20, color2 = new fabric5.Color(this.color);
            if (object.width && object.height) {
              fBoxX = toFixed((Math.abs(offset.x) + this.blur) / object.width, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
              fBoxY = toFixed((Math.abs(offset.y) + this.blur) / object.height, NUM_FRACTION_DIGITS) * 100 + BLUR_BOX;
            }
            if (object.flipX) {
              offset.x *= -1;
            }
            if (object.flipY) {
              offset.y *= -1;
            }
            return '<filter id="SVGID_' + this.id + '" y="-' + fBoxY + '%" height="' + (100 + 2 * fBoxY) + '%" x="-' + fBoxX + '%" width="' + (100 + 2 * fBoxX) + '%" >\n	<feGaussianBlur in="SourceAlpha" stdDeviation="' + toFixed(this.blur ? this.blur / 2 : 0, NUM_FRACTION_DIGITS) + '"></feGaussianBlur>\n	<feOffset dx="' + toFixed(offset.x, NUM_FRACTION_DIGITS) + '" dy="' + toFixed(offset.y, NUM_FRACTION_DIGITS) + '" result="oBlur" ></feOffset>\n	<feFlood flood-color="' + color2.toRgb() + '" flood-opacity="' + color2.getAlpha() + '"/>\n	<feComposite in2="oBlur" operator="in" />\n	<feMerge>\n		<feMergeNode></feMergeNode>\n		<feMergeNode in="SourceGraphic"></feMergeNode>\n	</feMerge>\n</filter>\n';
          },
          toObject: function() {
            if (this.includeDefaultValues) {
              return {
                color: this.color,
                blur: this.blur,
                offsetX: this.offsetX,
                offsetY: this.offsetY,
                affectStroke: this.affectStroke,
                nonScaling: this.nonScaling
              };
            }
            var obj = {}, proto = fabric5.Shadow.prototype;
            ["color", "blur", "offsetX", "offsetY", "affectStroke", "nonScaling"].forEach(function(prop) {
              if (this[prop] !== proto[prop]) {
                obj[prop] = this[prop];
              }
            }, this);
            return obj;
          }
        });
        fabric5.Shadow.reOffsetsAndBlur = /(?:\s|^)(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(-?\d+(?:\.\d*)?(?:px)?(?:\s?|$))?(\d+(?:\.\d*)?(?:px)?)?(?:\s?|$)(?:$|\s)/;
      })(typeof exports !== "undefined" ? exports : exports);
      (function() {
        "use strict";
        if (fabric4.StaticCanvas) {
          fabric4.warn("fabric.StaticCanvas is already defined.");
          return;
        }
        var extend = fabric4.util.object.extend, getElementOffset = fabric4.util.getElementOffset, removeFromArray = fabric4.util.removeFromArray, toFixed = fabric4.util.toFixed, transformPoint = fabric4.util.transformPoint, invertTransform = fabric4.util.invertTransform, getNodeCanvas = fabric4.util.getNodeCanvas, createCanvasElement = fabric4.util.createCanvasElement, CANVAS_INIT_ERROR = new Error("Could not initialize `canvas` element");
        fabric4.StaticCanvas = fabric4.util.createClass(fabric4.CommonMethods, {
          initialize: function(el, options) {
            options || (options = {});
            this.renderAndResetBound = this.renderAndReset.bind(this);
            this.requestRenderAllBound = this.requestRenderAll.bind(this);
            this._initStatic(el, options);
          },
          backgroundColor: "",
          backgroundImage: null,
          overlayColor: "",
          overlayImage: null,
          includeDefaultValues: true,
          stateful: false,
          renderOnAddRemove: true,
          controlsAboveOverlay: false,
          allowTouchScrolling: false,
          imageSmoothingEnabled: true,
          viewportTransform: fabric4.iMatrix.concat(),
          backgroundVpt: true,
          overlayVpt: true,
          enableRetinaScaling: true,
          vptCoords: {},
          skipOffscreen: true,
          clipPath: void 0,
          _initStatic: function(el, options) {
            var cb = this.requestRenderAllBound;
            this._objects = [];
            this._createLowerCanvas(el);
            this._initOptions(options);
            if (!this.interactive) {
              this._initRetinaScaling();
            }
            if (options.overlayImage) {
              this.setOverlayImage(options.overlayImage, cb);
            }
            if (options.backgroundImage) {
              this.setBackgroundImage(options.backgroundImage, cb);
            }
            if (options.backgroundColor) {
              this.setBackgroundColor(options.backgroundColor, cb);
            }
            if (options.overlayColor) {
              this.setOverlayColor(options.overlayColor, cb);
            }
            this.calcOffset();
          },
          _isRetinaScaling: function() {
            return fabric4.devicePixelRatio !== 1 && this.enableRetinaScaling;
          },
          getRetinaScaling: function() {
            return this._isRetinaScaling() ? fabric4.devicePixelRatio : 1;
          },
          _initRetinaScaling: function() {
            if (!this._isRetinaScaling()) {
              return;
            }
            var scaleRatio = fabric4.devicePixelRatio;
            this.__initRetinaScaling(scaleRatio, this.lowerCanvasEl, this.contextContainer);
            if (this.upperCanvasEl) {
              this.__initRetinaScaling(scaleRatio, this.upperCanvasEl, this.contextTop);
            }
          },
          __initRetinaScaling: function(scaleRatio, canvas, context) {
            canvas.setAttribute("width", this.width * scaleRatio);
            canvas.setAttribute("height", this.height * scaleRatio);
            context.scale(scaleRatio, scaleRatio);
          },
          calcOffset: function() {
            this._offset = getElementOffset(this.lowerCanvasEl);
            return this;
          },
          setOverlayImage: function(image, callback, options) {
            return this.__setBgOverlayImage("overlayImage", image, callback, options);
          },
          setBackgroundImage: function(image, callback, options) {
            return this.__setBgOverlayImage("backgroundImage", image, callback, options);
          },
          setOverlayColor: function(overlayColor, callback) {
            return this.__setBgOverlayColor("overlayColor", overlayColor, callback);
          },
          setBackgroundColor: function(backgroundColor2, callback) {
            return this.__setBgOverlayColor("backgroundColor", backgroundColor2, callback);
          },
          __setBgOverlayImage: function(property, image, callback, options) {
            if (typeof image === "string") {
              fabric4.util.loadImage(image, function(img, isError) {
                if (img) {
                  var instance = new fabric4.Image(img, options);
                  this[property] = instance;
                  instance.canvas = this;
                }
                callback && callback(img, isError);
              }, this, options && options.crossOrigin);
            } else {
              options && image.setOptions(options);
              this[property] = image;
              image && (image.canvas = this);
              callback && callback(image, false);
            }
            return this;
          },
          __setBgOverlayColor: function(property, color2, callback) {
            this[property] = color2;
            this._initGradient(color2, property);
            this._initPattern(color2, property, callback);
            return this;
          },
          _createCanvasElement: function() {
            var element = createCanvasElement();
            if (!element) {
              throw CANVAS_INIT_ERROR;
            }
            if (!element.style) {
              element.style = {};
            }
            if (typeof element.getContext === "undefined") {
              throw CANVAS_INIT_ERROR;
            }
            return element;
          },
          _initOptions: function(options) {
            var lowerCanvasEl = this.lowerCanvasEl;
            this._setOptions(options);
            this.width = this.width || parseInt(lowerCanvasEl.width, 10) || 0;
            this.height = this.height || parseInt(lowerCanvasEl.height, 10) || 0;
            if (!this.lowerCanvasEl.style) {
              return;
            }
            lowerCanvasEl.width = this.width;
            lowerCanvasEl.height = this.height;
            lowerCanvasEl.style.width = this.width + "px";
            lowerCanvasEl.style.height = this.height + "px";
            this.viewportTransform = this.viewportTransform.slice();
          },
          _createLowerCanvas: function(canvasEl) {
            if (canvasEl && canvasEl.getContext) {
              this.lowerCanvasEl = canvasEl;
            } else {
              this.lowerCanvasEl = fabric4.util.getById(canvasEl) || this._createCanvasElement();
            }
            fabric4.util.addClass(this.lowerCanvasEl, "lower-canvas");
            this._originalCanvasStyle = this.lowerCanvasEl.style;
            if (this.interactive) {
              this._applyCanvasStyle(this.lowerCanvasEl);
            }
            this.contextContainer = this.lowerCanvasEl.getContext("2d");
          },
          getWidth: function() {
            return this.width;
          },
          getHeight: function() {
            return this.height;
          },
          setWidth: function(value, options) {
            return this.setDimensions({ width: value }, options);
          },
          setHeight: function(value, options) {
            return this.setDimensions({ height: value }, options);
          },
          setDimensions: function(dimensions, options) {
            var cssValue;
            options = options || {};
            for (var prop in dimensions) {
              cssValue = dimensions[prop];
              if (!options.cssOnly) {
                this._setBackstoreDimension(prop, dimensions[prop]);
                cssValue += "px";
                this.hasLostContext = true;
              }
              if (!options.backstoreOnly) {
                this._setCssDimension(prop, cssValue);
              }
            }
            if (this._isCurrentlyDrawing) {
              this.freeDrawingBrush && this.freeDrawingBrush._setBrushStyles();
            }
            this._initRetinaScaling();
            this.calcOffset();
            if (!options.cssOnly) {
              this.requestRenderAll();
            }
            return this;
          },
          _setBackstoreDimension: function(prop, value) {
            this.lowerCanvasEl[prop] = value;
            if (this.upperCanvasEl) {
              this.upperCanvasEl[prop] = value;
            }
            if (this.cacheCanvasEl) {
              this.cacheCanvasEl[prop] = value;
            }
            this[prop] = value;
            return this;
          },
          _setCssDimension: function(prop, value) {
            this.lowerCanvasEl.style[prop] = value;
            if (this.upperCanvasEl) {
              this.upperCanvasEl.style[prop] = value;
            }
            if (this.wrapperEl) {
              this.wrapperEl.style[prop] = value;
            }
            return this;
          },
          getZoom: function() {
            return this.viewportTransform[0];
          },
          setViewportTransform: function(vpt) {
            var activeObject = this._activeObject, backgroundObject = this.backgroundImage, overlayObject = this.overlayImage, object, i, len;
            this.viewportTransform = vpt;
            for (i = 0, len = this._objects.length; i < len; i++) {
              object = this._objects[i];
              object.group || object.setCoords(true);
            }
            if (activeObject) {
              activeObject.setCoords();
            }
            if (backgroundObject) {
              backgroundObject.setCoords(true);
            }
            if (overlayObject) {
              overlayObject.setCoords(true);
            }
            this.calcViewportBoundaries();
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          zoomToPoint: function(point, value) {
            var before = point, vpt = this.viewportTransform.slice(0);
            point = transformPoint(point, invertTransform(this.viewportTransform));
            vpt[0] = value;
            vpt[3] = value;
            var after = transformPoint(point, vpt);
            vpt[4] += before.x - after.x;
            vpt[5] += before.y - after.y;
            return this.setViewportTransform(vpt);
          },
          setZoom: function(value) {
            this.zoomToPoint(new fabric4.Point(0, 0), value);
            return this;
          },
          absolutePan: function(point) {
            var vpt = this.viewportTransform.slice(0);
            vpt[4] = -point.x;
            vpt[5] = -point.y;
            return this.setViewportTransform(vpt);
          },
          relativePan: function(point) {
            return this.absolutePan(new fabric4.Point(-point.x - this.viewportTransform[4], -point.y - this.viewportTransform[5]));
          },
          getElement: function() {
            return this.lowerCanvasEl;
          },
          _onObjectAdded: function(obj) {
            this.stateful && obj.setupState();
            obj._set("canvas", this);
            obj.setCoords();
            this.fire("object:added", { target: obj });
            obj.fire("added");
          },
          _onObjectRemoved: function(obj) {
            this.fire("object:removed", { target: obj });
            obj.fire("removed");
            delete obj.canvas;
          },
          clearContext: function(ctx) {
            ctx.clearRect(0, 0, this.width, this.height);
            return this;
          },
          getContext: function() {
            return this.contextContainer;
          },
          clear: function() {
            this.remove.apply(this, this.getObjects());
            this.backgroundImage = null;
            this.overlayImage = null;
            this.backgroundColor = "";
            this.overlayColor = "";
            if (this._hasITextHandlers) {
              this.off("mouse:up", this._mouseUpITextHandler);
              this._iTextInstances = null;
              this._hasITextHandlers = false;
            }
            this.clearContext(this.contextContainer);
            this.fire("canvas:cleared");
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          renderAll: function() {
            var canvasToDrawOn = this.contextContainer;
            this.renderCanvas(canvasToDrawOn, this._objects);
            return this;
          },
          renderAndReset: function() {
            this.isRendering = 0;
            this.renderAll();
          },
          requestRenderAll: function() {
            if (!this.isRendering) {
              this.isRendering = fabric4.util.requestAnimFrame(this.renderAndResetBound);
            }
            return this;
          },
          calcViewportBoundaries: function() {
            var points = {}, width2 = this.width, height2 = this.height, iVpt = invertTransform(this.viewportTransform);
            points.tl = transformPoint({ x: 0, y: 0 }, iVpt);
            points.br = transformPoint({ x: width2, y: height2 }, iVpt);
            points.tr = new fabric4.Point(points.br.x, points.tl.y);
            points.bl = new fabric4.Point(points.tl.x, points.br.y);
            this.vptCoords = points;
            return points;
          },
          cancelRequestedRender: function() {
            if (this.isRendering) {
              fabric4.util.cancelAnimFrame(this.isRendering);
              this.isRendering = 0;
            }
          },
          renderCanvas: function(ctx, objects) {
            var v = this.viewportTransform, path = this.clipPath;
            this.cancelRequestedRender();
            this.calcViewportBoundaries();
            this.clearContext(ctx);
            fabric4.util.setImageSmoothing(ctx, this.imageSmoothingEnabled);
            this.fire("before:render", { ctx });
            this._renderBackground(ctx);
            ctx.save();
            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
            this._renderObjects(ctx, objects);
            ctx.restore();
            if (!this.controlsAboveOverlay && this.interactive) {
              this.drawControls(ctx);
            }
            if (path) {
              path.canvas = this;
              path.shouldCache();
              path._transformDone = true;
              path.renderCache({ forClipping: true });
              this.drawClipPathOnCanvas(ctx);
            }
            this._renderOverlay(ctx);
            if (this.controlsAboveOverlay && this.interactive) {
              this.drawControls(ctx);
            }
            this.fire("after:render", { ctx });
          },
          drawClipPathOnCanvas: function(ctx) {
            var v = this.viewportTransform, path = this.clipPath;
            ctx.save();
            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
            ctx.globalCompositeOperation = "destination-in";
            path.transform(ctx);
            ctx.scale(1 / path.zoomX, 1 / path.zoomY);
            ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);
            ctx.restore();
          },
          _renderObjects: function(ctx, objects) {
            var i, len;
            for (i = 0, len = objects.length; i < len; ++i) {
              objects[i] && objects[i].render(ctx);
            }
          },
          _renderBackgroundOrOverlay: function(ctx, property) {
            var fill = this[property + "Color"], object = this[property + "Image"], v = this.viewportTransform, needsVpt = this[property + "Vpt"];
            if (!fill && !object) {
              return;
            }
            if (fill) {
              ctx.save();
              ctx.beginPath();
              ctx.moveTo(0, 0);
              ctx.lineTo(this.width, 0);
              ctx.lineTo(this.width, this.height);
              ctx.lineTo(0, this.height);
              ctx.closePath();
              ctx.fillStyle = fill.toLive ? fill.toLive(ctx, this) : fill;
              if (needsVpt) {
                ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
              }
              ctx.transform(1, 0, 0, 1, fill.offsetX || 0, fill.offsetY || 0);
              var m = fill.gradientTransform || fill.patternTransform;
              m && ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
              ctx.fill();
              ctx.restore();
            }
            if (object) {
              ctx.save();
              if (needsVpt) {
                ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
              }
              object.render(ctx);
              ctx.restore();
            }
          },
          _renderBackground: function(ctx) {
            this._renderBackgroundOrOverlay(ctx, "background");
          },
          _renderOverlay: function(ctx) {
            this._renderBackgroundOrOverlay(ctx, "overlay");
          },
          getCenter: function() {
            return {
              top: this.height / 2,
              left: this.width / 2
            };
          },
          centerObjectH: function(object) {
            return this._centerObject(object, new fabric4.Point(this.getCenter().left, object.getCenterPoint().y));
          },
          centerObjectV: function(object) {
            return this._centerObject(object, new fabric4.Point(object.getCenterPoint().x, this.getCenter().top));
          },
          centerObject: function(object) {
            var center = this.getCenter();
            return this._centerObject(object, new fabric4.Point(center.left, center.top));
          },
          viewportCenterObject: function(object) {
            var vpCenter = this.getVpCenter();
            return this._centerObject(object, vpCenter);
          },
          viewportCenterObjectH: function(object) {
            var vpCenter = this.getVpCenter();
            this._centerObject(object, new fabric4.Point(vpCenter.x, object.getCenterPoint().y));
            return this;
          },
          viewportCenterObjectV: function(object) {
            var vpCenter = this.getVpCenter();
            return this._centerObject(object, new fabric4.Point(object.getCenterPoint().x, vpCenter.y));
          },
          getVpCenter: function() {
            var center = this.getCenter(), iVpt = invertTransform(this.viewportTransform);
            return transformPoint({ x: center.left, y: center.top }, iVpt);
          },
          _centerObject: function(object, center) {
            object.setPositionByOrigin(center, "center", "center");
            object.setCoords();
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          toDatalessJSON: function(propertiesToInclude) {
            return this.toDatalessObject(propertiesToInclude);
          },
          toObject: function(propertiesToInclude) {
            return this._toObjectMethod("toObject", propertiesToInclude);
          },
          toDatalessObject: function(propertiesToInclude) {
            return this._toObjectMethod("toDatalessObject", propertiesToInclude);
          },
          _toObjectMethod: function(methodName, propertiesToInclude) {
            var clipPath = this.clipPath, data = {
              version: fabric4.version,
              objects: this._toObjects(methodName, propertiesToInclude)
            };
            if (clipPath && !clipPath.excludeFromExport) {
              data.clipPath = this._toObject(this.clipPath, methodName, propertiesToInclude);
            }
            extend(data, this.__serializeBgOverlay(methodName, propertiesToInclude));
            fabric4.util.populateWithProperties(this, data, propertiesToInclude);
            return data;
          },
          _toObjects: function(methodName, propertiesToInclude) {
            return this._objects.filter(function(object) {
              return !object.excludeFromExport;
            }).map(function(instance) {
              return this._toObject(instance, methodName, propertiesToInclude);
            }, this);
          },
          _toObject: function(instance, methodName, propertiesToInclude) {
            var originalValue;
            if (!this.includeDefaultValues) {
              originalValue = instance.includeDefaultValues;
              instance.includeDefaultValues = false;
            }
            var object = instance[methodName](propertiesToInclude);
            if (!this.includeDefaultValues) {
              instance.includeDefaultValues = originalValue;
            }
            return object;
          },
          __serializeBgOverlay: function(methodName, propertiesToInclude) {
            var data = {}, bgImage = this.backgroundImage, overlayImage = this.overlayImage, bgColor = this.backgroundColor, overlayColor = this.overlayColor;
            if (bgColor && bgColor.toObject) {
              if (!bgColor.excludeFromExport) {
                data.background = bgColor.toObject(propertiesToInclude);
              }
            } else if (bgColor) {
              data.background = bgColor;
            }
            if (overlayColor && overlayColor.toObject) {
              if (!overlayColor.excludeFromExport) {
                data.overlay = overlayColor.toObject(propertiesToInclude);
              }
            } else if (overlayColor) {
              data.overlay = overlayColor;
            }
            if (bgImage && !bgImage.excludeFromExport) {
              data.backgroundImage = this._toObject(bgImage, methodName, propertiesToInclude);
            }
            if (overlayImage && !overlayImage.excludeFromExport) {
              data.overlayImage = this._toObject(overlayImage, methodName, propertiesToInclude);
            }
            return data;
          },
          svgViewportTransformation: true,
          toSVG: function(options, reviver) {
            options || (options = {});
            options.reviver = reviver;
            var markup = [];
            this._setSVGPreamble(markup, options);
            this._setSVGHeader(markup, options);
            if (this.clipPath) {
              markup.push('<g clip-path="url(#' + this.clipPath.clipPathId + ')" >\n');
            }
            this._setSVGBgOverlayColor(markup, "background");
            this._setSVGBgOverlayImage(markup, "backgroundImage", reviver);
            this._setSVGObjects(markup, reviver);
            if (this.clipPath) {
              markup.push("</g>\n");
            }
            this._setSVGBgOverlayColor(markup, "overlay");
            this._setSVGBgOverlayImage(markup, "overlayImage", reviver);
            markup.push("</svg>");
            return markup.join("");
          },
          _setSVGPreamble: function(markup, options) {
            if (options.suppressPreamble) {
              return;
            }
            markup.push('<?xml version="1.0" encoding="', options.encoding || "UTF-8", '" standalone="no" ?>\n', '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" ', '"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n');
          },
          _setSVGHeader: function(markup, options) {
            var width2 = options.width || this.width, height2 = options.height || this.height, vpt, viewBox = 'viewBox="0 0 ' + this.width + " " + this.height + '" ', NUM_FRACTION_DIGITS = fabric4.Object.NUM_FRACTION_DIGITS;
            if (options.viewBox) {
              viewBox = 'viewBox="' + options.viewBox.x + " " + options.viewBox.y + " " + options.viewBox.width + " " + options.viewBox.height + '" ';
            } else {
              if (this.svgViewportTransformation) {
                vpt = this.viewportTransform;
                viewBox = 'viewBox="' + toFixed(-vpt[4] / vpt[0], NUM_FRACTION_DIGITS) + " " + toFixed(-vpt[5] / vpt[3], NUM_FRACTION_DIGITS) + " " + toFixed(this.width / vpt[0], NUM_FRACTION_DIGITS) + " " + toFixed(this.height / vpt[3], NUM_FRACTION_DIGITS) + '" ';
              }
            }
            markup.push("<svg ", 'xmlns="http://www.w3.org/2000/svg" ', 'xmlns:xlink="http://www.w3.org/1999/xlink" ', 'version="1.1" ', 'width="', width2, '" ', 'height="', height2, '" ', viewBox, 'xml:space="preserve">\n', "<desc>Created with Fabric.js ", fabric4.version, "</desc>\n", "<defs>\n", this.createSVGFontFacesMarkup(), this.createSVGRefElementsMarkup(), this.createSVGClipPathMarkup(options), "</defs>\n");
          },
          createSVGClipPathMarkup: function(options) {
            var clipPath = this.clipPath;
            if (clipPath) {
              clipPath.clipPathId = "CLIPPATH_" + fabric4.Object.__uid++;
              return '<clipPath id="' + clipPath.clipPathId + '" >\n' + this.clipPath.toClipPathSVG(options.reviver) + "</clipPath>\n";
            }
            return "";
          },
          createSVGRefElementsMarkup: function() {
            var _this = this, markup = ["background", "overlay"].map(function(prop) {
              var fill = _this[prop + "Color"];
              if (fill && fill.toLive) {
                var shouldTransform = _this[prop + "Vpt"], vpt = _this.viewportTransform, object = {
                  width: _this.width / (shouldTransform ? vpt[0] : 1),
                  height: _this.height / (shouldTransform ? vpt[3] : 1)
                };
                return fill.toSVG(object, { additionalTransform: shouldTransform ? fabric4.util.matrixToSVG(vpt) : "" });
              }
            });
            return markup.join("");
          },
          createSVGFontFacesMarkup: function() {
            var markup = "", fontList = {}, obj, fontFamily2, style3, row, rowIndex, _char, charIndex, i, len, fontPaths = fabric4.fontPaths, objects = [];
            this._objects.forEach(function add(object) {
              objects.push(object);
              if (object._objects) {
                object._objects.forEach(add);
              }
            });
            for (i = 0, len = objects.length; i < len; i++) {
              obj = objects[i];
              fontFamily2 = obj.fontFamily;
              if (obj.type.indexOf("text") === -1 || fontList[fontFamily2] || !fontPaths[fontFamily2]) {
                continue;
              }
              fontList[fontFamily2] = true;
              if (!obj.styles) {
                continue;
              }
              style3 = obj.styles;
              for (rowIndex in style3) {
                row = style3[rowIndex];
                for (charIndex in row) {
                  _char = row[charIndex];
                  fontFamily2 = _char.fontFamily;
                  if (!fontList[fontFamily2] && fontPaths[fontFamily2]) {
                    fontList[fontFamily2] = true;
                  }
                }
              }
            }
            for (var j in fontList) {
              markup += [
                "		@font-face {\n",
                "			font-family: '",
                j,
                "';\n",
                "			src: url('",
                fontPaths[j],
                "');\n",
                "		}\n"
              ].join("");
            }
            if (markup) {
              markup = [
                '	<style type="text/css">',
                "<![CDATA[\n",
                markup,
                "]]>",
                "</style>\n"
              ].join("");
            }
            return markup;
          },
          _setSVGObjects: function(markup, reviver) {
            var instance, i, len, objects = this._objects;
            for (i = 0, len = objects.length; i < len; i++) {
              instance = objects[i];
              if (instance.excludeFromExport) {
                continue;
              }
              this._setSVGObject(markup, instance, reviver);
            }
          },
          _setSVGObject: function(markup, instance, reviver) {
            markup.push(instance.toSVG(reviver));
          },
          _setSVGBgOverlayImage: function(markup, property, reviver) {
            if (this[property] && !this[property].excludeFromExport && this[property].toSVG) {
              markup.push(this[property].toSVG(reviver));
            }
          },
          _setSVGBgOverlayColor: function(markup, property) {
            var filler = this[property + "Color"], vpt = this.viewportTransform, finalWidth = this.width, finalHeight = this.height;
            if (!filler) {
              return;
            }
            if (filler.toLive) {
              var repeat = filler.repeat, iVpt = fabric4.util.invertTransform(vpt), shouldInvert = this[property + "Vpt"], additionalTransform = shouldInvert ? fabric4.util.matrixToSVG(iVpt) : "";
              markup.push('<rect transform="' + additionalTransform + " translate(", finalWidth / 2, ",", finalHeight / 2, ')"', ' x="', filler.offsetX - finalWidth / 2, '" y="', filler.offsetY - finalHeight / 2, '" ', 'width="', repeat === "repeat-y" || repeat === "no-repeat" ? filler.source.width : finalWidth, '" height="', repeat === "repeat-x" || repeat === "no-repeat" ? filler.source.height : finalHeight, '" fill="url(#SVGID_' + filler.id + ')"', "></rect>\n");
            } else {
              markup.push('<rect x="0" y="0" width="100%" height="100%" ', 'fill="', filler, '"', "></rect>\n");
            }
          },
          sendToBack: function(object) {
            if (!object) {
              return this;
            }
            var activeSelection = this._activeObject, i, obj, objs;
            if (object === activeSelection && object.type === "activeSelection") {
              objs = activeSelection._objects;
              for (i = objs.length; i--; ) {
                obj = objs[i];
                removeFromArray(this._objects, obj);
                this._objects.unshift(obj);
              }
            } else {
              removeFromArray(this._objects, object);
              this._objects.unshift(object);
            }
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          bringToFront: function(object) {
            if (!object) {
              return this;
            }
            var activeSelection = this._activeObject, i, obj, objs;
            if (object === activeSelection && object.type === "activeSelection") {
              objs = activeSelection._objects;
              for (i = 0; i < objs.length; i++) {
                obj = objs[i];
                removeFromArray(this._objects, obj);
                this._objects.push(obj);
              }
            } else {
              removeFromArray(this._objects, object);
              this._objects.push(object);
            }
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          sendBackwards: function(object, intersecting) {
            if (!object) {
              return this;
            }
            var activeSelection = this._activeObject, i, obj, idx, newIdx, objs, objsMoved = 0;
            if (object === activeSelection && object.type === "activeSelection") {
              objs = activeSelection._objects;
              for (i = 0; i < objs.length; i++) {
                obj = objs[i];
                idx = this._objects.indexOf(obj);
                if (idx > 0 + objsMoved) {
                  newIdx = idx - 1;
                  removeFromArray(this._objects, obj);
                  this._objects.splice(newIdx, 0, obj);
                }
                objsMoved++;
              }
            } else {
              idx = this._objects.indexOf(object);
              if (idx !== 0) {
                newIdx = this._findNewLowerIndex(object, idx, intersecting);
                removeFromArray(this._objects, object);
                this._objects.splice(newIdx, 0, object);
              }
            }
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          _findNewLowerIndex: function(object, idx, intersecting) {
            var newIdx, i;
            if (intersecting) {
              newIdx = idx;
              for (i = idx - 1; i >= 0; --i) {
                var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);
                if (isIntersecting) {
                  newIdx = i;
                  break;
                }
              }
            } else {
              newIdx = idx - 1;
            }
            return newIdx;
          },
          bringForward: function(object, intersecting) {
            if (!object) {
              return this;
            }
            var activeSelection = this._activeObject, i, obj, idx, newIdx, objs, objsMoved = 0;
            if (object === activeSelection && object.type === "activeSelection") {
              objs = activeSelection._objects;
              for (i = objs.length; i--; ) {
                obj = objs[i];
                idx = this._objects.indexOf(obj);
                if (idx < this._objects.length - 1 - objsMoved) {
                  newIdx = idx + 1;
                  removeFromArray(this._objects, obj);
                  this._objects.splice(newIdx, 0, obj);
                }
                objsMoved++;
              }
            } else {
              idx = this._objects.indexOf(object);
              if (idx !== this._objects.length - 1) {
                newIdx = this._findNewUpperIndex(object, idx, intersecting);
                removeFromArray(this._objects, object);
                this._objects.splice(newIdx, 0, object);
              }
            }
            this.renderOnAddRemove && this.requestRenderAll();
            return this;
          },
          _findNewUpperIndex: function(object, idx, intersecting) {
            var newIdx, i, len;
            if (intersecting) {
              newIdx = idx;
              for (i = idx + 1, len = this._objects.length; i < len; ++i) {
                var isIntersecting = object.intersectsWithObject(this._objects[i]) || object.isContainedWithinObject(this._objects[i]) || this._objects[i].isContainedWithinObject(object);
                if (isIntersecting) {
                  newIdx = i;
                  break;
                }
              }
            } else {
              newIdx = idx + 1;
            }
            return newIdx;
          },
          moveTo: function(object, index) {
            removeFromArray(this._objects, object);
            this._objects.splice(index, 0, object);
            return this.renderOnAddRemove && this.requestRenderAll();
          },
          dispose: function() {
            if (this.isRendering) {
              fabric4.util.cancelAnimFrame(this.isRendering);
              this.isRendering = 0;
            }
            this.forEachObject(function(object) {
              object.dispose && object.dispose();
            });
            this._objects = [];
            if (this.backgroundImage && this.backgroundImage.dispose) {
              this.backgroundImage.dispose();
            }
            this.backgroundImage = null;
            if (this.overlayImage && this.overlayImage.dispose) {
              this.overlayImage.dispose();
            }
            this.overlayImage = null;
            this._iTextInstances = null;
            this.contextContainer = null;
            this.lowerCanvasEl.classList.remove("lower-canvas");
            this.lowerCanvasEl.style = this._originalCanvasStyle;
            delete this._originalCanvasStyle;
            this.lowerCanvasEl.setAttribute("width", this.width);
            this.lowerCanvasEl.setAttribute("height", this.height);
            fabric4.util.cleanUpJsdomNode(this.lowerCanvasEl);
            this.lowerCanvasEl = void 0;
            return this;
          },
          toString: function() {
            return "#<fabric.Canvas (" + this.complexity() + "): { objects: " + this._objects.length + " }>";
          }
        });
        extend(fabric4.StaticCanvas.prototype, fabric4.Observable);
        extend(fabric4.StaticCanvas.prototype, fabric4.Collection);
        extend(fabric4.StaticCanvas.prototype, fabric4.DataURLExporter);
        extend(fabric4.StaticCanvas, {
          EMPTY_JSON: '{"objects": [], "background": "white"}',
          supports: function(methodName) {
            var el = createCanvasElement();
            if (!el || !el.getContext) {
              return null;
            }
            var ctx = el.getContext("2d");
            if (!ctx) {
              return null;
            }
            switch (methodName) {
              case "setLineDash":
                return typeof ctx.setLineDash !== "undefined";
              default:
                return null;
            }
          }
        });
        fabric4.StaticCanvas.prototype.toJSON = fabric4.StaticCanvas.prototype.toObject;
        if (fabric4.isLikelyNode) {
          fabric4.StaticCanvas.prototype.createPNGStream = function() {
            var impl = getNodeCanvas(this.lowerCanvasEl);
            return impl && impl.createPNGStream();
          };
          fabric4.StaticCanvas.prototype.createJPEGStream = function(opts) {
            var impl = getNodeCanvas(this.lowerCanvasEl);
            return impl && impl.createJPEGStream(opts);
          };
        }
      })();
      fabric4.BaseBrush = fabric4.util.createClass({
        color: "rgb(0, 0, 0)",
        width: 1,
        shadow: null,
        strokeLineCap: "round",
        strokeLineJoin: "round",
        strokeMiterLimit: 10,
        strokeDashArray: null,
        limitedToCanvasSize: false,
        _setBrushStyles: function() {
          var ctx = this.canvas.contextTop;
          ctx.strokeStyle = this.color;
          ctx.lineWidth = this.width;
          ctx.lineCap = this.strokeLineCap;
          ctx.miterLimit = this.strokeMiterLimit;
          ctx.lineJoin = this.strokeLineJoin;
          ctx.setLineDash(this.strokeDashArray || []);
        },
        _saveAndTransform: function(ctx) {
          var v = this.canvas.viewportTransform;
          ctx.save();
          ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
        },
        _setShadow: function() {
          if (!this.shadow) {
            return;
          }
          var canvas = this.canvas, shadow = this.shadow, ctx = canvas.contextTop, zoom = canvas.getZoom();
          if (canvas && canvas._isRetinaScaling()) {
            zoom *= fabric4.devicePixelRatio;
          }
          ctx.shadowColor = shadow.color;
          ctx.shadowBlur = shadow.blur * zoom;
          ctx.shadowOffsetX = shadow.offsetX * zoom;
          ctx.shadowOffsetY = shadow.offsetY * zoom;
        },
        needsFullRender: function() {
          var color2 = new fabric4.Color(this.color);
          return color2.getAlpha() < 1 || !!this.shadow;
        },
        _resetShadow: function() {
          var ctx = this.canvas.contextTop;
          ctx.shadowColor = "";
          ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
        },
        _isOutSideCanvas: function(pointer) {
          return pointer.x < 0 || pointer.x > this.canvas.getWidth() || pointer.y < 0 || pointer.y > this.canvas.getHeight();
        }
      });
      (function() {
        fabric4.PencilBrush = fabric4.util.createClass(fabric4.BaseBrush, {
          decimate: 0.4,
          initialize: function(canvas) {
            this.canvas = canvas;
            this._points = [];
          },
          _drawSegment: function(ctx, p1, p2) {
            var midPoint = p1.midPointFrom(p2);
            ctx.quadraticCurveTo(p1.x, p1.y, midPoint.x, midPoint.y);
            return midPoint;
          },
          onMouseDown: function(pointer, options) {
            if (!this.canvas._isMainEvent(options.e)) {
              return;
            }
            this._prepareForDrawing(pointer);
            this._captureDrawingPath(pointer);
            this._render();
          },
          onMouseMove: function(pointer, options) {
            if (!this.canvas._isMainEvent(options.e)) {
              return;
            }
            if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {
              return;
            }
            if (this._captureDrawingPath(pointer) && this._points.length > 1) {
              if (this.needsFullRender()) {
                this.canvas.clearContext(this.canvas.contextTop);
                this._render();
              } else {
                var points = this._points, length2 = points.length, ctx = this.canvas.contextTop;
                this._saveAndTransform(ctx);
                if (this.oldEnd) {
                  ctx.beginPath();
                  ctx.moveTo(this.oldEnd.x, this.oldEnd.y);
                }
                this.oldEnd = this._drawSegment(ctx, points[length2 - 2], points[length2 - 1], true);
                ctx.stroke();
                ctx.restore();
              }
            }
          },
          onMouseUp: function(options) {
            if (!this.canvas._isMainEvent(options.e)) {
              return true;
            }
            this.oldEnd = void 0;
            this._finalizeAndAddPath();
            return false;
          },
          _prepareForDrawing: function(pointer) {
            var p = new fabric4.Point(pointer.x, pointer.y);
            this._reset();
            this._addPoint(p);
            this.canvas.contextTop.moveTo(p.x, p.y);
          },
          _addPoint: function(point) {
            if (this._points.length > 1 && point.eq(this._points[this._points.length - 1])) {
              return false;
            }
            this._points.push(point);
            return true;
          },
          _reset: function() {
            this._points = [];
            this._setBrushStyles();
            this._setShadow();
          },
          _captureDrawingPath: function(pointer) {
            var pointerPoint = new fabric4.Point(pointer.x, pointer.y);
            return this._addPoint(pointerPoint);
          },
          _render: function() {
            var ctx = this.canvas.contextTop, i, len, p1 = this._points[0], p2 = this._points[1];
            this._saveAndTransform(ctx);
            ctx.beginPath();
            if (this._points.length === 2 && p1.x === p2.x && p1.y === p2.y) {
              var width2 = this.width / 1e3;
              p1 = new fabric4.Point(p1.x, p1.y);
              p2 = new fabric4.Point(p2.x, p2.y);
              p1.x -= width2;
              p2.x += width2;
            }
            ctx.moveTo(p1.x, p1.y);
            for (i = 1, len = this._points.length; i < len; i++) {
              this._drawSegment(ctx, p1, p2);
              p1 = this._points[i];
              p2 = this._points[i + 1];
            }
            ctx.lineTo(p1.x, p1.y);
            ctx.stroke();
            ctx.restore();
          },
          convertPointsToSVGPath: function(points) {
            var correction = this.width / 1e3;
            return fabric4.util.getSmoothPathFromPoints(points, correction);
          },
          _isEmptySVGPath: function(pathData) {
            var pathString = fabric4.util.joinPath(pathData);
            return pathString === "M 0 0 Q 0 0 0 0 L 0 0";
          },
          createPath: function(pathData) {
            var path = new fabric4.Path(pathData, {
              fill: null,
              stroke: this.color,
              strokeWidth: this.width,
              strokeLineCap: this.strokeLineCap,
              strokeMiterLimit: this.strokeMiterLimit,
              strokeLineJoin: this.strokeLineJoin,
              strokeDashArray: this.strokeDashArray
            });
            if (this.shadow) {
              this.shadow.affectStroke = true;
              path.shadow = new fabric4.Shadow(this.shadow);
            }
            return path;
          },
          decimatePoints: function(points, distance) {
            if (points.length <= 2) {
              return points;
            }
            var zoom = this.canvas.getZoom(), adjustedDistance = Math.pow(distance / zoom, 2), i, l = points.length - 1, lastPoint = points[0], newPoints = [lastPoint], cDistance;
            for (i = 1; i < l - 1; i++) {
              cDistance = Math.pow(lastPoint.x - points[i].x, 2) + Math.pow(lastPoint.y - points[i].y, 2);
              if (cDistance >= adjustedDistance) {
                lastPoint = points[i];
                newPoints.push(lastPoint);
              }
            }
            newPoints.push(points[l]);
            return newPoints;
          },
          _finalizeAndAddPath: function() {
            var ctx = this.canvas.contextTop;
            ctx.closePath();
            if (this.decimate) {
              this._points = this.decimatePoints(this._points, this.decimate);
            }
            var pathData = this.convertPointsToSVGPath(this._points);
            if (this._isEmptySVGPath(pathData)) {
              this.canvas.requestRenderAll();
              return;
            }
            var path = this.createPath(pathData);
            this.canvas.clearContext(this.canvas.contextTop);
            this.canvas.fire("before:path:created", { path });
            this.canvas.add(path);
            this.canvas.requestRenderAll();
            path.setCoords();
            this._resetShadow();
            this.canvas.fire("path:created", { path });
          }
        });
      })();
      fabric4.CircleBrush = fabric4.util.createClass(fabric4.BaseBrush, {
        width: 10,
        initialize: function(canvas) {
          this.canvas = canvas;
          this.points = [];
        },
        drawDot: function(pointer) {
          var point = this.addPoint(pointer), ctx = this.canvas.contextTop;
          this._saveAndTransform(ctx);
          this.dot(ctx, point);
          ctx.restore();
        },
        dot: function(ctx, point) {
          ctx.fillStyle = point.fill;
          ctx.beginPath();
          ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2, false);
          ctx.closePath();
          ctx.fill();
        },
        onMouseDown: function(pointer) {
          this.points.length = 0;
          this.canvas.clearContext(this.canvas.contextTop);
          this._setShadow();
          this.drawDot(pointer);
        },
        _render: function() {
          var ctx = this.canvas.contextTop, i, len, points = this.points;
          this._saveAndTransform(ctx);
          for (i = 0, len = points.length; i < len; i++) {
            this.dot(ctx, points[i]);
          }
          ctx.restore();
        },
        onMouseMove: function(pointer) {
          if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {
            return;
          }
          if (this.needsFullRender()) {
            this.canvas.clearContext(this.canvas.contextTop);
            this.addPoint(pointer);
            this._render();
          } else {
            this.drawDot(pointer);
          }
        },
        onMouseUp: function() {
          var originalRenderOnAddRemove = this.canvas.renderOnAddRemove, i, len;
          this.canvas.renderOnAddRemove = false;
          var circles = [];
          for (i = 0, len = this.points.length; i < len; i++) {
            var point = this.points[i], circle = new fabric4.Circle({
              radius: point.radius,
              left: point.x,
              top: point.y,
              originX: "center",
              originY: "center",
              fill: point.fill
            });
            this.shadow && (circle.shadow = new fabric4.Shadow(this.shadow));
            circles.push(circle);
          }
          var group = new fabric4.Group(circles);
          group.canvas = this.canvas;
          this.canvas.fire("before:path:created", { path: group });
          this.canvas.add(group);
          this.canvas.fire("path:created", { path: group });
          this.canvas.clearContext(this.canvas.contextTop);
          this._resetShadow();
          this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
          this.canvas.requestRenderAll();
        },
        addPoint: function(pointer) {
          var pointerPoint = new fabric4.Point(pointer.x, pointer.y), circleRadius = fabric4.util.getRandomInt(Math.max(0, this.width - 20), this.width + 20) / 2, circleColor = new fabric4.Color(this.color).setAlpha(fabric4.util.getRandomInt(0, 100) / 100).toRgba();
          pointerPoint.radius = circleRadius;
          pointerPoint.fill = circleColor;
          this.points.push(pointerPoint);
          return pointerPoint;
        }
      });
      fabric4.SprayBrush = fabric4.util.createClass(fabric4.BaseBrush, {
        width: 10,
        density: 20,
        dotWidth: 1,
        dotWidthVariance: 1,
        randomOpacity: false,
        optimizeOverlapping: true,
        initialize: function(canvas) {
          this.canvas = canvas;
          this.sprayChunks = [];
        },
        onMouseDown: function(pointer) {
          this.sprayChunks.length = 0;
          this.canvas.clearContext(this.canvas.contextTop);
          this._setShadow();
          this.addSprayChunk(pointer);
          this.render(this.sprayChunkPoints);
        },
        onMouseMove: function(pointer) {
          if (this.limitedToCanvasSize === true && this._isOutSideCanvas(pointer)) {
            return;
          }
          this.addSprayChunk(pointer);
          this.render(this.sprayChunkPoints);
        },
        onMouseUp: function() {
          var originalRenderOnAddRemove = this.canvas.renderOnAddRemove;
          this.canvas.renderOnAddRemove = false;
          var rects = [];
          for (var i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {
            var sprayChunk = this.sprayChunks[i];
            for (var j = 0, jlen = sprayChunk.length; j < jlen; j++) {
              var rect = new fabric4.Rect({
                width: sprayChunk[j].width,
                height: sprayChunk[j].width,
                left: sprayChunk[j].x + 1,
                top: sprayChunk[j].y + 1,
                originX: "center",
                originY: "center",
                fill: this.color
              });
              rects.push(rect);
            }
          }
          if (this.optimizeOverlapping) {
            rects = this._getOptimizedRects(rects);
          }
          var group = new fabric4.Group(rects);
          this.shadow && group.set("shadow", new fabric4.Shadow(this.shadow));
          this.canvas.fire("before:path:created", { path: group });
          this.canvas.add(group);
          this.canvas.fire("path:created", { path: group });
          this.canvas.clearContext(this.canvas.contextTop);
          this._resetShadow();
          this.canvas.renderOnAddRemove = originalRenderOnAddRemove;
          this.canvas.requestRenderAll();
        },
        _getOptimizedRects: function(rects) {
          var uniqueRects = {}, key, i, len;
          for (i = 0, len = rects.length; i < len; i++) {
            key = rects[i].left + "" + rects[i].top;
            if (!uniqueRects[key]) {
              uniqueRects[key] = rects[i];
            }
          }
          var uniqueRectsArray = [];
          for (key in uniqueRects) {
            uniqueRectsArray.push(uniqueRects[key]);
          }
          return uniqueRectsArray;
        },
        render: function(sprayChunk) {
          var ctx = this.canvas.contextTop, i, len;
          ctx.fillStyle = this.color;
          this._saveAndTransform(ctx);
          for (i = 0, len = sprayChunk.length; i < len; i++) {
            var point = sprayChunk[i];
            if (typeof point.opacity !== "undefined") {
              ctx.globalAlpha = point.opacity;
            }
            ctx.fillRect(point.x, point.y, point.width, point.width);
          }
          ctx.restore();
        },
        _render: function() {
          var ctx = this.canvas.contextTop, i, ilen;
          ctx.fillStyle = this.color;
          this._saveAndTransform(ctx);
          for (i = 0, ilen = this.sprayChunks.length; i < ilen; i++) {
            this.render(this.sprayChunks[i]);
          }
          ctx.restore();
        },
        addSprayChunk: function(pointer) {
          this.sprayChunkPoints = [];
          var x, y, width2, radius = this.width / 2, i;
          for (i = 0; i < this.density; i++) {
            x = fabric4.util.getRandomInt(pointer.x - radius, pointer.x + radius);
            y = fabric4.util.getRandomInt(pointer.y - radius, pointer.y + radius);
            if (this.dotWidthVariance) {
              width2 = fabric4.util.getRandomInt(Math.max(1, this.dotWidth - this.dotWidthVariance), this.dotWidth + this.dotWidthVariance);
            } else {
              width2 = this.dotWidth;
            }
            var point = new fabric4.Point(x, y);
            point.width = width2;
            if (this.randomOpacity) {
              point.opacity = fabric4.util.getRandomInt(0, 100) / 100;
            }
            this.sprayChunkPoints.push(point);
          }
          this.sprayChunks.push(this.sprayChunkPoints);
        }
      });
      fabric4.PatternBrush = fabric4.util.createClass(fabric4.PencilBrush, {
        getPatternSrc: function() {
          var dotWidth = 20, dotDistance = 5, patternCanvas = fabric4.util.createCanvasElement(), patternCtx = patternCanvas.getContext("2d");
          patternCanvas.width = patternCanvas.height = dotWidth + dotDistance;
          patternCtx.fillStyle = this.color;
          patternCtx.beginPath();
          patternCtx.arc(dotWidth / 2, dotWidth / 2, dotWidth / 2, 0, Math.PI * 2, false);
          patternCtx.closePath();
          patternCtx.fill();
          return patternCanvas;
        },
        getPatternSrcFunction: function() {
          return String(this.getPatternSrc).replace("this.color", '"' + this.color + '"');
        },
        getPattern: function() {
          return this.canvas.contextTop.createPattern(this.source || this.getPatternSrc(), "repeat");
        },
        _setBrushStyles: function() {
          this.callSuper("_setBrushStyles");
          this.canvas.contextTop.strokeStyle = this.getPattern();
        },
        createPath: function(pathData) {
          var path = this.callSuper("createPath", pathData), topLeft = path._getLeftTopCoords().scalarAdd(path.strokeWidth / 2);
          path.stroke = new fabric4.Pattern({
            source: this.source || this.getPatternSrcFunction(),
            offsetX: -topLeft.x,
            offsetY: -topLeft.y
          });
          return path;
        }
      });
      (function() {
        var getPointer = fabric4.util.getPointer, degreesToRadians = fabric4.util.degreesToRadians, isTouchEvent = fabric4.util.isTouchEvent;
        fabric4.Canvas = fabric4.util.createClass(fabric4.StaticCanvas, {
          initialize: function(el, options) {
            options || (options = {});
            this.renderAndResetBound = this.renderAndReset.bind(this);
            this.requestRenderAllBound = this.requestRenderAll.bind(this);
            this._initStatic(el, options);
            this._initInteractive();
            this._createCacheCanvas();
          },
          uniformScaling: true,
          uniScaleKey: "shiftKey",
          centeredScaling: false,
          centeredRotation: false,
          centeredKey: "altKey",
          altActionKey: "shiftKey",
          interactive: true,
          selection: true,
          selectionKey: "shiftKey",
          altSelectionKey: null,
          selectionColor: "rgba(100, 100, 255, 0.3)",
          selectionDashArray: [],
          selectionBorderColor: "rgba(255, 255, 255, 0.3)",
          selectionLineWidth: 1,
          selectionFullyContained: false,
          hoverCursor: "move",
          moveCursor: "move",
          defaultCursor: "default",
          freeDrawingCursor: "crosshair",
          rotationCursor: "crosshair",
          notAllowedCursor: "not-allowed",
          containerClass: "canvas-container",
          perPixelTargetFind: false,
          targetFindTolerance: 0,
          skipTargetFind: false,
          isDrawingMode: false,
          preserveObjectStacking: false,
          snapAngle: 0,
          snapThreshold: null,
          stopContextMenu: false,
          fireRightClick: false,
          fireMiddleClick: false,
          targets: [],
          _hoveredTarget: null,
          _hoveredTargets: [],
          _initInteractive: function() {
            this._currentTransform = null;
            this._groupSelector = null;
            this._initWrapperElement();
            this._createUpperCanvas();
            this._initEventListeners();
            this._initRetinaScaling();
            this.freeDrawingBrush = fabric4.PencilBrush && new fabric4.PencilBrush(this);
            this.calcOffset();
          },
          _chooseObjectsToRender: function() {
            var activeObjects = this.getActiveObjects(), object, objsToRender, activeGroupObjects;
            if (activeObjects.length > 0 && !this.preserveObjectStacking) {
              objsToRender = [];
              activeGroupObjects = [];
              for (var i = 0, length2 = this._objects.length; i < length2; i++) {
                object = this._objects[i];
                if (activeObjects.indexOf(object) === -1) {
                  objsToRender.push(object);
                } else {
                  activeGroupObjects.push(object);
                }
              }
              if (activeObjects.length > 1) {
                this._activeObject._objects = activeGroupObjects;
              }
              objsToRender.push.apply(objsToRender, activeGroupObjects);
            } else {
              objsToRender = this._objects;
            }
            return objsToRender;
          },
          renderAll: function() {
            if (this.contextTopDirty && !this._groupSelector && !this.isDrawingMode) {
              this.clearContext(this.contextTop);
              this.contextTopDirty = false;
            }
            if (this.hasLostContext) {
              this.renderTopLayer(this.contextTop);
            }
            var canvasToDrawOn = this.contextContainer;
            this.renderCanvas(canvasToDrawOn, this._chooseObjectsToRender());
            return this;
          },
          renderTopLayer: function(ctx) {
            ctx.save();
            if (this.isDrawingMode && this._isCurrentlyDrawing) {
              this.freeDrawingBrush && this.freeDrawingBrush._render();
              this.contextTopDirty = true;
            }
            if (this.selection && this._groupSelector) {
              this._drawSelection(ctx);
              this.contextTopDirty = true;
            }
            ctx.restore();
          },
          renderTop: function() {
            var ctx = this.contextTop;
            this.clearContext(ctx);
            this.renderTopLayer(ctx);
            this.fire("after:render");
            return this;
          },
          _normalizePointer: function(object, pointer) {
            var m = object.calcTransformMatrix(), invertedM = fabric4.util.invertTransform(m), vptPointer = this.restorePointerVpt(pointer);
            return fabric4.util.transformPoint(vptPointer, invertedM);
          },
          isTargetTransparent: function(target, x, y) {
            if (target.shouldCache() && target._cacheCanvas && target !== this._activeObject) {
              var normalizedPointer = this._normalizePointer(target, { x, y }), targetRelativeX = Math.max(target.cacheTranslationX + normalizedPointer.x * target.zoomX, 0), targetRelativeY = Math.max(target.cacheTranslationY + normalizedPointer.y * target.zoomY, 0);
              var isTransparent = fabric4.util.isTransparent(target._cacheContext, Math.round(targetRelativeX), Math.round(targetRelativeY), this.targetFindTolerance);
              return isTransparent;
            }
            var ctx = this.contextCache, originalColor = target.selectionBackgroundColor, v = this.viewportTransform;
            target.selectionBackgroundColor = "";
            this.clearContext(ctx);
            ctx.save();
            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
            target.render(ctx);
            ctx.restore();
            target.selectionBackgroundColor = originalColor;
            var isTransparent = fabric4.util.isTransparent(ctx, x, y, this.targetFindTolerance);
            return isTransparent;
          },
          _isSelectionKeyPressed: function(e) {
            var selectionKeyPressed = false;
            if (Object.prototype.toString.call(this.selectionKey) === "[object Array]") {
              selectionKeyPressed = !!this.selectionKey.find(function(key) {
                return e[key] === true;
              });
            } else {
              selectionKeyPressed = e[this.selectionKey];
            }
            return selectionKeyPressed;
          },
          _shouldClearSelection: function(e, target) {
            var activeObjects = this.getActiveObjects(), activeObject = this._activeObject;
            return !target || target && activeObject && activeObjects.length > 1 && activeObjects.indexOf(target) === -1 && activeObject !== target && !this._isSelectionKeyPressed(e) || target && !target.evented || target && !target.selectable && activeObject && activeObject !== target;
          },
          _shouldCenterTransform: function(target, action, altKey) {
            if (!target) {
              return;
            }
            var centerTransform;
            if (action === "scale" || action === "scaleX" || action === "scaleY" || action === "resizing") {
              centerTransform = this.centeredScaling || target.centeredScaling;
            } else if (action === "rotate") {
              centerTransform = this.centeredRotation || target.centeredRotation;
            }
            return centerTransform ? !altKey : altKey;
          },
          _getOriginFromCorner: function(target, corner) {
            var origin = {
              x: target.originX,
              y: target.originY
            };
            if (corner === "ml" || corner === "tl" || corner === "bl") {
              origin.x = "right";
            } else if (corner === "mr" || corner === "tr" || corner === "br") {
              origin.x = "left";
            }
            if (corner === "tl" || corner === "mt" || corner === "tr") {
              origin.y = "bottom";
            } else if (corner === "bl" || corner === "mb" || corner === "br") {
              origin.y = "top";
            }
            return origin;
          },
          _getActionFromCorner: function(alreadySelected, corner, e, target) {
            if (!corner || !alreadySelected) {
              return "drag";
            }
            var control = target.controls[corner];
            return control.getActionName(e, control, target);
          },
          _setupCurrentTransform: function(e, target, alreadySelected) {
            if (!target) {
              return;
            }
            var pointer = this.getPointer(e), corner = target.__corner, control = target.controls[corner], actionHandler = alreadySelected && corner ? control.getActionHandler(e, target, control) : fabric4.controlsUtils.dragHandler, action = this._getActionFromCorner(alreadySelected, corner, e, target), origin = this._getOriginFromCorner(target, corner), altKey = e[this.centeredKey], transform2 = {
              target,
              action,
              actionHandler,
              corner,
              scaleX: target.scaleX,
              scaleY: target.scaleY,
              skewX: target.skewX,
              skewY: target.skewY,
              offsetX: pointer.x - target.left,
              offsetY: pointer.y - target.top,
              originX: origin.x,
              originY: origin.y,
              ex: pointer.x,
              ey: pointer.y,
              lastX: pointer.x,
              lastY: pointer.y,
              theta: degreesToRadians(target.angle),
              width: target.width * target.scaleX,
              shiftKey: e.shiftKey,
              altKey,
              original: fabric4.util.saveObjectTransform(target)
            };
            if (this._shouldCenterTransform(target, action, altKey)) {
              transform2.originX = "center";
              transform2.originY = "center";
            }
            transform2.original.originX = origin.x;
            transform2.original.originY = origin.y;
            this._currentTransform = transform2;
            this._beforeTransform(e);
          },
          setCursor: function(value) {
            this.upperCanvasEl.style.cursor = value;
          },
          _drawSelection: function(ctx) {
            var selector = this._groupSelector, viewportStart = new fabric4.Point(selector.ex, selector.ey), start = fabric4.util.transformPoint(viewportStart, this.viewportTransform), viewportExtent = new fabric4.Point(selector.ex + selector.left, selector.ey + selector.top), extent = fabric4.util.transformPoint(viewportExtent, this.viewportTransform), minX = Math.min(start.x, extent.x), minY = Math.min(start.y, extent.y), maxX = Math.max(start.x, extent.x), maxY = Math.max(start.y, extent.y), strokeOffset = this.selectionLineWidth / 2;
            if (this.selectionColor) {
              ctx.fillStyle = this.selectionColor;
              ctx.fillRect(minX, minY, maxX - minX, maxY - minY);
            }
            if (!this.selectionLineWidth || !this.selectionBorderColor) {
              return;
            }
            ctx.lineWidth = this.selectionLineWidth;
            ctx.strokeStyle = this.selectionBorderColor;
            minX += strokeOffset;
            minY += strokeOffset;
            maxX -= strokeOffset;
            maxY -= strokeOffset;
            fabric4.Object.prototype._setLineDash.call(this, ctx, this.selectionDashArray);
            ctx.strokeRect(minX, minY, maxX - minX, maxY - minY);
          },
          findTarget: function(e, skipGroup) {
            if (this.skipTargetFind) {
              return;
            }
            var ignoreZoom = true, pointer = this.getPointer(e, ignoreZoom), activeObject = this._activeObject, aObjects = this.getActiveObjects(), activeTarget, activeTargetSubs, isTouch = isTouchEvent(e), shouldLookForActive = aObjects.length > 1 && !skipGroup || aObjects.length === 1;
            this.targets = [];
            if (shouldLookForActive && activeObject._findTargetCorner(pointer, isTouch)) {
              return activeObject;
            }
            if (aObjects.length > 1 && !skipGroup && activeObject === this._searchPossibleTargets([activeObject], pointer)) {
              return activeObject;
            }
            if (aObjects.length === 1 && activeObject === this._searchPossibleTargets([activeObject], pointer)) {
              if (!this.preserveObjectStacking) {
                return activeObject;
              } else {
                activeTarget = activeObject;
                activeTargetSubs = this.targets;
                this.targets = [];
              }
            }
            var target = this._searchPossibleTargets(this._objects, pointer);
            if (e[this.altSelectionKey] && target && activeTarget && target !== activeTarget) {
              target = activeTarget;
              this.targets = activeTargetSubs;
            }
            return target;
          },
          _checkTarget: function(pointer, obj, globalPointer) {
            if (obj && obj.visible && obj.evented && obj.containsPoint(pointer)) {
              if ((this.perPixelTargetFind || obj.perPixelTargetFind) && !obj.isEditing) {
                var isTransparent = this.isTargetTransparent(obj, globalPointer.x, globalPointer.y);
                if (!isTransparent) {
                  return true;
                }
              } else {
                return true;
              }
            }
          },
          _searchPossibleTargets: function(objects, pointer) {
            var target, i = objects.length, subTarget;
            while (i--) {
              var objToCheck = objects[i];
              var pointerToUse = objToCheck.group ? this._normalizePointer(objToCheck.group, pointer) : pointer;
              if (this._checkTarget(pointerToUse, objToCheck, pointer)) {
                target = objects[i];
                if (target.subTargetCheck && target instanceof fabric4.Group) {
                  subTarget = this._searchPossibleTargets(target._objects, pointer);
                  subTarget && this.targets.push(subTarget);
                }
                break;
              }
            }
            return target;
          },
          restorePointerVpt: function(pointer) {
            return fabric4.util.transformPoint(pointer, fabric4.util.invertTransform(this.viewportTransform));
          },
          getPointer: function(e, ignoreZoom) {
            if (this._absolutePointer && !ignoreZoom) {
              return this._absolutePointer;
            }
            if (this._pointer && ignoreZoom) {
              return this._pointer;
            }
            var pointer = getPointer(e), upperCanvasEl = this.upperCanvasEl, bounds = upperCanvasEl.getBoundingClientRect(), boundsWidth = bounds.width || 0, boundsHeight = bounds.height || 0, cssScale;
            if (!boundsWidth || !boundsHeight) {
              if ("top" in bounds && "bottom" in bounds) {
                boundsHeight = Math.abs(bounds.top - bounds.bottom);
              }
              if ("right" in bounds && "left" in bounds) {
                boundsWidth = Math.abs(bounds.right - bounds.left);
              }
            }
            this.calcOffset();
            pointer.x = pointer.x - this._offset.left;
            pointer.y = pointer.y - this._offset.top;
            if (!ignoreZoom) {
              pointer = this.restorePointerVpt(pointer);
            }
            var retinaScaling = this.getRetinaScaling();
            if (retinaScaling !== 1) {
              pointer.x /= retinaScaling;
              pointer.y /= retinaScaling;
            }
            if (boundsWidth === 0 || boundsHeight === 0) {
              cssScale = { width: 1, height: 1 };
            } else {
              cssScale = {
                width: upperCanvasEl.width / boundsWidth,
                height: upperCanvasEl.height / boundsHeight
              };
            }
            return {
              x: pointer.x * cssScale.width,
              y: pointer.y * cssScale.height
            };
          },
          _createUpperCanvas: function() {
            var lowerCanvasClass = this.lowerCanvasEl.className.replace(/\s*lower-canvas\s*/, ""), lowerCanvasEl = this.lowerCanvasEl, upperCanvasEl = this.upperCanvasEl;
            if (upperCanvasEl) {
              upperCanvasEl.className = "";
            } else {
              upperCanvasEl = this._createCanvasElement();
              this.upperCanvasEl = upperCanvasEl;
            }
            fabric4.util.addClass(upperCanvasEl, "upper-canvas " + lowerCanvasClass);
            this.wrapperEl.appendChild(upperCanvasEl);
            this._copyCanvasStyle(lowerCanvasEl, upperCanvasEl);
            this._applyCanvasStyle(upperCanvasEl);
            this.contextTop = upperCanvasEl.getContext("2d");
          },
          _createCacheCanvas: function() {
            this.cacheCanvasEl = this._createCanvasElement();
            this.cacheCanvasEl.setAttribute("width", this.width);
            this.cacheCanvasEl.setAttribute("height", this.height);
            this.contextCache = this.cacheCanvasEl.getContext("2d");
          },
          _initWrapperElement: function() {
            this.wrapperEl = fabric4.util.wrapElement(this.lowerCanvasEl, "div", {
              "class": this.containerClass
            });
            fabric4.util.setStyle(this.wrapperEl, {
              width: this.width + "px",
              height: this.height + "px",
              position: "relative"
            });
            fabric4.util.makeElementUnselectable(this.wrapperEl);
          },
          _applyCanvasStyle: function(element) {
            var width2 = this.width || element.width, height2 = this.height || element.height;
            fabric4.util.setStyle(element, {
              position: "absolute",
              width: width2 + "px",
              height: height2 + "px",
              left: 0,
              top: 0,
              "touch-action": this.allowTouchScrolling ? "manipulation" : "none",
              "-ms-touch-action": this.allowTouchScrolling ? "manipulation" : "none"
            });
            element.width = width2;
            element.height = height2;
            fabric4.util.makeElementUnselectable(element);
          },
          _copyCanvasStyle: function(fromEl, toEl) {
            toEl.style.cssText = fromEl.style.cssText;
          },
          getSelectionContext: function() {
            return this.contextTop;
          },
          getSelectionElement: function() {
            return this.upperCanvasEl;
          },
          getActiveObject: function() {
            return this._activeObject;
          },
          getActiveObjects: function() {
            var active = this._activeObject;
            if (active) {
              if (active.type === "activeSelection" && active._objects) {
                return active._objects.slice(0);
              } else {
                return [active];
              }
            }
            return [];
          },
          _onObjectRemoved: function(obj) {
            if (obj === this._activeObject) {
              this.fire("before:selection:cleared", { target: obj });
              this._discardActiveObject();
              this.fire("selection:cleared", { target: obj });
              obj.fire("deselected");
            }
            if (obj === this._hoveredTarget) {
              this._hoveredTarget = null;
              this._hoveredTargets = [];
            }
            this.callSuper("_onObjectRemoved", obj);
          },
          _fireSelectionEvents: function(oldObjects, e) {
            var somethingChanged = false, objects = this.getActiveObjects(), added = [], removed = [];
            oldObjects.forEach(function(oldObject) {
              if (objects.indexOf(oldObject) === -1) {
                somethingChanged = true;
                oldObject.fire("deselected", {
                  e,
                  target: oldObject
                });
                removed.push(oldObject);
              }
            });
            objects.forEach(function(object) {
              if (oldObjects.indexOf(object) === -1) {
                somethingChanged = true;
                object.fire("selected", {
                  e,
                  target: object
                });
                added.push(object);
              }
            });
            if (oldObjects.length > 0 && objects.length > 0) {
              somethingChanged && this.fire("selection:updated", {
                e,
                selected: added,
                deselected: removed,
                updated: added[0] || removed[0],
                target: this._activeObject
              });
            } else if (objects.length > 0) {
              this.fire("selection:created", {
                e,
                selected: added,
                target: this._activeObject
              });
            } else if (oldObjects.length > 0) {
              this.fire("selection:cleared", {
                e,
                deselected: removed
              });
            }
          },
          setActiveObject: function(object, e) {
            var currentActives = this.getActiveObjects();
            this._setActiveObject(object, e);
            this._fireSelectionEvents(currentActives, e);
            return this;
          },
          _setActiveObject: function(object, e) {
            if (this._activeObject === object) {
              return false;
            }
            if (!this._discardActiveObject(e, object)) {
              return false;
            }
            if (object.onSelect({ e })) {
              return false;
            }
            this._activeObject = object;
            return true;
          },
          _discardActiveObject: function(e, object) {
            var obj = this._activeObject;
            if (obj) {
              if (obj.onDeselect({ e, object })) {
                return false;
              }
              this._activeObject = null;
            }
            return true;
          },
          discardActiveObject: function(e) {
            var currentActives = this.getActiveObjects(), activeObject = this.getActiveObject();
            if (currentActives.length) {
              this.fire("before:selection:cleared", { target: activeObject, e });
            }
            this._discardActiveObject(e);
            this._fireSelectionEvents(currentActives, e);
            return this;
          },
          dispose: function() {
            var wrapper = this.wrapperEl;
            this.removeListeners();
            wrapper.removeChild(this.upperCanvasEl);
            wrapper.removeChild(this.lowerCanvasEl);
            this.contextCache = null;
            this.contextTop = null;
            ["upperCanvasEl", "cacheCanvasEl"].forEach(function(element) {
              fabric4.util.cleanUpJsdomNode(this[element]);
              this[element] = void 0;
            }.bind(this));
            if (wrapper.parentNode) {
              wrapper.parentNode.replaceChild(this.lowerCanvasEl, this.wrapperEl);
            }
            delete this.wrapperEl;
            fabric4.StaticCanvas.prototype.dispose.call(this);
            return this;
          },
          clear: function() {
            this.discardActiveObject();
            this.clearContext(this.contextTop);
            return this.callSuper("clear");
          },
          drawControls: function(ctx) {
            var activeObject = this._activeObject;
            if (activeObject) {
              activeObject._renderControls(ctx);
            }
          },
          _toObject: function(instance, methodName, propertiesToInclude) {
            var originalProperties = this._realizeGroupTransformOnObject(instance), object = this.callSuper("_toObject", instance, methodName, propertiesToInclude);
            this._unwindGroupTransformOnObject(instance, originalProperties);
            return object;
          },
          _realizeGroupTransformOnObject: function(instance) {
            if (instance.group && instance.group.type === "activeSelection" && this._activeObject === instance.group) {
              var layoutProps = ["angle", "flipX", "flipY", "left", "scaleX", "scaleY", "skewX", "skewY", "top"];
              var originalValues = {};
              layoutProps.forEach(function(prop2) {
                originalValues[prop2] = instance[prop2];
              });
              fabric4.util.addTransformToObject(instance, this._activeObject.calcOwnMatrix());
              return originalValues;
            } else {
              return null;
            }
          },
          _unwindGroupTransformOnObject: function(instance, originalValues) {
            if (originalValues) {
              instance.set(originalValues);
            }
          },
          _setSVGObject: function(markup, instance, reviver) {
            var originalProperties = this._realizeGroupTransformOnObject(instance);
            this.callSuper("_setSVGObject", markup, instance, reviver);
            this._unwindGroupTransformOnObject(instance, originalProperties);
          },
          setViewportTransform: function(vpt) {
            if (this.renderOnAddRemove && this._activeObject && this._activeObject.isEditing) {
              this._activeObject.clearContextTop();
            }
            fabric4.StaticCanvas.prototype.setViewportTransform.call(this, vpt);
          }
        });
        for (var prop in fabric4.StaticCanvas) {
          if (prop !== "prototype") {
            fabric4.Canvas[prop] = fabric4.StaticCanvas[prop];
          }
        }
      })();
      (function() {
        var addListener = fabric4.util.addListener, removeListener = fabric4.util.removeListener, RIGHT_CLICK = 3, MIDDLE_CLICK = 2, LEFT_CLICK = 1, addEventOptions = { passive: false };
        function checkClick(e, value) {
          return e.button && e.button === value - 1;
        }
        fabric4.util.object.extend(fabric4.Canvas.prototype, {
          mainTouchId: null,
          _initEventListeners: function() {
            this.removeListeners();
            this._bindEvents();
            this.addOrRemove(addListener, "add");
          },
          _getEventPrefix: function() {
            return this.enablePointerEvents ? "pointer" : "mouse";
          },
          addOrRemove: function(functor, eventjsFunctor) {
            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
            functor(fabric4.window, "resize", this._onResize);
            functor(canvasElement, eventTypePrefix + "down", this._onMouseDown);
            functor(canvasElement, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
            functor(canvasElement, eventTypePrefix + "out", this._onMouseOut);
            functor(canvasElement, eventTypePrefix + "enter", this._onMouseEnter);
            functor(canvasElement, "wheel", this._onMouseWheel);
            functor(canvasElement, "contextmenu", this._onContextMenu);
            functor(canvasElement, "dblclick", this._onDoubleClick);
            functor(canvasElement, "dragover", this._onDragOver);
            functor(canvasElement, "dragenter", this._onDragEnter);
            functor(canvasElement, "dragleave", this._onDragLeave);
            functor(canvasElement, "drop", this._onDrop);
            if (!this.enablePointerEvents) {
              functor(canvasElement, "touchstart", this._onTouchStart, addEventOptions);
            }
            if (typeof eventjs !== "undefined" && eventjsFunctor in eventjs) {
              eventjs[eventjsFunctor](canvasElement, "gesture", this._onGesture);
              eventjs[eventjsFunctor](canvasElement, "drag", this._onDrag);
              eventjs[eventjsFunctor](canvasElement, "orientation", this._onOrientationChange);
              eventjs[eventjsFunctor](canvasElement, "shake", this._onShake);
              eventjs[eventjsFunctor](canvasElement, "longpress", this._onLongPress);
            }
          },
          removeListeners: function() {
            this.addOrRemove(removeListener, "remove");
            var eventTypePrefix = this._getEventPrefix();
            removeListener(fabric4.document, eventTypePrefix + "up", this._onMouseUp);
            removeListener(fabric4.document, "touchend", this._onTouchEnd, addEventOptions);
            removeListener(fabric4.document, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
            removeListener(fabric4.document, "touchmove", this._onMouseMove, addEventOptions);
          },
          _bindEvents: function() {
            if (this.eventsBound) {
              return;
            }
            this._onMouseDown = this._onMouseDown.bind(this);
            this._onTouchStart = this._onTouchStart.bind(this);
            this._onMouseMove = this._onMouseMove.bind(this);
            this._onMouseUp = this._onMouseUp.bind(this);
            this._onTouchEnd = this._onTouchEnd.bind(this);
            this._onResize = this._onResize.bind(this);
            this._onGesture = this._onGesture.bind(this);
            this._onDrag = this._onDrag.bind(this);
            this._onShake = this._onShake.bind(this);
            this._onLongPress = this._onLongPress.bind(this);
            this._onOrientationChange = this._onOrientationChange.bind(this);
            this._onMouseWheel = this._onMouseWheel.bind(this);
            this._onMouseOut = this._onMouseOut.bind(this);
            this._onMouseEnter = this._onMouseEnter.bind(this);
            this._onContextMenu = this._onContextMenu.bind(this);
            this._onDoubleClick = this._onDoubleClick.bind(this);
            this._onDragOver = this._onDragOver.bind(this);
            this._onDragEnter = this._simpleEventHandler.bind(this, "dragenter");
            this._onDragLeave = this._simpleEventHandler.bind(this, "dragleave");
            this._onDrop = this._simpleEventHandler.bind(this, "drop");
            this.eventsBound = true;
          },
          _onGesture: function(e, self) {
            this.__onTransformGesture && this.__onTransformGesture(e, self);
          },
          _onDrag: function(e, self) {
            this.__onDrag && this.__onDrag(e, self);
          },
          _onMouseWheel: function(e) {
            this.__onMouseWheel(e);
          },
          _onMouseOut: function(e) {
            var target = this._hoveredTarget;
            this.fire("mouse:out", { target, e });
            this._hoveredTarget = null;
            target && target.fire("mouseout", { e });
            var _this = this;
            this._hoveredTargets.forEach(function(_target) {
              _this.fire("mouse:out", { target, e });
              _target && target.fire("mouseout", { e });
            });
            this._hoveredTargets = [];
            if (this._iTextInstances) {
              this._iTextInstances.forEach(function(obj) {
                if (obj.isEditing) {
                  obj.hiddenTextarea.focus();
                }
              });
            }
          },
          _onMouseEnter: function(e) {
            if (!this._currentTransform && !this.findTarget(e)) {
              this.fire("mouse:over", { target: null, e });
              this._hoveredTarget = null;
              this._hoveredTargets = [];
            }
          },
          _onOrientationChange: function(e, self) {
            this.__onOrientationChange && this.__onOrientationChange(e, self);
          },
          _onShake: function(e, self) {
            this.__onShake && this.__onShake(e, self);
          },
          _onLongPress: function(e, self) {
            this.__onLongPress && this.__onLongPress(e, self);
          },
          _onDragOver: function(e) {
            e.preventDefault();
            var target = this._simpleEventHandler("dragover", e);
            this._fireEnterLeaveEvents(target, e);
          },
          _onContextMenu: function(e) {
            if (this.stopContextMenu) {
              e.stopPropagation();
              e.preventDefault();
            }
            return false;
          },
          _onDoubleClick: function(e) {
            this._cacheTransformEventData(e);
            this._handleEvent(e, "dblclick");
            this._resetTransformEventData(e);
          },
          getPointerId: function(evt) {
            var changedTouches = evt.changedTouches;
            if (changedTouches) {
              return changedTouches[0] && changedTouches[0].identifier;
            }
            if (this.enablePointerEvents) {
              return evt.pointerId;
            }
            return -1;
          },
          _isMainEvent: function(evt) {
            if (evt.isPrimary === true) {
              return true;
            }
            if (evt.isPrimary === false) {
              return false;
            }
            if (evt.type === "touchend" && evt.touches.length === 0) {
              return true;
            }
            if (evt.changedTouches) {
              return evt.changedTouches[0].identifier === this.mainTouchId;
            }
            return true;
          },
          _onTouchStart: function(e) {
            e.preventDefault();
            if (this.mainTouchId === null) {
              this.mainTouchId = this.getPointerId(e);
            }
            this.__onMouseDown(e);
            this._resetTransformEventData();
            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
            addListener(fabric4.document, "touchend", this._onTouchEnd, addEventOptions);
            addListener(fabric4.document, "touchmove", this._onMouseMove, addEventOptions);
            removeListener(canvasElement, eventTypePrefix + "down", this._onMouseDown);
          },
          _onMouseDown: function(e) {
            this.__onMouseDown(e);
            this._resetTransformEventData();
            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
            removeListener(canvasElement, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
            addListener(fabric4.document, eventTypePrefix + "up", this._onMouseUp);
            addListener(fabric4.document, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
          },
          _onTouchEnd: function(e) {
            if (e.touches.length > 0) {
              return;
            }
            this.__onMouseUp(e);
            this._resetTransformEventData();
            this.mainTouchId = null;
            var eventTypePrefix = this._getEventPrefix();
            removeListener(fabric4.document, "touchend", this._onTouchEnd, addEventOptions);
            removeListener(fabric4.document, "touchmove", this._onMouseMove, addEventOptions);
            var _this = this;
            if (this._willAddMouseDown) {
              clearTimeout(this._willAddMouseDown);
            }
            this._willAddMouseDown = setTimeout(function() {
              addListener(_this.upperCanvasEl, eventTypePrefix + "down", _this._onMouseDown);
              _this._willAddMouseDown = 0;
            }, 400);
          },
          _onMouseUp: function(e) {
            this.__onMouseUp(e);
            this._resetTransformEventData();
            var canvasElement = this.upperCanvasEl, eventTypePrefix = this._getEventPrefix();
            if (this._isMainEvent(e)) {
              removeListener(fabric4.document, eventTypePrefix + "up", this._onMouseUp);
              removeListener(fabric4.document, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
              addListener(canvasElement, eventTypePrefix + "move", this._onMouseMove, addEventOptions);
            }
          },
          _onMouseMove: function(e) {
            !this.allowTouchScrolling && e.preventDefault && e.preventDefault();
            this.__onMouseMove(e);
          },
          _onResize: function() {
            this.calcOffset();
          },
          _shouldRender: function(target) {
            var activeObject = this._activeObject;
            if (!!activeObject !== !!target || activeObject && target && activeObject !== target) {
              return true;
            } else if (activeObject && activeObject.isEditing) {
              return false;
            }
            return false;
          },
          __onMouseUp: function(e) {
            var target, transform2 = this._currentTransform, groupSelector = this._groupSelector, shouldRender = false, isClick = !groupSelector || groupSelector.left === 0 && groupSelector.top === 0;
            this._cacheTransformEventData(e);
            target = this._target;
            this._handleEvent(e, "up:before");
            if (checkClick(e, RIGHT_CLICK)) {
              if (this.fireRightClick) {
                this._handleEvent(e, "up", RIGHT_CLICK, isClick);
              }
              return;
            }
            if (checkClick(e, MIDDLE_CLICK)) {
              if (this.fireMiddleClick) {
                this._handleEvent(e, "up", MIDDLE_CLICK, isClick);
              }
              this._resetTransformEventData();
              return;
            }
            if (this.isDrawingMode && this._isCurrentlyDrawing) {
              this._onMouseUpInDrawingMode(e);
              return;
            }
            if (!this._isMainEvent(e)) {
              return;
            }
            if (transform2) {
              this._finalizeCurrentTransform(e);
              shouldRender = transform2.actionPerformed;
            }
            if (!isClick) {
              var targetWasActive = target === this._activeObject;
              this._maybeGroupObjects(e);
              if (!shouldRender) {
                shouldRender = this._shouldRender(target) || !targetWasActive && target === this._activeObject;
              }
            }
            if (target) {
              if (target.selectable && target !== this._activeObject && target.activeOn === "up") {
                this.setActiveObject(target, e);
                shouldRender = true;
              } else {
                var corner = target._findTargetCorner(this.getPointer(e, true), fabric4.util.isTouchEvent(e));
                var control = target.controls[corner], mouseUpHandler = control && control.getMouseUpHandler(e, target, control);
                if (mouseUpHandler) {
                  var pointer = this.getPointer(e);
                  mouseUpHandler(e, transform2, pointer.x, pointer.y);
                }
              }
              target.isMoving = false;
            }
            this._setCursorFromEvent(e, target);
            this._handleEvent(e, "up", LEFT_CLICK, isClick);
            this._groupSelector = null;
            this._currentTransform = null;
            target && (target.__corner = 0);
            if (shouldRender) {
              this.requestRenderAll();
            } else if (!isClick) {
              this.renderTop();
            }
          },
          _simpleEventHandler: function(eventType, e) {
            var target = this.findTarget(e), targets = this.targets, options = {
              e,
              target,
              subTargets: targets
            };
            this.fire(eventType, options);
            target && target.fire(eventType, options);
            if (!targets) {
              return target;
            }
            for (var i = 0; i < targets.length; i++) {
              targets[i].fire(eventType, options);
            }
            return target;
          },
          _handleEvent: function(e, eventType, button, isClick) {
            var target = this._target, targets = this.targets || [], options = {
              e,
              target,
              subTargets: targets,
              button: button || LEFT_CLICK,
              isClick: isClick || false,
              pointer: this._pointer,
              absolutePointer: this._absolutePointer,
              transform: this._currentTransform
            };
            if (eventType === "up") {
              options.currentTarget = this.findTarget(e);
              options.currentSubTargets = this.targets;
            }
            this.fire("mouse:" + eventType, options);
            target && target.fire("mouse" + eventType, options);
            for (var i = 0; i < targets.length; i++) {
              targets[i].fire("mouse" + eventType, options);
            }
          },
          _finalizeCurrentTransform: function(e) {
            var transform2 = this._currentTransform, target = transform2.target, eventName, options = {
              e,
              target,
              transform: transform2,
              action: transform2.action
            };
            if (target._scaling) {
              target._scaling = false;
            }
            target.setCoords();
            if (transform2.actionPerformed || this.stateful && target.hasStateChanged()) {
              if (transform2.actionPerformed) {
                eventName = this._addEventOptions(options, transform2);
                this._fire(eventName, options);
              }
              this._fire("modified", options);
            }
          },
          _addEventOptions: function(options, transform2) {
            var eventName, by;
            switch (transform2.action) {
              case "scaleX":
                eventName = "scaled";
                by = "x";
                break;
              case "scaleY":
                eventName = "scaled";
                by = "y";
                break;
              case "skewX":
                eventName = "skewed";
                by = "x";
                break;
              case "skewY":
                eventName = "skewed";
                by = "y";
                break;
              case "scale":
                eventName = "scaled";
                by = "equally";
                break;
              case "rotate":
                eventName = "rotated";
                break;
              case "drag":
                eventName = "moved";
                break;
            }
            options.by = by;
            return eventName;
          },
          _onMouseDownInDrawingMode: function(e) {
            this._isCurrentlyDrawing = true;
            if (this.getActiveObject()) {
              this.discardActiveObject(e).requestRenderAll();
            }
            var pointer = this.getPointer(e);
            this.freeDrawingBrush.onMouseDown(pointer, { e, pointer });
            this._handleEvent(e, "down");
          },
          _onMouseMoveInDrawingMode: function(e) {
            if (this._isCurrentlyDrawing) {
              var pointer = this.getPointer(e);
              this.freeDrawingBrush.onMouseMove(pointer, { e, pointer });
            }
            this.setCursor(this.freeDrawingCursor);
            this._handleEvent(e, "move");
          },
          _onMouseUpInDrawingMode: function(e) {
            var pointer = this.getPointer(e);
            this._isCurrentlyDrawing = this.freeDrawingBrush.onMouseUp({ e, pointer });
            this._handleEvent(e, "up");
          },
          __onMouseDown: function(e) {
            this._cacheTransformEventData(e);
            this._handleEvent(e, "down:before");
            var target = this._target;
            if (checkClick(e, RIGHT_CLICK)) {
              if (this.fireRightClick) {
                this._handleEvent(e, "down", RIGHT_CLICK);
              }
              return;
            }
            if (checkClick(e, MIDDLE_CLICK)) {
              if (this.fireMiddleClick) {
                this._handleEvent(e, "down", MIDDLE_CLICK);
              }
              return;
            }
            if (this.isDrawingMode) {
              this._onMouseDownInDrawingMode(e);
              return;
            }
            if (!this._isMainEvent(e)) {
              return;
            }
            if (this._currentTransform) {
              return;
            }
            var pointer = this._pointer;
            this._previousPointer = pointer;
            var shouldRender = this._shouldRender(target), shouldGroup = this._shouldGroup(e, target);
            if (this._shouldClearSelection(e, target)) {
              this.discardActiveObject(e);
            } else if (shouldGroup) {
              this._handleGrouping(e, target);
              target = this._activeObject;
            }
            if (this.selection && (!target || !target.selectable && !target.isEditing && target !== this._activeObject)) {
              this._groupSelector = {
                ex: this._absolutePointer.x,
                ey: this._absolutePointer.y,
                top: 0,
                left: 0
              };
            }
            if (target) {
              var alreadySelected = target === this._activeObject;
              if (target.selectable && target.activeOn === "down") {
                this.setActiveObject(target, e);
              }
              var corner = target._findTargetCorner(this.getPointer(e, true), fabric4.util.isTouchEvent(e));
              target.__corner = corner;
              if (target === this._activeObject && (corner || !shouldGroup)) {
                this._setupCurrentTransform(e, target, alreadySelected);
                var control = target.controls[corner], pointer = this.getPointer(e), mouseDownHandler = control && control.getMouseDownHandler(e, target, control);
                if (mouseDownHandler) {
                  mouseDownHandler(e, this._currentTransform, pointer.x, pointer.y);
                }
              }
            }
            this._handleEvent(e, "down");
            (shouldRender || shouldGroup) && this.requestRenderAll();
          },
          _resetTransformEventData: function() {
            this._target = null;
            this._pointer = null;
            this._absolutePointer = null;
          },
          _cacheTransformEventData: function(e) {
            this._resetTransformEventData();
            this._pointer = this.getPointer(e, true);
            this._absolutePointer = this.restorePointerVpt(this._pointer);
            this._target = this._currentTransform ? this._currentTransform.target : this.findTarget(e) || null;
          },
          _beforeTransform: function(e) {
            var t = this._currentTransform;
            this.stateful && t.target.saveState();
            this.fire("before:transform", {
              e,
              transform: t
            });
          },
          __onMouseMove: function(e) {
            this._handleEvent(e, "move:before");
            this._cacheTransformEventData(e);
            var target, pointer;
            if (this.isDrawingMode) {
              this._onMouseMoveInDrawingMode(e);
              return;
            }
            if (!this._isMainEvent(e)) {
              return;
            }
            var groupSelector = this._groupSelector;
            if (groupSelector) {
              pointer = this._absolutePointer;
              groupSelector.left = pointer.x - groupSelector.ex;
              groupSelector.top = pointer.y - groupSelector.ey;
              this.renderTop();
            } else if (!this._currentTransform) {
              target = this.findTarget(e) || null;
              this._setCursorFromEvent(e, target);
              this._fireOverOutEvents(target, e);
            } else {
              this._transformObject(e);
            }
            this._handleEvent(e, "move");
            this._resetTransformEventData();
          },
          _fireOverOutEvents: function(target, e) {
            var _hoveredTarget = this._hoveredTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length2 = Math.max(_hoveredTargets.length, targets.length);
            this.fireSyntheticInOutEvents(target, e, {
              oldTarget: _hoveredTarget,
              evtOut: "mouseout",
              canvasEvtOut: "mouse:out",
              evtIn: "mouseover",
              canvasEvtIn: "mouse:over"
            });
            for (var i = 0; i < length2; i++) {
              this.fireSyntheticInOutEvents(targets[i], e, {
                oldTarget: _hoveredTargets[i],
                evtOut: "mouseout",
                evtIn: "mouseover"
              });
            }
            this._hoveredTarget = target;
            this._hoveredTargets = this.targets.concat();
          },
          _fireEnterLeaveEvents: function(target, e) {
            var _draggedoverTarget = this._draggedoverTarget, _hoveredTargets = this._hoveredTargets, targets = this.targets, length2 = Math.max(_hoveredTargets.length, targets.length);
            this.fireSyntheticInOutEvents(target, e, {
              oldTarget: _draggedoverTarget,
              evtOut: "dragleave",
              evtIn: "dragenter"
            });
            for (var i = 0; i < length2; i++) {
              this.fireSyntheticInOutEvents(targets[i], e, {
                oldTarget: _hoveredTargets[i],
                evtOut: "dragleave",
                evtIn: "dragenter"
              });
            }
            this._draggedoverTarget = target;
          },
          fireSyntheticInOutEvents: function(target, e, config) {
            var inOpt, outOpt, oldTarget = config.oldTarget, outFires, inFires, targetChanged = oldTarget !== target, canvasEvtIn = config.canvasEvtIn, canvasEvtOut = config.canvasEvtOut;
            if (targetChanged) {
              inOpt = { e, target, previousTarget: oldTarget };
              outOpt = { e, target: oldTarget, nextTarget: target };
            }
            inFires = target && targetChanged;
            outFires = oldTarget && targetChanged;
            if (outFires) {
              canvasEvtOut && this.fire(canvasEvtOut, outOpt);
              oldTarget.fire(config.evtOut, outOpt);
            }
            if (inFires) {
              canvasEvtIn && this.fire(canvasEvtIn, inOpt);
              target.fire(config.evtIn, inOpt);
            }
          },
          __onMouseWheel: function(e) {
            this._cacheTransformEventData(e);
            this._handleEvent(e, "wheel");
            this._resetTransformEventData();
          },
          _transformObject: function(e) {
            var pointer = this.getPointer(e), transform2 = this._currentTransform;
            transform2.reset = false;
            transform2.shiftKey = e.shiftKey;
            transform2.altKey = e[this.centeredKey];
            this._performTransformAction(e, transform2, pointer);
            transform2.actionPerformed && this.requestRenderAll();
          },
          _performTransformAction: function(e, transform2, pointer) {
            var x = pointer.x, y = pointer.y, action = transform2.action, actionPerformed = false, actionHandler = transform2.actionHandler;
            if (actionHandler) {
              actionPerformed = actionHandler(e, transform2, x, y);
            }
            if (action === "drag" && actionPerformed) {
              transform2.target.isMoving = true;
              this.setCursor(transform2.target.moveCursor || this.moveCursor);
            }
            transform2.actionPerformed = transform2.actionPerformed || actionPerformed;
          },
          _fire: fabric4.controlsUtils.fireEvent,
          _setCursorFromEvent: function(e, target) {
            if (!target) {
              this.setCursor(this.defaultCursor);
              return false;
            }
            var hoverCursor = target.hoverCursor || this.hoverCursor, activeSelection = this._activeObject && this._activeObject.type === "activeSelection" ? this._activeObject : null, corner = (!activeSelection || !activeSelection.contains(target)) && target._findTargetCorner(this.getPointer(e, true));
            if (!corner) {
              if (target.subTargetCheck) {
                this.targets.concat().reverse().map(function(_target) {
                  hoverCursor = _target.hoverCursor || hoverCursor;
                });
              }
              this.setCursor(hoverCursor);
            } else {
              this.setCursor(this.getCornerCursor(corner, target, e));
            }
          },
          getCornerCursor: function(corner, target, e) {
            var control = target.controls[corner];
            return control.cursorStyleHandler(e, control, target);
          }
        });
      })();
      (function() {
        var min = Math.min, max = Math.max;
        fabric4.util.object.extend(fabric4.Canvas.prototype, {
          _shouldGroup: function(e, target) {
            var activeObject = this._activeObject;
            return activeObject && this._isSelectionKeyPressed(e) && target && target.selectable && this.selection && (activeObject !== target || activeObject.type === "activeSelection") && !target.onSelect({ e });
          },
          _handleGrouping: function(e, target) {
            var activeObject = this._activeObject;
            if (activeObject.__corner) {
              return;
            }
            if (target === activeObject) {
              target = this.findTarget(e, true);
              if (!target || !target.selectable) {
                return;
              }
            }
            if (activeObject && activeObject.type === "activeSelection") {
              this._updateActiveSelection(target, e);
            } else {
              this._createActiveSelection(target, e);
            }
          },
          _updateActiveSelection: function(target, e) {
            var activeSelection = this._activeObject, currentActiveObjects = activeSelection._objects.slice(0);
            if (activeSelection.contains(target)) {
              activeSelection.removeWithUpdate(target);
              this._hoveredTarget = target;
              this._hoveredTargets = this.targets.concat();
              if (activeSelection.size() === 1) {
                this._setActiveObject(activeSelection.item(0), e);
              }
            } else {
              activeSelection.addWithUpdate(target);
              this._hoveredTarget = activeSelection;
              this._hoveredTargets = this.targets.concat();
            }
            this._fireSelectionEvents(currentActiveObjects, e);
          },
          _createActiveSelection: function(target, e) {
            var currentActives = this.getActiveObjects(), group = this._createGroup(target);
            this._hoveredTarget = group;
            this._setActiveObject(group, e);
            this._fireSelectionEvents(currentActives, e);
          },
          _createGroup: function(target) {
            var objects = this._objects, isActiveLower = objects.indexOf(this._activeObject) < objects.indexOf(target), groupObjects = isActiveLower ? [this._activeObject, target] : [target, this._activeObject];
            this._activeObject.isEditing && this._activeObject.exitEditing();
            return new fabric4.ActiveSelection(groupObjects, {
              canvas: this
            });
          },
          _groupSelectedObjects: function(e) {
            var group = this._collectObjects(e), aGroup;
            if (group.length === 1) {
              this.setActiveObject(group[0], e);
            } else if (group.length > 1) {
              aGroup = new fabric4.ActiveSelection(group.reverse(), {
                canvas: this
              });
              this.setActiveObject(aGroup, e);
            }
          },
          _collectObjects: function(e) {
            var group = [], currentObject, x1 = this._groupSelector.ex, y1 = this._groupSelector.ey, x2 = x1 + this._groupSelector.left, y2 = y1 + this._groupSelector.top, selectionX1Y1 = new fabric4.Point(min(x1, x2), min(y1, y2)), selectionX2Y2 = new fabric4.Point(max(x1, x2), max(y1, y2)), allowIntersect = !this.selectionFullyContained, isClick = x1 === x2 && y1 === y2;
            for (var i = this._objects.length; i--; ) {
              currentObject = this._objects[i];
              if (!currentObject || !currentObject.selectable || !currentObject.visible) {
                continue;
              }
              if (allowIntersect && currentObject.intersectsWithRect(selectionX1Y1, selectionX2Y2, true) || currentObject.isContainedWithinRect(selectionX1Y1, selectionX2Y2, true) || allowIntersect && currentObject.containsPoint(selectionX1Y1, null, true) || allowIntersect && currentObject.containsPoint(selectionX2Y2, null, true)) {
                group.push(currentObject);
                if (isClick) {
                  break;
                }
              }
            }
            if (group.length > 1) {
              group = group.filter(function(object) {
                return !object.onSelect({ e });
              });
            }
            return group;
          },
          _maybeGroupObjects: function(e) {
            if (this.selection && this._groupSelector) {
              this._groupSelectedObjects(e);
            }
            this.setCursor(this.defaultCursor);
            this._groupSelector = null;
          }
        });
      })();
      (function() {
        fabric4.util.object.extend(fabric4.StaticCanvas.prototype, {
          toDataURL: function(options) {
            options || (options = {});
            var format = options.format || "png", quality = options.quality || 1, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? this.getRetinaScaling() : 1), canvasEl = this.toCanvasElement(multiplier, options);
            return fabric4.util.toDataURL(canvasEl, format, quality);
          },
          toCanvasElement: function(multiplier, cropping) {
            multiplier = multiplier || 1;
            cropping = cropping || {};
            var scaledWidth = (cropping.width || this.width) * multiplier, scaledHeight = (cropping.height || this.height) * multiplier, zoom = this.getZoom(), originalWidth = this.width, originalHeight = this.height, newZoom = zoom * multiplier, vp = this.viewportTransform, translateX = (vp[4] - (cropping.left || 0)) * multiplier, translateY = (vp[5] - (cropping.top || 0)) * multiplier, originalInteractive = this.interactive, newVp = [newZoom, 0, 0, newZoom, translateX, translateY], originalRetina = this.enableRetinaScaling, canvasEl = fabric4.util.createCanvasElement(), originalContextTop = this.contextTop;
            canvasEl.width = scaledWidth;
            canvasEl.height = scaledHeight;
            this.contextTop = null;
            this.enableRetinaScaling = false;
            this.interactive = false;
            this.viewportTransform = newVp;
            this.width = scaledWidth;
            this.height = scaledHeight;
            this.calcViewportBoundaries();
            this.renderCanvas(canvasEl.getContext("2d"), this._objects);
            this.viewportTransform = vp;
            this.width = originalWidth;
            this.height = originalHeight;
            this.calcViewportBoundaries();
            this.interactive = originalInteractive;
            this.enableRetinaScaling = originalRetina;
            this.contextTop = originalContextTop;
            return canvasEl;
          }
        });
      })();
      fabric4.util.object.extend(fabric4.StaticCanvas.prototype, {
        loadFromJSON: function(json, callback, reviver) {
          if (!json) {
            return;
          }
          var serialized = typeof json === "string" ? JSON.parse(json) : fabric4.util.object.clone(json);
          var _this = this, clipPath = serialized.clipPath, renderOnAddRemove = this.renderOnAddRemove;
          this.renderOnAddRemove = false;
          delete serialized.clipPath;
          this._enlivenObjects(serialized.objects, function(enlivenedObjects) {
            _this.clear();
            _this._setBgOverlay(serialized, function() {
              if (clipPath) {
                _this._enlivenObjects([clipPath], function(enlivenedCanvasClip) {
                  _this.clipPath = enlivenedCanvasClip[0];
                  _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
                });
              } else {
                _this.__setupCanvas.call(_this, serialized, enlivenedObjects, renderOnAddRemove, callback);
              }
            });
          }, reviver);
          return this;
        },
        __setupCanvas: function(serialized, enlivenedObjects, renderOnAddRemove, callback) {
          var _this = this;
          enlivenedObjects.forEach(function(obj, index) {
            _this.insertAt(obj, index);
          });
          this.renderOnAddRemove = renderOnAddRemove;
          delete serialized.objects;
          delete serialized.backgroundImage;
          delete serialized.overlayImage;
          delete serialized.background;
          delete serialized.overlay;
          this._setOptions(serialized);
          this.renderAll();
          callback && callback();
        },
        _setBgOverlay: function(serialized, callback) {
          var loaded = {
            backgroundColor: false,
            overlayColor: false,
            backgroundImage: false,
            overlayImage: false
          };
          if (!serialized.backgroundImage && !serialized.overlayImage && !serialized.background && !serialized.overlay) {
            callback && callback();
            return;
          }
          var cbIfLoaded = function() {
            if (loaded.backgroundImage && loaded.overlayImage && loaded.backgroundColor && loaded.overlayColor) {
              callback && callback();
            }
          };
          this.__setBgOverlay("backgroundImage", serialized.backgroundImage, loaded, cbIfLoaded);
          this.__setBgOverlay("overlayImage", serialized.overlayImage, loaded, cbIfLoaded);
          this.__setBgOverlay("backgroundColor", serialized.background, loaded, cbIfLoaded);
          this.__setBgOverlay("overlayColor", serialized.overlay, loaded, cbIfLoaded);
        },
        __setBgOverlay: function(property, value, loaded, callback) {
          var _this = this;
          if (!value) {
            loaded[property] = true;
            callback && callback();
            return;
          }
          if (property === "backgroundImage" || property === "overlayImage") {
            fabric4.util.enlivenObjects([value], function(enlivedObject) {
              _this[property] = enlivedObject[0];
              loaded[property] = true;
              callback && callback();
            });
          } else {
            this["set" + fabric4.util.string.capitalize(property, true)](value, function() {
              loaded[property] = true;
              callback && callback();
            });
          }
        },
        _enlivenObjects: function(objects, callback, reviver) {
          if (!objects || objects.length === 0) {
            callback && callback([]);
            return;
          }
          fabric4.util.enlivenObjects(objects, function(enlivenedObjects) {
            callback && callback(enlivenedObjects);
          }, null, reviver);
        },
        _toDataURL: function(format, callback) {
          this.clone(function(clone) {
            callback(clone.toDataURL(format));
          });
        },
        _toDataURLWithMultiplier: function(format, multiplier, callback) {
          this.clone(function(clone) {
            callback(clone.toDataURLWithMultiplier(format, multiplier));
          });
        },
        clone: function(callback, properties2) {
          var data = JSON.stringify(this.toJSON(properties2));
          this.cloneWithoutData(function(clone) {
            clone.loadFromJSON(data, function() {
              callback && callback(clone);
            });
          });
        },
        cloneWithoutData: function(callback) {
          var el = fabric4.util.createCanvasElement();
          el.width = this.width;
          el.height = this.height;
          var clone = new fabric4.Canvas(el);
          if (this.backgroundImage) {
            clone.setBackgroundImage(this.backgroundImage.src, function() {
              clone.renderAll();
              callback && callback(clone);
            });
            clone.backgroundImageOpacity = this.backgroundImageOpacity;
            clone.backgroundImageStretch = this.backgroundImageStretch;
          } else {
            callback && callback(clone);
          }
        }
      });
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), extend = fabric5.util.object.extend, clone = fabric5.util.object.clone, toFixed = fabric5.util.toFixed, capitalize2 = fabric5.util.string.capitalize, degreesToRadians = fabric5.util.degreesToRadians, objectCaching = !fabric5.isLikelyNode, ALIASING_LIMIT = 2;
        if (fabric5.Object) {
          return;
        }
        fabric5.Object = fabric5.util.createClass(fabric5.CommonMethods, {
          type: "object",
          originX: "left",
          originY: "top",
          top: 0,
          left: 0,
          width: 0,
          height: 0,
          scaleX: 1,
          scaleY: 1,
          flipX: false,
          flipY: false,
          opacity: 1,
          angle: 0,
          skewX: 0,
          skewY: 0,
          cornerSize: 13,
          touchCornerSize: 24,
          transparentCorners: true,
          hoverCursor: null,
          moveCursor: null,
          padding: 0,
          borderColor: "rgb(178,204,255)",
          borderDashArray: null,
          cornerColor: "rgb(178,204,255)",
          cornerStrokeColor: null,
          cornerStyle: "rect",
          cornerDashArray: null,
          centeredScaling: false,
          centeredRotation: true,
          fill: "rgb(0,0,0)",
          fillRule: "nonzero",
          globalCompositeOperation: "source-over",
          backgroundColor: "",
          selectionBackgroundColor: "",
          stroke: null,
          strokeWidth: 1,
          strokeDashArray: null,
          strokeDashOffset: 0,
          strokeLineCap: "butt",
          strokeLineJoin: "miter",
          strokeMiterLimit: 4,
          shadow: null,
          borderOpacityWhenMoving: 0.4,
          borderScaleFactor: 1,
          minScaleLimit: 0,
          selectable: true,
          evented: true,
          visible: true,
          hasControls: true,
          hasBorders: true,
          perPixelTargetFind: false,
          includeDefaultValues: true,
          lockMovementX: false,
          lockMovementY: false,
          lockRotation: false,
          lockScalingX: false,
          lockScalingY: false,
          lockSkewingX: false,
          lockSkewingY: false,
          lockScalingFlip: false,
          excludeFromExport: false,
          objectCaching,
          statefullCache: false,
          noScaleCache: true,
          strokeUniform: false,
          dirty: true,
          __corner: 0,
          paintFirst: "fill",
          activeOn: "down",
          stateProperties: "top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform".split(" "),
          cacheProperties: "fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath".split(" "),
          colorProperties: "fill stroke backgroundColor".split(" "),
          clipPath: void 0,
          inverted: false,
          absolutePositioned: false,
          initialize: function(options) {
            if (options) {
              this.setOptions(options);
            }
          },
          _createCacheCanvas: function() {
            this._cacheProperties = {};
            this._cacheCanvas = fabric5.util.createCanvasElement();
            this._cacheContext = this._cacheCanvas.getContext("2d");
            this._updateCacheCanvas();
            this.dirty = true;
          },
          _limitCacheSize: function(dims) {
            var perfLimitSizeTotal = fabric5.perfLimitSizeTotal, width2 = dims.width, height2 = dims.height, max = fabric5.maxCacheSideLimit, min = fabric5.minCacheSideLimit;
            if (width2 <= max && height2 <= max && width2 * height2 <= perfLimitSizeTotal) {
              if (width2 < min) {
                dims.width = min;
              }
              if (height2 < min) {
                dims.height = min;
              }
              return dims;
            }
            var ar = width2 / height2, limitedDims = fabric5.util.limitDimsByArea(ar, perfLimitSizeTotal), capValue = fabric5.util.capValue, x = capValue(min, limitedDims.x, max), y = capValue(min, limitedDims.y, max);
            if (width2 > x) {
              dims.zoomX /= width2 / x;
              dims.width = x;
              dims.capped = true;
            }
            if (height2 > y) {
              dims.zoomY /= height2 / y;
              dims.height = y;
              dims.capped = true;
            }
            return dims;
          },
          _getCacheCanvasDimensions: function() {
            var objectScale = this.getTotalObjectScaling(), dim = this._getTransformedDimensions(0, 0), neededX = dim.x * objectScale.scaleX / this.scaleX, neededY = dim.y * objectScale.scaleY / this.scaleY;
            return {
              width: neededX + ALIASING_LIMIT,
              height: neededY + ALIASING_LIMIT,
              zoomX: objectScale.scaleX,
              zoomY: objectScale.scaleY,
              x: neededX,
              y: neededY
            };
          },
          _updateCacheCanvas: function() {
            var targetCanvas = this.canvas;
            if (this.noScaleCache && targetCanvas && targetCanvas._currentTransform) {
              var target = targetCanvas._currentTransform.target, action = targetCanvas._currentTransform.action;
              if (this === target && action.slice && action.slice(0, 5) === "scale") {
                return false;
              }
            }
            var canvas = this._cacheCanvas, dims = this._limitCacheSize(this._getCacheCanvasDimensions()), minCacheSize = fabric5.minCacheSideLimit, width2 = dims.width, height2 = dims.height, drawingWidth, drawingHeight, zoomX = dims.zoomX, zoomY = dims.zoomY, dimensionsChanged = width2 !== this.cacheWidth || height2 !== this.cacheHeight, zoomChanged = this.zoomX !== zoomX || this.zoomY !== zoomY, shouldRedraw = dimensionsChanged || zoomChanged, additionalWidth = 0, additionalHeight = 0, shouldResizeCanvas = false;
            if (dimensionsChanged) {
              var canvasWidth = this._cacheCanvas.width, canvasHeight = this._cacheCanvas.height, sizeGrowing = width2 > canvasWidth || height2 > canvasHeight, sizeShrinking = (width2 < canvasWidth * 0.9 || height2 < canvasHeight * 0.9) && canvasWidth > minCacheSize && canvasHeight > minCacheSize;
              shouldResizeCanvas = sizeGrowing || sizeShrinking;
              if (sizeGrowing && !dims.capped && (width2 > minCacheSize || height2 > minCacheSize)) {
                additionalWidth = width2 * 0.1;
                additionalHeight = height2 * 0.1;
              }
            }
            if (this instanceof fabric5.Text && this.path) {
              shouldRedraw = true;
              shouldResizeCanvas = true;
              additionalWidth += this.getHeightOfLine(0) * this.zoomX;
              additionalHeight += this.getHeightOfLine(0) * this.zoomY;
            }
            if (shouldRedraw) {
              if (shouldResizeCanvas) {
                canvas.width = Math.ceil(width2 + additionalWidth);
                canvas.height = Math.ceil(height2 + additionalHeight);
              } else {
                this._cacheContext.setTransform(1, 0, 0, 1, 0, 0);
                this._cacheContext.clearRect(0, 0, canvas.width, canvas.height);
              }
              drawingWidth = dims.x / 2;
              drawingHeight = dims.y / 2;
              this.cacheTranslationX = Math.round(canvas.width / 2 - drawingWidth) + drawingWidth;
              this.cacheTranslationY = Math.round(canvas.height / 2 - drawingHeight) + drawingHeight;
              this.cacheWidth = width2;
              this.cacheHeight = height2;
              this._cacheContext.translate(this.cacheTranslationX, this.cacheTranslationY);
              this._cacheContext.scale(zoomX, zoomY);
              this.zoomX = zoomX;
              this.zoomY = zoomY;
              return true;
            }
            return false;
          },
          setOptions: function(options) {
            this._setOptions(options);
            this._initGradient(options.fill, "fill");
            this._initGradient(options.stroke, "stroke");
            this._initPattern(options.fill, "fill");
            this._initPattern(options.stroke, "stroke");
          },
          transform: function(ctx) {
            var needFullTransform = this.group && !this.group._transformDone || this.group && this.canvas && ctx === this.canvas.contextTop;
            var m = this.calcTransformMatrix(!needFullTransform);
            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
          },
          toObject: function(propertiesToInclude) {
            var NUM_FRACTION_DIGITS = fabric5.Object.NUM_FRACTION_DIGITS, object = {
              type: this.type,
              version: fabric5.version,
              originX: this.originX,
              originY: this.originY,
              left: toFixed(this.left, NUM_FRACTION_DIGITS),
              top: toFixed(this.top, NUM_FRACTION_DIGITS),
              width: toFixed(this.width, NUM_FRACTION_DIGITS),
              height: toFixed(this.height, NUM_FRACTION_DIGITS),
              fill: this.fill && this.fill.toObject ? this.fill.toObject() : this.fill,
              stroke: this.stroke && this.stroke.toObject ? this.stroke.toObject() : this.stroke,
              strokeWidth: toFixed(this.strokeWidth, NUM_FRACTION_DIGITS),
              strokeDashArray: this.strokeDashArray ? this.strokeDashArray.concat() : this.strokeDashArray,
              strokeLineCap: this.strokeLineCap,
              strokeDashOffset: this.strokeDashOffset,
              strokeLineJoin: this.strokeLineJoin,
              strokeUniform: this.strokeUniform,
              strokeMiterLimit: toFixed(this.strokeMiterLimit, NUM_FRACTION_DIGITS),
              scaleX: toFixed(this.scaleX, NUM_FRACTION_DIGITS),
              scaleY: toFixed(this.scaleY, NUM_FRACTION_DIGITS),
              angle: toFixed(this.angle, NUM_FRACTION_DIGITS),
              flipX: this.flipX,
              flipY: this.flipY,
              opacity: toFixed(this.opacity, NUM_FRACTION_DIGITS),
              shadow: this.shadow && this.shadow.toObject ? this.shadow.toObject() : this.shadow,
              visible: this.visible,
              backgroundColor: this.backgroundColor,
              fillRule: this.fillRule,
              paintFirst: this.paintFirst,
              globalCompositeOperation: this.globalCompositeOperation,
              skewX: toFixed(this.skewX, NUM_FRACTION_DIGITS),
              skewY: toFixed(this.skewY, NUM_FRACTION_DIGITS)
            };
            if (this.clipPath && !this.clipPath.excludeFromExport) {
              object.clipPath = this.clipPath.toObject(propertiesToInclude);
              object.clipPath.inverted = this.clipPath.inverted;
              object.clipPath.absolutePositioned = this.clipPath.absolutePositioned;
            }
            fabric5.util.populateWithProperties(this, object, propertiesToInclude);
            if (!this.includeDefaultValues) {
              object = this._removeDefaultValues(object);
            }
            return object;
          },
          toDatalessObject: function(propertiesToInclude) {
            return this.toObject(propertiesToInclude);
          },
          _removeDefaultValues: function(object) {
            var prototype = fabric5.util.getKlass(object.type).prototype, stateProperties = prototype.stateProperties;
            stateProperties.forEach(function(prop) {
              if (prop === "left" || prop === "top") {
                return;
              }
              if (object[prop] === prototype[prop]) {
                delete object[prop];
              }
              var isArray = Object.prototype.toString.call(object[prop]) === "[object Array]" && Object.prototype.toString.call(prototype[prop]) === "[object Array]";
              if (isArray && object[prop].length === 0 && prototype[prop].length === 0) {
                delete object[prop];
              }
            });
            return object;
          },
          toString: function() {
            return "#<fabric." + capitalize2(this.type) + ">";
          },
          getObjectScaling: function() {
            if (!this.group) {
              return {
                scaleX: this.scaleX,
                scaleY: this.scaleY
              };
            }
            var options = fabric5.util.qrDecompose(this.calcTransformMatrix());
            return { scaleX: Math.abs(options.scaleX), scaleY: Math.abs(options.scaleY) };
          },
          getTotalObjectScaling: function() {
            var scale = this.getObjectScaling(), scaleX = scale.scaleX, scaleY = scale.scaleY;
            if (this.canvas) {
              var zoom = this.canvas.getZoom();
              var retina = this.canvas.getRetinaScaling();
              scaleX *= zoom * retina;
              scaleY *= zoom * retina;
            }
            return { scaleX, scaleY };
          },
          getObjectOpacity: function() {
            var opacity = this.opacity;
            if (this.group) {
              opacity *= this.group.getObjectOpacity();
            }
            return opacity;
          },
          _set: function(key, value) {
            var shouldConstrainValue = key === "scaleX" || key === "scaleY", isChanged = this[key] !== value, groupNeedsUpdate = false;
            if (shouldConstrainValue) {
              value = this._constrainScale(value);
            }
            if (key === "scaleX" && value < 0) {
              this.flipX = !this.flipX;
              value *= -1;
            } else if (key === "scaleY" && value < 0) {
              this.flipY = !this.flipY;
              value *= -1;
            } else if (key === "shadow" && value && !(value instanceof fabric5.Shadow)) {
              value = new fabric5.Shadow(value);
            } else if (key === "dirty" && this.group) {
              this.group.set("dirty", value);
            }
            this[key] = value;
            if (isChanged) {
              groupNeedsUpdate = this.group && this.group.isOnACache();
              if (this.cacheProperties.indexOf(key) > -1) {
                this.dirty = true;
                groupNeedsUpdate && this.group.set("dirty", true);
              } else if (groupNeedsUpdate && this.stateProperties.indexOf(key) > -1) {
                this.group.set("dirty", true);
              }
            }
            return this;
          },
          setOnGroup: function() {
          },
          getViewportTransform: function() {
            if (this.canvas && this.canvas.viewportTransform) {
              return this.canvas.viewportTransform;
            }
            return fabric5.iMatrix.concat();
          },
          isNotVisible: function() {
            return this.opacity === 0 || !this.width && !this.height && this.strokeWidth === 0 || !this.visible;
          },
          render: function(ctx) {
            if (this.isNotVisible()) {
              return;
            }
            if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
              return;
            }
            ctx.save();
            this._setupCompositeOperation(ctx);
            this.drawSelectionBackground(ctx);
            this.transform(ctx);
            this._setOpacity(ctx);
            this._setShadow(ctx, this);
            if (this.shouldCache()) {
              this.renderCache();
              this.drawCacheOnCanvas(ctx);
            } else {
              this._removeCacheCanvas();
              this.dirty = false;
              this.drawObject(ctx);
              if (this.objectCaching && this.statefullCache) {
                this.saveState({ propertySet: "cacheProperties" });
              }
            }
            ctx.restore();
          },
          renderCache: function(options) {
            options = options || {};
            if (!this._cacheCanvas) {
              this._createCacheCanvas();
            }
            if (this.isCacheDirty()) {
              this.statefullCache && this.saveState({ propertySet: "cacheProperties" });
              this.drawObject(this._cacheContext, options.forClipping);
              this.dirty = false;
            }
          },
          _removeCacheCanvas: function() {
            this._cacheCanvas = null;
            this.cacheWidth = 0;
            this.cacheHeight = 0;
          },
          hasStroke: function() {
            return this.stroke && this.stroke !== "transparent" && this.strokeWidth !== 0;
          },
          hasFill: function() {
            return this.fill && this.fill !== "transparent";
          },
          needsItsOwnCache: function() {
            if (this.paintFirst === "stroke" && this.hasFill() && this.hasStroke() && typeof this.shadow === "object") {
              return true;
            }
            if (this.clipPath) {
              return true;
            }
            return false;
          },
          shouldCache: function() {
            this.ownCaching = this.needsItsOwnCache() || this.objectCaching && (!this.group || !this.group.isOnACache());
            return this.ownCaching;
          },
          willDrawShadow: function() {
            return !!this.shadow && (this.shadow.offsetX !== 0 || this.shadow.offsetY !== 0);
          },
          drawClipPathOnCache: function(ctx) {
            var path = this.clipPath;
            ctx.save();
            if (path.inverted) {
              ctx.globalCompositeOperation = "destination-out";
            } else {
              ctx.globalCompositeOperation = "destination-in";
            }
            if (path.absolutePositioned) {
              var m = fabric5.util.invertTransform(this.calcTransformMatrix());
              ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
            }
            path.transform(ctx);
            ctx.scale(1 / path.zoomX, 1 / path.zoomY);
            ctx.drawImage(path._cacheCanvas, -path.cacheTranslationX, -path.cacheTranslationY);
            ctx.restore();
          },
          drawObject: function(ctx, forClipping) {
            var originalFill = this.fill, originalStroke = this.stroke;
            if (forClipping) {
              this.fill = "black";
              this.stroke = "";
              this._setClippingProperties(ctx);
            } else {
              this._renderBackground(ctx);
            }
            this._render(ctx);
            this._drawClipPath(ctx);
            this.fill = originalFill;
            this.stroke = originalStroke;
          },
          _drawClipPath: function(ctx) {
            var path = this.clipPath;
            if (!path) {
              return;
            }
            path.canvas = this.canvas;
            path.shouldCache();
            path._transformDone = true;
            path.renderCache({ forClipping: true });
            this.drawClipPathOnCache(ctx);
          },
          drawCacheOnCanvas: function(ctx) {
            ctx.scale(1 / this.zoomX, 1 / this.zoomY);
            ctx.drawImage(this._cacheCanvas, -this.cacheTranslationX, -this.cacheTranslationY);
          },
          isCacheDirty: function(skipCanvas) {
            if (this.isNotVisible()) {
              return false;
            }
            if (this._cacheCanvas && !skipCanvas && this._updateCacheCanvas()) {
              return true;
            } else {
              if (this.dirty || this.clipPath && this.clipPath.absolutePositioned || this.statefullCache && this.hasStateChanged("cacheProperties")) {
                if (this._cacheCanvas && !skipCanvas) {
                  var width2 = this.cacheWidth / this.zoomX;
                  var height2 = this.cacheHeight / this.zoomY;
                  this._cacheContext.clearRect(-width2 / 2, -height2 / 2, width2, height2);
                }
                return true;
              }
            }
            return false;
          },
          _renderBackground: function(ctx) {
            if (!this.backgroundColor) {
              return;
            }
            var dim = this._getNonTransformedDimensions();
            ctx.fillStyle = this.backgroundColor;
            ctx.fillRect(-dim.x / 2, -dim.y / 2, dim.x, dim.y);
            this._removeShadow(ctx);
          },
          _setOpacity: function(ctx) {
            if (this.group && !this.group._transformDone) {
              ctx.globalAlpha = this.getObjectOpacity();
            } else {
              ctx.globalAlpha *= this.opacity;
            }
          },
          _setStrokeStyles: function(ctx, decl) {
            var stroke = decl.stroke;
            if (stroke) {
              ctx.lineWidth = decl.strokeWidth;
              ctx.lineCap = decl.strokeLineCap;
              ctx.lineDashOffset = decl.strokeDashOffset;
              ctx.lineJoin = decl.strokeLineJoin;
              ctx.miterLimit = decl.strokeMiterLimit;
              if (stroke.toLive) {
                if (stroke.gradientUnits === "percentage" || stroke.gradientTransform || stroke.patternTransform) {
                  this._applyPatternForTransformedGradient(ctx, stroke);
                } else {
                  ctx.strokeStyle = stroke.toLive(ctx, this);
                  this._applyPatternGradientTransform(ctx, stroke);
                }
              } else {
                ctx.strokeStyle = decl.stroke;
              }
            }
          },
          _setFillStyles: function(ctx, decl) {
            var fill = decl.fill;
            if (fill) {
              if (fill.toLive) {
                ctx.fillStyle = fill.toLive(ctx, this);
                this._applyPatternGradientTransform(ctx, decl.fill);
              } else {
                ctx.fillStyle = fill;
              }
            }
          },
          _setClippingProperties: function(ctx) {
            ctx.globalAlpha = 1;
            ctx.strokeStyle = "transparent";
            ctx.fillStyle = "#000000";
          },
          _setLineDash: function(ctx, dashArray) {
            if (!dashArray || dashArray.length === 0) {
              return;
            }
            if (1 & dashArray.length) {
              dashArray.push.apply(dashArray, dashArray);
            }
            ctx.setLineDash(dashArray);
          },
          _renderControls: function(ctx, styleOverride) {
            var vpt = this.getViewportTransform(), matrix = this.calcTransformMatrix(), options, drawBorders, drawControls;
            styleOverride = styleOverride || {};
            drawBorders = typeof styleOverride.hasBorders !== "undefined" ? styleOverride.hasBorders : this.hasBorders;
            drawControls = typeof styleOverride.hasControls !== "undefined" ? styleOverride.hasControls : this.hasControls;
            matrix = fabric5.util.multiplyTransformMatrices(vpt, matrix);
            options = fabric5.util.qrDecompose(matrix);
            ctx.save();
            ctx.translate(options.translateX, options.translateY);
            ctx.lineWidth = 1 * this.borderScaleFactor;
            if (!this.group) {
              ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
            }
            ctx.rotate(degreesToRadians(options.angle));
            if (styleOverride.forActiveSelection || this.group) {
              drawBorders && this.drawBordersInGroup(ctx, options, styleOverride);
            } else {
              drawBorders && this.drawBorders(ctx, styleOverride);
            }
            drawControls && this.drawControls(ctx, styleOverride);
            ctx.restore();
          },
          _setShadow: function(ctx) {
            if (!this.shadow) {
              return;
            }
            var shadow = this.shadow, canvas = this.canvas, scaling, multX = canvas && canvas.viewportTransform[0] || 1, multY = canvas && canvas.viewportTransform[3] || 1;
            if (shadow.nonScaling) {
              scaling = { scaleX: 1, scaleY: 1 };
            } else {
              scaling = this.getObjectScaling();
            }
            if (canvas && canvas._isRetinaScaling()) {
              multX *= fabric5.devicePixelRatio;
              multY *= fabric5.devicePixelRatio;
            }
            ctx.shadowColor = shadow.color;
            ctx.shadowBlur = shadow.blur * fabric5.browserShadowBlurConstant * (multX + multY) * (scaling.scaleX + scaling.scaleY) / 4;
            ctx.shadowOffsetX = shadow.offsetX * multX * scaling.scaleX;
            ctx.shadowOffsetY = shadow.offsetY * multY * scaling.scaleY;
          },
          _removeShadow: function(ctx) {
            if (!this.shadow) {
              return;
            }
            ctx.shadowColor = "";
            ctx.shadowBlur = ctx.shadowOffsetX = ctx.shadowOffsetY = 0;
          },
          _applyPatternGradientTransform: function(ctx, filler) {
            if (!filler || !filler.toLive) {
              return { offsetX: 0, offsetY: 0 };
            }
            var t = filler.gradientTransform || filler.patternTransform;
            var offsetX = -this.width / 2 + filler.offsetX || 0, offsetY = -this.height / 2 + filler.offsetY || 0;
            if (filler.gradientUnits === "percentage") {
              ctx.transform(this.width, 0, 0, this.height, offsetX, offsetY);
            } else {
              ctx.transform(1, 0, 0, 1, offsetX, offsetY);
            }
            if (t) {
              ctx.transform(t[0], t[1], t[2], t[3], t[4], t[5]);
            }
            return { offsetX, offsetY };
          },
          _renderPaintInOrder: function(ctx) {
            if (this.paintFirst === "stroke") {
              this._renderStroke(ctx);
              this._renderFill(ctx);
            } else {
              this._renderFill(ctx);
              this._renderStroke(ctx);
            }
          },
          _render: function() {
          },
          _renderFill: function(ctx) {
            if (!this.fill) {
              return;
            }
            ctx.save();
            this._setFillStyles(ctx, this);
            if (this.fillRule === "evenodd") {
              ctx.fill("evenodd");
            } else {
              ctx.fill();
            }
            ctx.restore();
          },
          _renderStroke: function(ctx) {
            if (!this.stroke || this.strokeWidth === 0) {
              return;
            }
            if (this.shadow && !this.shadow.affectStroke) {
              this._removeShadow(ctx);
            }
            ctx.save();
            if (this.strokeUniform && this.group) {
              var scaling = this.getObjectScaling();
              ctx.scale(1 / scaling.scaleX, 1 / scaling.scaleY);
            } else if (this.strokeUniform) {
              ctx.scale(1 / this.scaleX, 1 / this.scaleY);
            }
            this._setLineDash(ctx, this.strokeDashArray);
            this._setStrokeStyles(ctx, this);
            ctx.stroke();
            ctx.restore();
          },
          _applyPatternForTransformedGradient: function(ctx, filler) {
            var dims = this._limitCacheSize(this._getCacheCanvasDimensions()), pCanvas = fabric5.util.createCanvasElement(), pCtx, retinaScaling = this.canvas.getRetinaScaling(), width2 = dims.x / this.scaleX / retinaScaling, height2 = dims.y / this.scaleY / retinaScaling;
            pCanvas.width = width2;
            pCanvas.height = height2;
            pCtx = pCanvas.getContext("2d");
            pCtx.beginPath();
            pCtx.moveTo(0, 0);
            pCtx.lineTo(width2, 0);
            pCtx.lineTo(width2, height2);
            pCtx.lineTo(0, height2);
            pCtx.closePath();
            pCtx.translate(width2 / 2, height2 / 2);
            pCtx.scale(dims.zoomX / this.scaleX / retinaScaling, dims.zoomY / this.scaleY / retinaScaling);
            this._applyPatternGradientTransform(pCtx, filler);
            pCtx.fillStyle = filler.toLive(ctx);
            pCtx.fill();
            ctx.translate(-this.width / 2 - this.strokeWidth / 2, -this.height / 2 - this.strokeWidth / 2);
            ctx.scale(retinaScaling * this.scaleX / dims.zoomX, retinaScaling * this.scaleY / dims.zoomY);
            ctx.strokeStyle = pCtx.createPattern(pCanvas, "no-repeat");
          },
          _findCenterFromElement: function() {
            return { x: this.left + this.width / 2, y: this.top + this.height / 2 };
          },
          _assignTransformMatrixProps: function() {
            if (this.transformMatrix) {
              var options = fabric5.util.qrDecompose(this.transformMatrix);
              this.flipX = false;
              this.flipY = false;
              this.set("scaleX", options.scaleX);
              this.set("scaleY", options.scaleY);
              this.angle = options.angle;
              this.skewX = options.skewX;
              this.skewY = 0;
            }
          },
          _removeTransformMatrix: function(preserveAspectRatioOptions) {
            var center = this._findCenterFromElement();
            if (this.transformMatrix) {
              this._assignTransformMatrixProps();
              center = fabric5.util.transformPoint(center, this.transformMatrix);
            }
            this.transformMatrix = null;
            if (preserveAspectRatioOptions) {
              this.scaleX *= preserveAspectRatioOptions.scaleX;
              this.scaleY *= preserveAspectRatioOptions.scaleY;
              this.cropX = preserveAspectRatioOptions.cropX;
              this.cropY = preserveAspectRatioOptions.cropY;
              center.x += preserveAspectRatioOptions.offsetLeft;
              center.y += preserveAspectRatioOptions.offsetTop;
              this.width = preserveAspectRatioOptions.width;
              this.height = preserveAspectRatioOptions.height;
            }
            this.setPositionByOrigin(center, "center", "center");
          },
          clone: function(callback, propertiesToInclude) {
            var objectForm = this.toObject(propertiesToInclude);
            if (this.constructor.fromObject) {
              this.constructor.fromObject(objectForm, callback);
            } else {
              fabric5.Object._fromObject("Object", objectForm, callback);
            }
          },
          cloneAsImage: function(callback, options) {
            var canvasEl = this.toCanvasElement(options);
            if (callback) {
              callback(new fabric5.Image(canvasEl));
            }
            return this;
          },
          toCanvasElement: function(options) {
            options || (options = {});
            var utils = fabric5.util, origParams = utils.saveObjectTransform(this), originalGroup = this.group, originalShadow = this.shadow, abs2 = Math.abs, multiplier = (options.multiplier || 1) * (options.enableRetinaScaling ? fabric5.devicePixelRatio : 1);
            delete this.group;
            if (options.withoutTransform) {
              utils.resetObjectTransform(this);
            }
            if (options.withoutShadow) {
              this.shadow = null;
            }
            var el = fabric5.util.createCanvasElement(), boundingRect = this.getBoundingRect(true, true), shadow = this.shadow, scaling, shadowOffset = { x: 0, y: 0 }, shadowBlur, width2, height2;
            if (shadow) {
              shadowBlur = shadow.blur;
              if (shadow.nonScaling) {
                scaling = { scaleX: 1, scaleY: 1 };
              } else {
                scaling = this.getObjectScaling();
              }
              shadowOffset.x = 2 * Math.round(abs2(shadow.offsetX) + shadowBlur) * abs2(scaling.scaleX);
              shadowOffset.y = 2 * Math.round(abs2(shadow.offsetY) + shadowBlur) * abs2(scaling.scaleY);
            }
            width2 = boundingRect.width + shadowOffset.x;
            height2 = boundingRect.height + shadowOffset.y;
            el.width = Math.ceil(width2);
            el.height = Math.ceil(height2);
            var canvas = new fabric5.StaticCanvas(el, {
              enableRetinaScaling: false,
              renderOnAddRemove: false,
              skipOffscreen: false
            });
            if (options.format === "jpeg") {
              canvas.backgroundColor = "#fff";
            }
            this.setPositionByOrigin(new fabric5.Point(canvas.width / 2, canvas.height / 2), "center", "center");
            var originalCanvas = this.canvas;
            canvas.add(this);
            var canvasEl = canvas.toCanvasElement(multiplier || 1, options);
            this.shadow = originalShadow;
            this.set("canvas", originalCanvas);
            if (originalGroup) {
              this.group = originalGroup;
            }
            this.set(origParams).setCoords();
            canvas._objects = [];
            canvas.dispose();
            canvas = null;
            return canvasEl;
          },
          toDataURL: function(options) {
            options || (options = {});
            return fabric5.util.toDataURL(this.toCanvasElement(options), options.format || "png", options.quality || 1);
          },
          isType: function(type) {
            return this.type === type;
          },
          complexity: function() {
            return 1;
          },
          toJSON: function(propertiesToInclude) {
            return this.toObject(propertiesToInclude);
          },
          rotate: function(angle) {
            var shouldCenterOrigin = (this.originX !== "center" || this.originY !== "center") && this.centeredRotation;
            if (shouldCenterOrigin) {
              this._setOriginToCenter();
            }
            this.set("angle", angle);
            if (shouldCenterOrigin) {
              this._resetOrigin();
            }
            return this;
          },
          centerH: function() {
            this.canvas && this.canvas.centerObjectH(this);
            return this;
          },
          viewportCenterH: function() {
            this.canvas && this.canvas.viewportCenterObjectH(this);
            return this;
          },
          centerV: function() {
            this.canvas && this.canvas.centerObjectV(this);
            return this;
          },
          viewportCenterV: function() {
            this.canvas && this.canvas.viewportCenterObjectV(this);
            return this;
          },
          center: function() {
            this.canvas && this.canvas.centerObject(this);
            return this;
          },
          viewportCenter: function() {
            this.canvas && this.canvas.viewportCenterObject(this);
            return this;
          },
          getLocalPointer: function(e, pointer) {
            pointer = pointer || this.canvas.getPointer(e);
            var pClicked = new fabric5.Point(pointer.x, pointer.y), objectLeftTop = this._getLeftTopCoords();
            if (this.angle) {
              pClicked = fabric5.util.rotatePoint(pClicked, objectLeftTop, degreesToRadians(-this.angle));
            }
            return {
              x: pClicked.x - objectLeftTop.x,
              y: pClicked.y - objectLeftTop.y
            };
          },
          _setupCompositeOperation: function(ctx) {
            if (this.globalCompositeOperation) {
              ctx.globalCompositeOperation = this.globalCompositeOperation;
            }
          }
        });
        fabric5.util.createAccessors && fabric5.util.createAccessors(fabric5.Object);
        extend(fabric5.Object.prototype, fabric5.Observable);
        fabric5.Object.NUM_FRACTION_DIGITS = 2;
        fabric5.Object._fromObject = function(className, object, callback, extraParam) {
          var klass = fabric5[className];
          object = clone(object, true);
          fabric5.util.enlivenPatterns([object.fill, object.stroke], function(patterns) {
            if (typeof patterns[0] !== "undefined") {
              object.fill = patterns[0];
            }
            if (typeof patterns[1] !== "undefined") {
              object.stroke = patterns[1];
            }
            fabric5.util.enlivenObjects([object.clipPath], function(enlivedProps) {
              object.clipPath = enlivedProps[0];
              var instance = extraParam ? new klass(object[extraParam], object) : new klass(object);
              callback && callback(instance);
            });
          });
        };
        fabric5.Object.__uid = 0;
      })(typeof exports !== "undefined" ? exports : exports);
      (function() {
        var degreesToRadians = fabric4.util.degreesToRadians, originXOffset = {
          left: -0.5,
          center: 0,
          right: 0.5
        }, originYOffset = {
          top: -0.5,
          center: 0,
          bottom: 0.5
        };
        fabric4.util.object.extend(fabric4.Object.prototype, {
          translateToGivenOrigin: function(point, fromOriginX, fromOriginY, toOriginX, toOriginY) {
            var x = point.x, y = point.y, offsetX, offsetY, dim;
            if (typeof fromOriginX === "string") {
              fromOriginX = originXOffset[fromOriginX];
            } else {
              fromOriginX -= 0.5;
            }
            if (typeof toOriginX === "string") {
              toOriginX = originXOffset[toOriginX];
            } else {
              toOriginX -= 0.5;
            }
            offsetX = toOriginX - fromOriginX;
            if (typeof fromOriginY === "string") {
              fromOriginY = originYOffset[fromOriginY];
            } else {
              fromOriginY -= 0.5;
            }
            if (typeof toOriginY === "string") {
              toOriginY = originYOffset[toOriginY];
            } else {
              toOriginY -= 0.5;
            }
            offsetY = toOriginY - fromOriginY;
            if (offsetX || offsetY) {
              dim = this._getTransformedDimensions();
              x = point.x + offsetX * dim.x;
              y = point.y + offsetY * dim.y;
            }
            return new fabric4.Point(x, y);
          },
          translateToCenterPoint: function(point, originX, originY) {
            var p = this.translateToGivenOrigin(point, originX, originY, "center", "center");
            if (this.angle) {
              return fabric4.util.rotatePoint(p, point, degreesToRadians(this.angle));
            }
            return p;
          },
          translateToOriginPoint: function(center, originX, originY) {
            var p = this.translateToGivenOrigin(center, "center", "center", originX, originY);
            if (this.angle) {
              return fabric4.util.rotatePoint(p, center, degreesToRadians(this.angle));
            }
            return p;
          },
          getCenterPoint: function() {
            var leftTop = new fabric4.Point(this.left, this.top);
            return this.translateToCenterPoint(leftTop, this.originX, this.originY);
          },
          getPointByOrigin: function(originX, originY) {
            var center = this.getCenterPoint();
            return this.translateToOriginPoint(center, originX, originY);
          },
          toLocalPoint: function(point, originX, originY) {
            var center = this.getCenterPoint(), p, p2;
            if (typeof originX !== "undefined" && typeof originY !== "undefined") {
              p = this.translateToGivenOrigin(center, "center", "center", originX, originY);
            } else {
              p = new fabric4.Point(this.left, this.top);
            }
            p2 = new fabric4.Point(point.x, point.y);
            if (this.angle) {
              p2 = fabric4.util.rotatePoint(p2, center, -degreesToRadians(this.angle));
            }
            return p2.subtractEquals(p);
          },
          setPositionByOrigin: function(pos, originX, originY) {
            var center = this.translateToCenterPoint(pos, originX, originY), position3 = this.translateToOriginPoint(center, this.originX, this.originY);
            this.set("left", position3.x);
            this.set("top", position3.y);
          },
          adjustPosition: function(to) {
            var angle = degreesToRadians(this.angle), hypotFull = this.getScaledWidth(), xFull = fabric4.util.cos(angle) * hypotFull, yFull = fabric4.util.sin(angle) * hypotFull, offsetFrom, offsetTo;
            if (typeof this.originX === "string") {
              offsetFrom = originXOffset[this.originX];
            } else {
              offsetFrom = this.originX - 0.5;
            }
            if (typeof to === "string") {
              offsetTo = originXOffset[to];
            } else {
              offsetTo = to - 0.5;
            }
            this.left += xFull * (offsetTo - offsetFrom);
            this.top += yFull * (offsetTo - offsetFrom);
            this.setCoords();
            this.originX = to;
          },
          _setOriginToCenter: function() {
            this._originalOriginX = this.originX;
            this._originalOriginY = this.originY;
            var center = this.getCenterPoint();
            this.originX = "center";
            this.originY = "center";
            this.left = center.x;
            this.top = center.y;
          },
          _resetOrigin: function() {
            var originPoint = this.translateToOriginPoint(this.getCenterPoint(), this._originalOriginX, this._originalOriginY);
            this.originX = this._originalOriginX;
            this.originY = this._originalOriginY;
            this.left = originPoint.x;
            this.top = originPoint.y;
            this._originalOriginX = null;
            this._originalOriginY = null;
          },
          _getLeftTopCoords: function() {
            return this.translateToOriginPoint(this.getCenterPoint(), "left", "top");
          }
        });
      })();
      (function() {
        function arrayFromCoords(coords) {
          return [
            new fabric4.Point(coords.tl.x, coords.tl.y),
            new fabric4.Point(coords.tr.x, coords.tr.y),
            new fabric4.Point(coords.br.x, coords.br.y),
            new fabric4.Point(coords.bl.x, coords.bl.y)
          ];
        }
        var util = fabric4.util, degreesToRadians = util.degreesToRadians, multiplyMatrices = util.multiplyTransformMatrices, transformPoint = util.transformPoint;
        util.object.extend(fabric4.Object.prototype, {
          oCoords: null,
          aCoords: null,
          lineCoords: null,
          ownMatrixCache: null,
          matrixCache: null,
          controls: {},
          _getCoords: function(absolute, calculate) {
            if (calculate) {
              return absolute ? this.calcACoords() : this.calcLineCoords();
            }
            if (!this.aCoords || !this.lineCoords) {
              this.setCoords(true);
            }
            return absolute ? this.aCoords : this.lineCoords;
          },
          getCoords: function(absolute, calculate) {
            return arrayFromCoords(this._getCoords(absolute, calculate));
          },
          intersectsWithRect: function(pointTL, pointBR, absolute, calculate) {
            var coords = this.getCoords(absolute, calculate), intersection = fabric4.Intersection.intersectPolygonRectangle(coords, pointTL, pointBR);
            return intersection.status === "Intersection";
          },
          intersectsWithObject: function(other, absolute, calculate) {
            var intersection = fabric4.Intersection.intersectPolygonPolygon(this.getCoords(absolute, calculate), other.getCoords(absolute, calculate));
            return intersection.status === "Intersection" || other.isContainedWithinObject(this, absolute, calculate) || this.isContainedWithinObject(other, absolute, calculate);
          },
          isContainedWithinObject: function(other, absolute, calculate) {
            var points = this.getCoords(absolute, calculate), otherCoords = absolute ? other.aCoords : other.lineCoords, i = 0, lines = other._getImageLines(otherCoords);
            for (; i < 4; i++) {
              if (!other.containsPoint(points[i], lines)) {
                return false;
              }
            }
            return true;
          },
          isContainedWithinRect: function(pointTL, pointBR, absolute, calculate) {
            var boundingRect = this.getBoundingRect(absolute, calculate);
            return boundingRect.left >= pointTL.x && boundingRect.left + boundingRect.width <= pointBR.x && boundingRect.top >= pointTL.y && boundingRect.top + boundingRect.height <= pointBR.y;
          },
          containsPoint: function(point, lines, absolute, calculate) {
            var coords = this._getCoords(absolute, calculate), lines = lines || this._getImageLines(coords), xPoints = this._findCrossPoints(point, lines);
            return xPoints !== 0 && xPoints % 2 === 1;
          },
          isOnScreen: function(calculate) {
            if (!this.canvas) {
              return false;
            }
            var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;
            var points = this.getCoords(true, calculate);
            if (points.some(function(point) {
              return point.x <= pointBR.x && point.x >= pointTL.x && point.y <= pointBR.y && point.y >= pointTL.y;
            })) {
              return true;
            }
            if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
              return true;
            }
            return this._containsCenterOfCanvas(pointTL, pointBR, calculate);
          },
          _containsCenterOfCanvas: function(pointTL, pointBR, calculate) {
            var centerPoint = { x: (pointTL.x + pointBR.x) / 2, y: (pointTL.y + pointBR.y) / 2 };
            if (this.containsPoint(centerPoint, null, true, calculate)) {
              return true;
            }
            return false;
          },
          isPartiallyOnScreen: function(calculate) {
            if (!this.canvas) {
              return false;
            }
            var pointTL = this.canvas.vptCoords.tl, pointBR = this.canvas.vptCoords.br;
            if (this.intersectsWithRect(pointTL, pointBR, true, calculate)) {
              return true;
            }
            var allPointsAreOutside = this.getCoords(true, calculate).every(function(point) {
              return (point.x >= pointBR.x || point.x <= pointTL.x) && (point.y >= pointBR.y || point.y <= pointTL.y);
            });
            return allPointsAreOutside && this._containsCenterOfCanvas(pointTL, pointBR, calculate);
          },
          _getImageLines: function(oCoords) {
            var lines = {
              topline: {
                o: oCoords.tl,
                d: oCoords.tr
              },
              rightline: {
                o: oCoords.tr,
                d: oCoords.br
              },
              bottomline: {
                o: oCoords.br,
                d: oCoords.bl
              },
              leftline: {
                o: oCoords.bl,
                d: oCoords.tl
              }
            };
            return lines;
          },
          _findCrossPoints: function(point, lines) {
            var b1, b2, a1, a2, xi, xcount = 0, iLine;
            for (var lineKey in lines) {
              iLine = lines[lineKey];
              if (iLine.o.y < point.y && iLine.d.y < point.y) {
                continue;
              }
              if (iLine.o.y >= point.y && iLine.d.y >= point.y) {
                continue;
              }
              if (iLine.o.x === iLine.d.x && iLine.o.x >= point.x) {
                xi = iLine.o.x;
              } else {
                b1 = 0;
                b2 = (iLine.d.y - iLine.o.y) / (iLine.d.x - iLine.o.x);
                a1 = point.y - b1 * point.x;
                a2 = iLine.o.y - b2 * iLine.o.x;
                xi = -(a1 - a2) / (b1 - b2);
              }
              if (xi >= point.x) {
                xcount += 1;
              }
              if (xcount === 2) {
                break;
              }
            }
            return xcount;
          },
          getBoundingRect: function(absolute, calculate) {
            var coords = this.getCoords(absolute, calculate);
            return util.makeBoundingBoxFromPoints(coords);
          },
          getScaledWidth: function() {
            return this._getTransformedDimensions().x;
          },
          getScaledHeight: function() {
            return this._getTransformedDimensions().y;
          },
          _constrainScale: function(value) {
            if (Math.abs(value) < this.minScaleLimit) {
              if (value < 0) {
                return -this.minScaleLimit;
              } else {
                return this.minScaleLimit;
              }
            } else if (value === 0) {
              return 1e-4;
            }
            return value;
          },
          scale: function(value) {
            this._set("scaleX", value);
            this._set("scaleY", value);
            return this.setCoords();
          },
          scaleToWidth: function(value, absolute) {
            var boundingRectFactor = this.getBoundingRect(absolute).width / this.getScaledWidth();
            return this.scale(value / this.width / boundingRectFactor);
          },
          scaleToHeight: function(value, absolute) {
            var boundingRectFactor = this.getBoundingRect(absolute).height / this.getScaledHeight();
            return this.scale(value / this.height / boundingRectFactor);
          },
          calcCoords: function(absolute) {
            if (absolute) {
              return this.calcACoords();
            }
            return this.calcOCoords();
          },
          calcLineCoords: function() {
            var vpt = this.getViewportTransform(), padding2 = this.padding, angle = degreesToRadians(this.angle), cos = util.cos(angle), sin = util.sin(angle), cosP = cos * padding2, sinP = sin * padding2, cosPSinP = cosP + sinP, cosPMinusSinP = cosP - sinP, aCoords = this.calcACoords();
            var lineCoords = {
              tl: transformPoint(aCoords.tl, vpt),
              tr: transformPoint(aCoords.tr, vpt),
              bl: transformPoint(aCoords.bl, vpt),
              br: transformPoint(aCoords.br, vpt)
            };
            if (padding2) {
              lineCoords.tl.x -= cosPMinusSinP;
              lineCoords.tl.y -= cosPSinP;
              lineCoords.tr.x += cosPSinP;
              lineCoords.tr.y -= cosPMinusSinP;
              lineCoords.bl.x -= cosPSinP;
              lineCoords.bl.y += cosPMinusSinP;
              lineCoords.br.x += cosPMinusSinP;
              lineCoords.br.y += cosPSinP;
            }
            return lineCoords;
          },
          calcOCoords: function() {
            var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), vpt = this.getViewportTransform(), startMatrix = multiplyMatrices(vpt, translateMatrix), finalMatrix = multiplyMatrices(startMatrix, rotateMatrix), finalMatrix = multiplyMatrices(finalMatrix, [1 / vpt[0], 0, 0, 1 / vpt[3], 0, 0]), dim = this._calculateCurrentDimensions(), coords = {};
            this.forEachControl(function(control, key, fabricObject) {
              coords[key] = control.positionHandler(dim, finalMatrix, fabricObject);
            });
            return coords;
          },
          calcACoords: function() {
            var rotateMatrix = this._calcRotateMatrix(), translateMatrix = this._calcTranslateMatrix(), finalMatrix = multiplyMatrices(translateMatrix, rotateMatrix), dim = this._getTransformedDimensions(), w = dim.x / 2, h = dim.y / 2;
            return {
              tl: transformPoint({ x: -w, y: -h }, finalMatrix),
              tr: transformPoint({ x: w, y: -h }, finalMatrix),
              bl: transformPoint({ x: -w, y: h }, finalMatrix),
              br: transformPoint({ x: w, y: h }, finalMatrix)
            };
          },
          setCoords: function(skipCorners) {
            this.aCoords = this.calcACoords();
            this.lineCoords = this.group ? this.aCoords : this.calcLineCoords();
            if (skipCorners) {
              return this;
            }
            this.oCoords = this.calcOCoords();
            this._setCornerCoords && this._setCornerCoords();
            return this;
          },
          _calcRotateMatrix: function() {
            return util.calcRotateMatrix(this);
          },
          _calcTranslateMatrix: function() {
            var center = this.getCenterPoint();
            return [1, 0, 0, 1, center.x, center.y];
          },
          transformMatrixKey: function(skipGroup) {
            var sep = "_", prefix2 = "";
            if (!skipGroup && this.group) {
              prefix2 = this.group.transformMatrixKey(skipGroup) + sep;
            }
            ;
            return prefix2 + this.top + sep + this.left + sep + this.scaleX + sep + this.scaleY + sep + this.skewX + sep + this.skewY + sep + this.angle + sep + this.originX + sep + this.originY + sep + this.width + sep + this.height + sep + this.strokeWidth + this.flipX + this.flipY;
          },
          calcTransformMatrix: function(skipGroup) {
            var matrix = this.calcOwnMatrix();
            if (skipGroup || !this.group) {
              return matrix;
            }
            var key = this.transformMatrixKey(skipGroup), cache2 = this.matrixCache || (this.matrixCache = {});
            if (cache2.key === key) {
              return cache2.value;
            }
            if (this.group) {
              matrix = multiplyMatrices(this.group.calcTransformMatrix(false), matrix);
            }
            cache2.key = key;
            cache2.value = matrix;
            return matrix;
          },
          calcOwnMatrix: function() {
            var key = this.transformMatrixKey(true), cache2 = this.ownMatrixCache || (this.ownMatrixCache = {});
            if (cache2.key === key) {
              return cache2.value;
            }
            var tMatrix = this._calcTranslateMatrix(), options = {
              angle: this.angle,
              translateX: tMatrix[4],
              translateY: tMatrix[5],
              scaleX: this.scaleX,
              scaleY: this.scaleY,
              skewX: this.skewX,
              skewY: this.skewY,
              flipX: this.flipX,
              flipY: this.flipY
            };
            cache2.key = key;
            cache2.value = util.composeMatrix(options);
            return cache2.value;
          },
          _calcDimensionsTransformMatrix: function(skewX, skewY, flipping) {
            return util.calcDimensionsMatrix({
              skewX,
              skewY,
              scaleX: this.scaleX * (flipping && this.flipX ? -1 : 1),
              scaleY: this.scaleY * (flipping && this.flipY ? -1 : 1)
            });
          },
          _getNonTransformedDimensions: function() {
            var strokeWidth = this.strokeWidth, w = this.width + strokeWidth, h = this.height + strokeWidth;
            return { x: w, y: h };
          },
          _getTransformedDimensions: function(skewX, skewY) {
            if (typeof skewX === "undefined") {
              skewX = this.skewX;
            }
            if (typeof skewY === "undefined") {
              skewY = this.skewY;
            }
            var dimensions, dimX, dimY, noSkew = skewX === 0 && skewY === 0;
            if (this.strokeUniform) {
              dimX = this.width;
              dimY = this.height;
            } else {
              dimensions = this._getNonTransformedDimensions();
              dimX = dimensions.x;
              dimY = dimensions.y;
            }
            if (noSkew) {
              return this._finalizeDimensions(dimX * this.scaleX, dimY * this.scaleY);
            }
            var bbox = util.sizeAfterTransform(dimX, dimY, {
              scaleX: this.scaleX,
              scaleY: this.scaleY,
              skewX,
              skewY
            });
            return this._finalizeDimensions(bbox.x, bbox.y);
          },
          _finalizeDimensions: function(width2, height2) {
            return this.strokeUniform ? { x: width2 + this.strokeWidth, y: height2 + this.strokeWidth } : { x: width2, y: height2 };
          },
          _calculateCurrentDimensions: function() {
            var vpt = this.getViewportTransform(), dim = this._getTransformedDimensions(), p = transformPoint(dim, vpt, true);
            return p.scalarAdd(2 * this.padding);
          }
        });
      })();
      fabric4.util.object.extend(fabric4.Object.prototype, {
        sendToBack: function() {
          if (this.group) {
            fabric4.StaticCanvas.prototype.sendToBack.call(this.group, this);
          } else if (this.canvas) {
            this.canvas.sendToBack(this);
          }
          return this;
        },
        bringToFront: function() {
          if (this.group) {
            fabric4.StaticCanvas.prototype.bringToFront.call(this.group, this);
          } else if (this.canvas) {
            this.canvas.bringToFront(this);
          }
          return this;
        },
        sendBackwards: function(intersecting) {
          if (this.group) {
            fabric4.StaticCanvas.prototype.sendBackwards.call(this.group, this, intersecting);
          } else if (this.canvas) {
            this.canvas.sendBackwards(this, intersecting);
          }
          return this;
        },
        bringForward: function(intersecting) {
          if (this.group) {
            fabric4.StaticCanvas.prototype.bringForward.call(this.group, this, intersecting);
          } else if (this.canvas) {
            this.canvas.bringForward(this, intersecting);
          }
          return this;
        },
        moveTo: function(index) {
          if (this.group && this.group.type !== "activeSelection") {
            fabric4.StaticCanvas.prototype.moveTo.call(this.group, this, index);
          } else if (this.canvas) {
            this.canvas.moveTo(this, index);
          }
          return this;
        }
      });
      (function() {
        function getSvgColorString(prop, value) {
          if (!value) {
            return prop + ": none; ";
          } else if (value.toLive) {
            return prop + ": url(#SVGID_" + value.id + "); ";
          } else {
            var color2 = new fabric4.Color(value), str = prop + ": " + color2.toRgb() + "; ", opacity = color2.getAlpha();
            if (opacity !== 1) {
              str += prop + "-opacity: " + opacity.toString() + "; ";
            }
            return str;
          }
        }
        var toFixed = fabric4.util.toFixed;
        fabric4.util.object.extend(fabric4.Object.prototype, {
          getSvgStyles: function(skipShadow) {
            var fillRule = this.fillRule ? this.fillRule : "nonzero", strokeWidth = this.strokeWidth ? this.strokeWidth : "0", strokeDashArray = this.strokeDashArray ? this.strokeDashArray.join(" ") : "none", strokeDashOffset = this.strokeDashOffset ? this.strokeDashOffset : "0", strokeLineCap = this.strokeLineCap ? this.strokeLineCap : "butt", strokeLineJoin = this.strokeLineJoin ? this.strokeLineJoin : "miter", strokeMiterLimit = this.strokeMiterLimit ? this.strokeMiterLimit : "4", opacity = typeof this.opacity !== "undefined" ? this.opacity : "1", visibility2 = this.visible ? "" : " visibility: hidden;", filter = skipShadow ? "" : this.getSvgFilter(), fill = getSvgColorString("fill", this.fill), stroke = getSvgColorString("stroke", this.stroke);
            return [
              stroke,
              "stroke-width: ",
              strokeWidth,
              "; ",
              "stroke-dasharray: ",
              strokeDashArray,
              "; ",
              "stroke-linecap: ",
              strokeLineCap,
              "; ",
              "stroke-dashoffset: ",
              strokeDashOffset,
              "; ",
              "stroke-linejoin: ",
              strokeLineJoin,
              "; ",
              "stroke-miterlimit: ",
              strokeMiterLimit,
              "; ",
              fill,
              "fill-rule: ",
              fillRule,
              "; ",
              "opacity: ",
              opacity,
              ";",
              filter,
              visibility2
            ].join("");
          },
          getSvgSpanStyles: function(style3, useWhiteSpace) {
            var term = "; ";
            var fontFamily2 = style3.fontFamily ? "font-family: " + (style3.fontFamily.indexOf("'") === -1 && style3.fontFamily.indexOf('"') === -1 ? "'" + style3.fontFamily + "'" : style3.fontFamily) + term : "";
            var strokeWidth = style3.strokeWidth ? "stroke-width: " + style3.strokeWidth + term : "", fontFamily2 = fontFamily2, fontSize2 = style3.fontSize ? "font-size: " + style3.fontSize + "px" + term : "", fontStyle2 = style3.fontStyle ? "font-style: " + style3.fontStyle + term : "", fontWeight2 = style3.fontWeight ? "font-weight: " + style3.fontWeight + term : "", fill = style3.fill ? getSvgColorString("fill", style3.fill) : "", stroke = style3.stroke ? getSvgColorString("stroke", style3.stroke) : "", textDecoration = this.getSvgTextDecoration(style3), deltaY = style3.deltaY ? "baseline-shift: " + -style3.deltaY + "; " : "";
            if (textDecoration) {
              textDecoration = "text-decoration: " + textDecoration + term;
            }
            return [
              stroke,
              strokeWidth,
              fontFamily2,
              fontSize2,
              fontStyle2,
              fontWeight2,
              textDecoration,
              fill,
              deltaY,
              useWhiteSpace ? "white-space: pre; " : ""
            ].join("");
          },
          getSvgTextDecoration: function(style3) {
            return ["overline", "underline", "line-through"].filter(function(decoration) {
              return style3[decoration.replace("-", "")];
            }).join(" ");
          },
          getSvgFilter: function() {
            return this.shadow ? "filter: url(#SVGID_" + this.shadow.id + ");" : "";
          },
          getSvgCommons: function() {
            return [
              this.id ? 'id="' + this.id + '" ' : "",
              this.clipPath ? 'clip-path="url(#' + this.clipPath.clipPathId + ')" ' : ""
            ].join("");
          },
          getSvgTransform: function(full, additionalTransform) {
            var transform2 = full ? this.calcTransformMatrix() : this.calcOwnMatrix(), svgTransform = 'transform="' + fabric4.util.matrixToSVG(transform2);
            return svgTransform + (additionalTransform || "") + '" ';
          },
          _setSVGBg: function(textBgRects) {
            if (this.backgroundColor) {
              var NUM_FRACTION_DIGITS = fabric4.Object.NUM_FRACTION_DIGITS;
              textBgRects.push("		<rect ", this._getFillAttributes(this.backgroundColor), ' x="', toFixed(-this.width / 2, NUM_FRACTION_DIGITS), '" y="', toFixed(-this.height / 2, NUM_FRACTION_DIGITS), '" width="', toFixed(this.width, NUM_FRACTION_DIGITS), '" height="', toFixed(this.height, NUM_FRACTION_DIGITS), '"></rect>\n');
            }
          },
          toSVG: function(reviver) {
            return this._createBaseSVGMarkup(this._toSVG(reviver), { reviver });
          },
          toClipPathSVG: function(reviver) {
            return "	" + this._createBaseClipPathSVGMarkup(this._toSVG(reviver), { reviver });
          },
          _createBaseClipPathSVGMarkup: function(objectMarkup, options) {
            options = options || {};
            var reviver = options.reviver, additionalTransform = options.additionalTransform || "", commonPieces = [
              this.getSvgTransform(true, additionalTransform),
              this.getSvgCommons()
            ].join(""), index = objectMarkup.indexOf("COMMON_PARTS");
            objectMarkup[index] = commonPieces;
            return reviver ? reviver(objectMarkup.join("")) : objectMarkup.join("");
          },
          _createBaseSVGMarkup: function(objectMarkup, options) {
            options = options || {};
            var noStyle = options.noStyle, reviver = options.reviver, styleInfo = noStyle ? "" : 'style="' + this.getSvgStyles() + '" ', shadowInfo = options.withShadow ? 'style="' + this.getSvgFilter() + '" ' : "", clipPath = this.clipPath, vectorEffect = this.strokeUniform ? 'vector-effect="non-scaling-stroke" ' : "", absoluteClipPath = clipPath && clipPath.absolutePositioned, stroke = this.stroke, fill = this.fill, shadow = this.shadow, commonPieces, markup = [], clipPathMarkup, index = objectMarkup.indexOf("COMMON_PARTS"), additionalTransform = options.additionalTransform;
            if (clipPath) {
              clipPath.clipPathId = "CLIPPATH_" + fabric4.Object.__uid++;
              clipPathMarkup = '<clipPath id="' + clipPath.clipPathId + '" >\n' + clipPath.toClipPathSVG(reviver) + "</clipPath>\n";
            }
            if (absoluteClipPath) {
              markup.push("<g ", shadowInfo, this.getSvgCommons(), " >\n");
            }
            markup.push("<g ", this.getSvgTransform(false), !absoluteClipPath ? shadowInfo + this.getSvgCommons() : "", " >\n");
            commonPieces = [
              styleInfo,
              vectorEffect,
              noStyle ? "" : this.addPaintOrder(),
              " ",
              additionalTransform ? 'transform="' + additionalTransform + '" ' : ""
            ].join("");
            objectMarkup[index] = commonPieces;
            if (fill && fill.toLive) {
              markup.push(fill.toSVG(this));
            }
            if (stroke && stroke.toLive) {
              markup.push(stroke.toSVG(this));
            }
            if (shadow) {
              markup.push(shadow.toSVG(this));
            }
            if (clipPath) {
              markup.push(clipPathMarkup);
            }
            markup.push(objectMarkup.join(""));
            markup.push("</g>\n");
            absoluteClipPath && markup.push("</g>\n");
            return reviver ? reviver(markup.join("")) : markup.join("");
          },
          addPaintOrder: function() {
            return this.paintFirst !== "fill" ? ' paint-order="' + this.paintFirst + '" ' : "";
          }
        });
      })();
      (function() {
        var extend = fabric4.util.object.extend, originalSet = "stateProperties";
        function saveProps(origin, destination, props) {
          var tmpObj = {}, deep = true;
          props.forEach(function(prop) {
            tmpObj[prop] = origin[prop];
          });
          extend(origin[destination], tmpObj, deep);
        }
        function _isEqual(origValue, currentValue, firstPass) {
          if (origValue === currentValue) {
            return true;
          } else if (Array.isArray(origValue)) {
            if (!Array.isArray(currentValue) || origValue.length !== currentValue.length) {
              return false;
            }
            for (var i = 0, len = origValue.length; i < len; i++) {
              if (!_isEqual(origValue[i], currentValue[i])) {
                return false;
              }
            }
            return true;
          } else if (origValue && typeof origValue === "object") {
            var keys = Object.keys(origValue), key;
            if (!currentValue || typeof currentValue !== "object" || !firstPass && keys.length !== Object.keys(currentValue).length) {
              return false;
            }
            for (var i = 0, len = keys.length; i < len; i++) {
              key = keys[i];
              if (key === "canvas" || key === "group") {
                continue;
              }
              if (!_isEqual(origValue[key], currentValue[key])) {
                return false;
              }
            }
            return true;
          }
        }
        fabric4.util.object.extend(fabric4.Object.prototype, {
          hasStateChanged: function(propertySet) {
            propertySet = propertySet || originalSet;
            var dashedPropertySet = "_" + propertySet;
            if (Object.keys(this[dashedPropertySet]).length < this[propertySet].length) {
              return true;
            }
            return !_isEqual(this[dashedPropertySet], this, true);
          },
          saveState: function(options) {
            var propertySet = options && options.propertySet || originalSet, destination = "_" + propertySet;
            if (!this[destination]) {
              return this.setupState(options);
            }
            saveProps(this, destination, this[propertySet]);
            if (options && options.stateProperties) {
              saveProps(this, destination, options.stateProperties);
            }
            return this;
          },
          setupState: function(options) {
            options = options || {};
            var propertySet = options.propertySet || originalSet;
            options.propertySet = propertySet;
            this["_" + propertySet] = {};
            this.saveState(options);
            return this;
          }
        });
      })();
      (function() {
        var degreesToRadians = fabric4.util.degreesToRadians;
        fabric4.util.object.extend(fabric4.Object.prototype, {
          _findTargetCorner: function(pointer, forTouch) {
            if (!this.hasControls || this.group || (!this.canvas || this.canvas._activeObject !== this)) {
              return false;
            }
            var ex = pointer.x, ey = pointer.y, xPoints, lines, keys = Object.keys(this.oCoords), j = keys.length - 1, i;
            this.__corner = 0;
            for (; j >= 0; j--) {
              i = keys[j];
              if (!this.isControlVisible(i)) {
                continue;
              }
              lines = this._getImageLines(forTouch ? this.oCoords[i].touchCorner : this.oCoords[i].corner);
              xPoints = this._findCrossPoints({ x: ex, y: ey }, lines);
              if (xPoints !== 0 && xPoints % 2 === 1) {
                this.__corner = i;
                return i;
              }
            }
            return false;
          },
          forEachControl: function(fn) {
            for (var i in this.controls) {
              fn(this.controls[i], i, this);
            }
            ;
          },
          _setCornerCoords: function() {
            var coords = this.oCoords;
            for (var control in coords) {
              var controlObject = this.controls[control];
              coords[control].corner = controlObject.calcCornerCoords(this.angle, this.cornerSize, coords[control].x, coords[control].y, false);
              coords[control].touchCorner = controlObject.calcCornerCoords(this.angle, this.touchCornerSize, coords[control].x, coords[control].y, true);
            }
          },
          drawSelectionBackground: function(ctx) {
            if (!this.selectionBackgroundColor || this.canvas && !this.canvas.interactive || this.canvas && this.canvas._activeObject !== this) {
              return this;
            }
            ctx.save();
            var center = this.getCenterPoint(), wh = this._calculateCurrentDimensions(), vpt = this.canvas.viewportTransform;
            ctx.translate(center.x, center.y);
            ctx.scale(1 / vpt[0], 1 / vpt[3]);
            ctx.rotate(degreesToRadians(this.angle));
            ctx.fillStyle = this.selectionBackgroundColor;
            ctx.fillRect(-wh.x / 2, -wh.y / 2, wh.x, wh.y);
            ctx.restore();
            return this;
          },
          drawBorders: function(ctx, styleOverride) {
            styleOverride = styleOverride || {};
            var wh = this._calculateCurrentDimensions(), strokeWidth = this.borderScaleFactor, width2 = wh.x + strokeWidth, height2 = wh.y + strokeWidth, hasControls = typeof styleOverride.hasControls !== "undefined" ? styleOverride.hasControls : this.hasControls, shouldStroke = false;
            ctx.save();
            ctx.strokeStyle = styleOverride.borderColor || this.borderColor;
            this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);
            ctx.strokeRect(-width2 / 2, -height2 / 2, width2, height2);
            if (hasControls) {
              ctx.beginPath();
              this.forEachControl(function(control, key, fabricObject) {
                if (control.withConnection && control.getVisibility(fabricObject, key)) {
                  shouldStroke = true;
                  ctx.moveTo(control.x * width2, control.y * height2);
                  ctx.lineTo(control.x * width2 + control.offsetX, control.y * height2 + control.offsetY);
                }
              });
              if (shouldStroke) {
                ctx.stroke();
              }
            }
            ctx.restore();
            return this;
          },
          drawBordersInGroup: function(ctx, options, styleOverride) {
            styleOverride = styleOverride || {};
            var bbox = fabric4.util.sizeAfterTransform(this.width, this.height, options), strokeWidth = this.strokeWidth, strokeUniform = this.strokeUniform, borderScaleFactor = this.borderScaleFactor, width2 = bbox.x + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleX) + borderScaleFactor, height2 = bbox.y + strokeWidth * (strokeUniform ? this.canvas.getZoom() : options.scaleY) + borderScaleFactor;
            ctx.save();
            this._setLineDash(ctx, styleOverride.borderDashArray || this.borderDashArray);
            ctx.strokeStyle = styleOverride.borderColor || this.borderColor;
            ctx.strokeRect(-width2 / 2, -height2 / 2, width2, height2);
            ctx.restore();
            return this;
          },
          drawControls: function(ctx, styleOverride) {
            styleOverride = styleOverride || {};
            ctx.save();
            var retinaScaling = this.canvas.getRetinaScaling(), matrix, p;
            ctx.setTransform(retinaScaling, 0, 0, retinaScaling, 0, 0);
            ctx.strokeStyle = ctx.fillStyle = styleOverride.cornerColor || this.cornerColor;
            if (!this.transparentCorners) {
              ctx.strokeStyle = styleOverride.cornerStrokeColor || this.cornerStrokeColor;
            }
            this._setLineDash(ctx, styleOverride.cornerDashArray || this.cornerDashArray);
            this.setCoords();
            if (this.group) {
              matrix = this.group.calcTransformMatrix();
            }
            this.forEachControl(function(control, key, fabricObject) {
              p = fabricObject.oCoords[key];
              if (control.getVisibility(fabricObject, key)) {
                if (matrix) {
                  p = fabric4.util.transformPoint(p, matrix);
                }
                control.render(ctx, p.x, p.y, styleOverride, fabricObject);
              }
            });
            ctx.restore();
            return this;
          },
          isControlVisible: function(controlKey) {
            return this.controls[controlKey] && this.controls[controlKey].getVisibility(this, controlKey);
          },
          setControlVisible: function(controlKey, visible) {
            if (!this._controlsVisibility) {
              this._controlsVisibility = {};
            }
            this._controlsVisibility[controlKey] = visible;
            return this;
          },
          setControlsVisibility: function(options) {
            options || (options = {});
            for (var p in options) {
              this.setControlVisible(p, options[p]);
            }
            return this;
          },
          onDeselect: function() {
          },
          onSelect: function() {
          }
        });
      })();
      fabric4.util.object.extend(fabric4.StaticCanvas.prototype, {
        FX_DURATION: 500,
        fxCenterObjectH: function(object, callbacks) {
          callbacks = callbacks || {};
          var empty = function() {
          }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
          fabric4.util.animate({
            startValue: object.left,
            endValue: this.getCenter().left,
            duration: this.FX_DURATION,
            onChange: function(value) {
              object.set("left", value);
              _this.requestRenderAll();
              onChange();
            },
            onComplete: function() {
              object.setCoords();
              onComplete();
            }
          });
          return this;
        },
        fxCenterObjectV: function(object, callbacks) {
          callbacks = callbacks || {};
          var empty = function() {
          }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
          fabric4.util.animate({
            startValue: object.top,
            endValue: this.getCenter().top,
            duration: this.FX_DURATION,
            onChange: function(value) {
              object.set("top", value);
              _this.requestRenderAll();
              onChange();
            },
            onComplete: function() {
              object.setCoords();
              onComplete();
            }
          });
          return this;
        },
        fxRemove: function(object, callbacks) {
          callbacks = callbacks || {};
          var empty = function() {
          }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
          fabric4.util.animate({
            startValue: object.opacity,
            endValue: 0,
            duration: this.FX_DURATION,
            onChange: function(value) {
              object.set("opacity", value);
              _this.requestRenderAll();
              onChange();
            },
            onComplete: function() {
              _this.remove(object);
              onComplete();
            }
          });
          return this;
        }
      });
      fabric4.util.object.extend(fabric4.Object.prototype, {
        animate: function() {
          if (arguments[0] && typeof arguments[0] === "object") {
            var propsToAnimate = [], prop, skipCallbacks;
            for (prop in arguments[0]) {
              propsToAnimate.push(prop);
            }
            for (var i = 0, len = propsToAnimate.length; i < len; i++) {
              prop = propsToAnimate[i];
              skipCallbacks = i !== len - 1;
              this._animate(prop, arguments[0][prop], arguments[1], skipCallbacks);
            }
          } else {
            this._animate.apply(this, arguments);
          }
          return this;
        },
        _animate: function(property, to, options, skipCallbacks) {
          var _this = this, propPair;
          to = to.toString();
          if (!options) {
            options = {};
          } else {
            options = fabric4.util.object.clone(options);
          }
          if (~property.indexOf(".")) {
            propPair = property.split(".");
          }
          var propIsColor = _this.colorProperties.indexOf(property) > -1 || propPair && _this.colorProperties.indexOf(propPair[1]) > -1;
          var currentValue = propPair ? this.get(propPair[0])[propPair[1]] : this.get(property);
          if (!("from" in options)) {
            options.from = currentValue;
          }
          if (!propIsColor) {
            if (~to.indexOf("=")) {
              to = currentValue + parseFloat(to.replace("=", ""));
            } else {
              to = parseFloat(to);
            }
          }
          var _options = {
            startValue: options.from,
            endValue: to,
            byValue: options.by,
            easing: options.easing,
            duration: options.duration,
            abort: options.abort && function(value, valueProgress, timeProgress) {
              return options.abort.call(_this, value, valueProgress, timeProgress);
            },
            onChange: function(value, valueProgress, timeProgress) {
              if (propPair) {
                _this[propPair[0]][propPair[1]] = value;
              } else {
                _this.set(property, value);
              }
              if (skipCallbacks) {
                return;
              }
              options.onChange && options.onChange(value, valueProgress, timeProgress);
            },
            onComplete: function(value, valueProgress, timeProgress) {
              if (skipCallbacks) {
                return;
              }
              _this.setCoords();
              options.onComplete && options.onComplete(value, valueProgress, timeProgress);
            }
          };
          if (propIsColor) {
            return fabric4.util.animateColor(_options.startValue, _options.endValue, _options.duration, _options);
          } else {
            return fabric4.util.animate(_options);
          }
        }
      });
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), extend = fabric5.util.object.extend, clone = fabric5.util.object.clone, coordProps = { x1: 1, x2: 1, y1: 1, y2: 1 };
        if (fabric5.Line) {
          fabric5.warn("fabric.Line is already defined");
          return;
        }
        fabric5.Line = fabric5.util.createClass(fabric5.Object, {
          type: "line",
          x1: 0,
          y1: 0,
          x2: 0,
          y2: 0,
          cacheProperties: fabric5.Object.prototype.cacheProperties.concat("x1", "x2", "y1", "y2"),
          initialize: function(points, options) {
            if (!points) {
              points = [0, 0, 0, 0];
            }
            this.callSuper("initialize", options);
            this.set("x1", points[0]);
            this.set("y1", points[1]);
            this.set("x2", points[2]);
            this.set("y2", points[3]);
            this._setWidthHeight(options);
          },
          _setWidthHeight: function(options) {
            options || (options = {});
            this.width = Math.abs(this.x2 - this.x1);
            this.height = Math.abs(this.y2 - this.y1);
            this.left = "left" in options ? options.left : this._getLeftToOriginX();
            this.top = "top" in options ? options.top : this._getTopToOriginY();
          },
          _set: function(key, value) {
            this.callSuper("_set", key, value);
            if (typeof coordProps[key] !== "undefined") {
              this._setWidthHeight();
            }
            return this;
          },
          _getLeftToOriginX: makeEdgeToOriginGetter({
            origin: "originX",
            axis1: "x1",
            axis2: "x2",
            dimension: "width"
          }, {
            nearest: "left",
            center: "center",
            farthest: "right"
          }),
          _getTopToOriginY: makeEdgeToOriginGetter({
            origin: "originY",
            axis1: "y1",
            axis2: "y2",
            dimension: "height"
          }, {
            nearest: "top",
            center: "center",
            farthest: "bottom"
          }),
          _render: function(ctx) {
            ctx.beginPath();
            var p = this.calcLinePoints();
            ctx.moveTo(p.x1, p.y1);
            ctx.lineTo(p.x2, p.y2);
            ctx.lineWidth = this.strokeWidth;
            var origStrokeStyle = ctx.strokeStyle;
            ctx.strokeStyle = this.stroke || ctx.fillStyle;
            this.stroke && this._renderStroke(ctx);
            ctx.strokeStyle = origStrokeStyle;
          },
          _findCenterFromElement: function() {
            return {
              x: (this.x1 + this.x2) / 2,
              y: (this.y1 + this.y2) / 2
            };
          },
          toObject: function(propertiesToInclude) {
            return extend(this.callSuper("toObject", propertiesToInclude), this.calcLinePoints());
          },
          _getNonTransformedDimensions: function() {
            var dim = this.callSuper("_getNonTransformedDimensions");
            if (this.strokeLineCap === "butt") {
              if (this.width === 0) {
                dim.y -= this.strokeWidth;
              }
              if (this.height === 0) {
                dim.x -= this.strokeWidth;
              }
            }
            return dim;
          },
          calcLinePoints: function() {
            var xMult = this.x1 <= this.x2 ? -1 : 1, yMult = this.y1 <= this.y2 ? -1 : 1, x1 = xMult * this.width * 0.5, y1 = yMult * this.height * 0.5, x2 = xMult * this.width * -0.5, y2 = yMult * this.height * -0.5;
            return {
              x1,
              x2,
              y1,
              y2
            };
          },
          _toSVG: function() {
            var p = this.calcLinePoints();
            return [
              "<line ",
              "COMMON_PARTS",
              'x1="',
              p.x1,
              '" y1="',
              p.y1,
              '" x2="',
              p.x2,
              '" y2="',
              p.y2,
              '" />\n'
            ];
          }
        });
        fabric5.Line.ATTRIBUTE_NAMES = fabric5.SHARED_ATTRIBUTES.concat("x1 y1 x2 y2".split(" "));
        fabric5.Line.fromElement = function(element, callback, options) {
          options = options || {};
          var parsedAttributes = fabric5.parseAttributes(element, fabric5.Line.ATTRIBUTE_NAMES), points = [
            parsedAttributes.x1 || 0,
            parsedAttributes.y1 || 0,
            parsedAttributes.x2 || 0,
            parsedAttributes.y2 || 0
          ];
          callback(new fabric5.Line(points, extend(parsedAttributes, options)));
        };
        fabric5.Line.fromObject = function(object, callback) {
          function _callback(instance) {
            delete instance.points;
            callback && callback(instance);
          }
          ;
          var options = clone(object, true);
          options.points = [object.x1, object.y1, object.x2, object.y2];
          fabric5.Object._fromObject("Line", options, _callback, "points");
        };
        function makeEdgeToOriginGetter(propertyNames, originValues) {
          var origin = propertyNames.origin, axis1 = propertyNames.axis1, axis2 = propertyNames.axis2, dimension = propertyNames.dimension, nearest = originValues.nearest, center = originValues.center, farthest = originValues.farthest;
          return function() {
            switch (this.get(origin)) {
              case nearest:
                return Math.min(this.get(axis1), this.get(axis2));
              case center:
                return Math.min(this.get(axis1), this.get(axis2)) + 0.5 * this.get(dimension);
              case farthest:
                return Math.max(this.get(axis1), this.get(axis2));
            }
          };
        }
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), pi = Math.PI;
        if (fabric5.Circle) {
          fabric5.warn("fabric.Circle is already defined.");
          return;
        }
        fabric5.Circle = fabric5.util.createClass(fabric5.Object, {
          type: "circle",
          radius: 0,
          startAngle: 0,
          endAngle: pi * 2,
          cacheProperties: fabric5.Object.prototype.cacheProperties.concat("radius", "startAngle", "endAngle"),
          _set: function(key, value) {
            this.callSuper("_set", key, value);
            if (key === "radius") {
              this.setRadius(value);
            }
            return this;
          },
          toObject: function(propertiesToInclude) {
            return this.callSuper("toObject", ["radius", "startAngle", "endAngle"].concat(propertiesToInclude));
          },
          _toSVG: function() {
            var svgString, x = 0, y = 0, angle = (this.endAngle - this.startAngle) % (2 * pi);
            if (angle === 0) {
              svgString = [
                "<circle ",
                "COMMON_PARTS",
                'cx="' + x + '" cy="' + y + '" ',
                'r="',
                this.radius,
                '" />\n'
              ];
            } else {
              var startX = fabric5.util.cos(this.startAngle) * this.radius, startY = fabric5.util.sin(this.startAngle) * this.radius, endX = fabric5.util.cos(this.endAngle) * this.radius, endY = fabric5.util.sin(this.endAngle) * this.radius, largeFlag = angle > pi ? "1" : "0";
              svgString = [
                '<path d="M ' + startX + " " + startY,
                " A " + this.radius + " " + this.radius,
                " 0 ",
                +largeFlag + " 1",
                " " + endX + " " + endY,
                '" ',
                "COMMON_PARTS",
                " />\n"
              ];
            }
            return svgString;
          },
          _render: function(ctx) {
            ctx.beginPath();
            ctx.arc(0, 0, this.radius, this.startAngle, this.endAngle, false);
            this._renderPaintInOrder(ctx);
          },
          getRadiusX: function() {
            return this.get("radius") * this.get("scaleX");
          },
          getRadiusY: function() {
            return this.get("radius") * this.get("scaleY");
          },
          setRadius: function(value) {
            this.radius = value;
            return this.set("width", value * 2).set("height", value * 2);
          }
        });
        fabric5.Circle.ATTRIBUTE_NAMES = fabric5.SHARED_ATTRIBUTES.concat("cx cy r".split(" "));
        fabric5.Circle.fromElement = function(element, callback) {
          var parsedAttributes = fabric5.parseAttributes(element, fabric5.Circle.ATTRIBUTE_NAMES);
          if (!isValidRadius(parsedAttributes)) {
            throw new Error("value of `r` attribute is required and can not be negative");
          }
          parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.radius;
          parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.radius;
          callback(new fabric5.Circle(parsedAttributes));
        };
        function isValidRadius(attributes) {
          return "radius" in attributes && attributes.radius >= 0;
        }
        fabric5.Circle.fromObject = function(object, callback) {
          fabric5.Object._fromObject("Circle", object, callback);
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {});
        if (fabric5.Triangle) {
          fabric5.warn("fabric.Triangle is already defined");
          return;
        }
        fabric5.Triangle = fabric5.util.createClass(fabric5.Object, {
          type: "triangle",
          width: 100,
          height: 100,
          _render: function(ctx) {
            var widthBy2 = this.width / 2, heightBy2 = this.height / 2;
            ctx.beginPath();
            ctx.moveTo(-widthBy2, heightBy2);
            ctx.lineTo(0, -heightBy2);
            ctx.lineTo(widthBy2, heightBy2);
            ctx.closePath();
            this._renderPaintInOrder(ctx);
          },
          _toSVG: function() {
            var widthBy2 = this.width / 2, heightBy2 = this.height / 2, points = [
              -widthBy2 + " " + heightBy2,
              "0 " + -heightBy2,
              widthBy2 + " " + heightBy2
            ].join(",");
            return [
              "<polygon ",
              "COMMON_PARTS",
              'points="',
              points,
              '" />'
            ];
          }
        });
        fabric5.Triangle.fromObject = function(object, callback) {
          return fabric5.Object._fromObject("Triangle", object, callback);
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), piBy2 = Math.PI * 2;
        if (fabric5.Ellipse) {
          fabric5.warn("fabric.Ellipse is already defined.");
          return;
        }
        fabric5.Ellipse = fabric5.util.createClass(fabric5.Object, {
          type: "ellipse",
          rx: 0,
          ry: 0,
          cacheProperties: fabric5.Object.prototype.cacheProperties.concat("rx", "ry"),
          initialize: function(options) {
            this.callSuper("initialize", options);
            this.set("rx", options && options.rx || 0);
            this.set("ry", options && options.ry || 0);
          },
          _set: function(key, value) {
            this.callSuper("_set", key, value);
            switch (key) {
              case "rx":
                this.rx = value;
                this.set("width", value * 2);
                break;
              case "ry":
                this.ry = value;
                this.set("height", value * 2);
                break;
            }
            return this;
          },
          getRx: function() {
            return this.get("rx") * this.get("scaleX");
          },
          getRy: function() {
            return this.get("ry") * this.get("scaleY");
          },
          toObject: function(propertiesToInclude) {
            return this.callSuper("toObject", ["rx", "ry"].concat(propertiesToInclude));
          },
          _toSVG: function() {
            return [
              "<ellipse ",
              "COMMON_PARTS",
              'cx="0" cy="0" ',
              'rx="',
              this.rx,
              '" ry="',
              this.ry,
              '" />\n'
            ];
          },
          _render: function(ctx) {
            ctx.beginPath();
            ctx.save();
            ctx.transform(1, 0, 0, this.ry / this.rx, 0, 0);
            ctx.arc(0, 0, this.rx, 0, piBy2, false);
            ctx.restore();
            this._renderPaintInOrder(ctx);
          }
        });
        fabric5.Ellipse.ATTRIBUTE_NAMES = fabric5.SHARED_ATTRIBUTES.concat("cx cy rx ry".split(" "));
        fabric5.Ellipse.fromElement = function(element, callback) {
          var parsedAttributes = fabric5.parseAttributes(element, fabric5.Ellipse.ATTRIBUTE_NAMES);
          parsedAttributes.left = (parsedAttributes.left || 0) - parsedAttributes.rx;
          parsedAttributes.top = (parsedAttributes.top || 0) - parsedAttributes.ry;
          callback(new fabric5.Ellipse(parsedAttributes));
        };
        fabric5.Ellipse.fromObject = function(object, callback) {
          fabric5.Object._fromObject("Ellipse", object, callback);
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), extend = fabric5.util.object.extend;
        if (fabric5.Rect) {
          fabric5.warn("fabric.Rect is already defined");
          return;
        }
        fabric5.Rect = fabric5.util.createClass(fabric5.Object, {
          stateProperties: fabric5.Object.prototype.stateProperties.concat("rx", "ry"),
          type: "rect",
          rx: 0,
          ry: 0,
          cacheProperties: fabric5.Object.prototype.cacheProperties.concat("rx", "ry"),
          initialize: function(options) {
            this.callSuper("initialize", options);
            this._initRxRy();
          },
          _initRxRy: function() {
            if (this.rx && !this.ry) {
              this.ry = this.rx;
            } else if (this.ry && !this.rx) {
              this.rx = this.ry;
            }
          },
          _render: function(ctx) {
            var rx = this.rx ? Math.min(this.rx, this.width / 2) : 0, ry = this.ry ? Math.min(this.ry, this.height / 2) : 0, w = this.width, h = this.height, x = -this.width / 2, y = -this.height / 2, isRounded = rx !== 0 || ry !== 0, k = 1 - 0.5522847498;
            ctx.beginPath();
            ctx.moveTo(x + rx, y);
            ctx.lineTo(x + w - rx, y);
            isRounded && ctx.bezierCurveTo(x + w - k * rx, y, x + w, y + k * ry, x + w, y + ry);
            ctx.lineTo(x + w, y + h - ry);
            isRounded && ctx.bezierCurveTo(x + w, y + h - k * ry, x + w - k * rx, y + h, x + w - rx, y + h);
            ctx.lineTo(x + rx, y + h);
            isRounded && ctx.bezierCurveTo(x + k * rx, y + h, x, y + h - k * ry, x, y + h - ry);
            ctx.lineTo(x, y + ry);
            isRounded && ctx.bezierCurveTo(x, y + k * ry, x + k * rx, y, x + rx, y);
            ctx.closePath();
            this._renderPaintInOrder(ctx);
          },
          toObject: function(propertiesToInclude) {
            return this.callSuper("toObject", ["rx", "ry"].concat(propertiesToInclude));
          },
          _toSVG: function() {
            var x = -this.width / 2, y = -this.height / 2;
            return [
              "<rect ",
              "COMMON_PARTS",
              'x="',
              x,
              '" y="',
              y,
              '" rx="',
              this.rx,
              '" ry="',
              this.ry,
              '" width="',
              this.width,
              '" height="',
              this.height,
              '" />\n'
            ];
          }
        });
        fabric5.Rect.ATTRIBUTE_NAMES = fabric5.SHARED_ATTRIBUTES.concat("x y rx ry width height".split(" "));
        fabric5.Rect.fromElement = function(element, callback, options) {
          if (!element) {
            return callback(null);
          }
          options = options || {};
          var parsedAttributes = fabric5.parseAttributes(element, fabric5.Rect.ATTRIBUTE_NAMES);
          parsedAttributes.left = parsedAttributes.left || 0;
          parsedAttributes.top = parsedAttributes.top || 0;
          parsedAttributes.height = parsedAttributes.height || 0;
          parsedAttributes.width = parsedAttributes.width || 0;
          var rect = new fabric5.Rect(extend(options ? fabric5.util.object.clone(options) : {}, parsedAttributes));
          rect.visible = rect.visible && rect.width > 0 && rect.height > 0;
          callback(rect);
        };
        fabric5.Rect.fromObject = function(object, callback) {
          return fabric5.Object._fromObject("Rect", object, callback);
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), extend = fabric5.util.object.extend, min = fabric5.util.array.min, max = fabric5.util.array.max, toFixed = fabric5.util.toFixed;
        if (fabric5.Polyline) {
          fabric5.warn("fabric.Polyline is already defined");
          return;
        }
        fabric5.Polyline = fabric5.util.createClass(fabric5.Object, {
          type: "polyline",
          points: null,
          cacheProperties: fabric5.Object.prototype.cacheProperties.concat("points"),
          initialize: function(points, options) {
            options = options || {};
            this.points = points || [];
            this.callSuper("initialize", options);
            this._setPositionDimensions(options);
          },
          _setPositionDimensions: function(options) {
            var calcDim = this._calcDimensions(options), correctLeftTop;
            this.width = calcDim.width;
            this.height = calcDim.height;
            if (!options.fromSVG) {
              correctLeftTop = this.translateToGivenOrigin({ x: calcDim.left - this.strokeWidth / 2, y: calcDim.top - this.strokeWidth / 2 }, "left", "top", this.originX, this.originY);
            }
            if (typeof options.left === "undefined") {
              this.left = options.fromSVG ? calcDim.left : correctLeftTop.x;
            }
            if (typeof options.top === "undefined") {
              this.top = options.fromSVG ? calcDim.top : correctLeftTop.y;
            }
            this.pathOffset = {
              x: calcDim.left + this.width / 2,
              y: calcDim.top + this.height / 2
            };
          },
          _calcDimensions: function() {
            var points = this.points, minX = min(points, "x") || 0, minY = min(points, "y") || 0, maxX = max(points, "x") || 0, maxY = max(points, "y") || 0, width2 = maxX - minX, height2 = maxY - minY;
            return {
              left: minX,
              top: minY,
              width: width2,
              height: height2
            };
          },
          toObject: function(propertiesToInclude) {
            return extend(this.callSuper("toObject", propertiesToInclude), {
              points: this.points.concat()
            });
          },
          _toSVG: function() {
            var points = [], diffX = this.pathOffset.x, diffY = this.pathOffset.y, NUM_FRACTION_DIGITS = fabric5.Object.NUM_FRACTION_DIGITS;
            for (var i = 0, len = this.points.length; i < len; i++) {
              points.push(toFixed(this.points[i].x - diffX, NUM_FRACTION_DIGITS), ",", toFixed(this.points[i].y - diffY, NUM_FRACTION_DIGITS), " ");
            }
            return [
              "<" + this.type + " ",
              "COMMON_PARTS",
              'points="',
              points.join(""),
              '" />\n'
            ];
          },
          commonRender: function(ctx) {
            var point, len = this.points.length, x = this.pathOffset.x, y = this.pathOffset.y;
            if (!len || isNaN(this.points[len - 1].y)) {
              return false;
            }
            ctx.beginPath();
            ctx.moveTo(this.points[0].x - x, this.points[0].y - y);
            for (var i = 0; i < len; i++) {
              point = this.points[i];
              ctx.lineTo(point.x - x, point.y - y);
            }
            return true;
          },
          _render: function(ctx) {
            if (!this.commonRender(ctx)) {
              return;
            }
            this._renderPaintInOrder(ctx);
          },
          complexity: function() {
            return this.get("points").length;
          }
        });
        fabric5.Polyline.ATTRIBUTE_NAMES = fabric5.SHARED_ATTRIBUTES.concat();
        fabric5.Polyline.fromElementGenerator = function(_class) {
          return function(element, callback, options) {
            if (!element) {
              return callback(null);
            }
            options || (options = {});
            var points = fabric5.parsePointsAttribute(element.getAttribute("points")), parsedAttributes = fabric5.parseAttributes(element, fabric5[_class].ATTRIBUTE_NAMES);
            parsedAttributes.fromSVG = true;
            callback(new fabric5[_class](points, extend(parsedAttributes, options)));
          };
        };
        fabric5.Polyline.fromElement = fabric5.Polyline.fromElementGenerator("Polyline");
        fabric5.Polyline.fromObject = function(object, callback) {
          return fabric5.Object._fromObject("Polyline", object, callback, "points");
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {});
        if (fabric5.Polygon) {
          fabric5.warn("fabric.Polygon is already defined");
          return;
        }
        fabric5.Polygon = fabric5.util.createClass(fabric5.Polyline, {
          type: "polygon",
          _render: function(ctx) {
            if (!this.commonRender(ctx)) {
              return;
            }
            ctx.closePath();
            this._renderPaintInOrder(ctx);
          }
        });
        fabric5.Polygon.ATTRIBUTE_NAMES = fabric5.SHARED_ATTRIBUTES.concat();
        fabric5.Polygon.fromElement = fabric5.Polyline.fromElementGenerator("Polygon");
        fabric5.Polygon.fromObject = function(object, callback) {
          fabric5.Object._fromObject("Polygon", object, callback, "points");
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), min = fabric5.util.array.min, max = fabric5.util.array.max, extend = fabric5.util.object.extend, _toString = Object.prototype.toString, toFixed = fabric5.util.toFixed;
        if (fabric5.Path) {
          fabric5.warn("fabric.Path is already defined");
          return;
        }
        fabric5.Path = fabric5.util.createClass(fabric5.Object, {
          type: "path",
          path: null,
          cacheProperties: fabric5.Object.prototype.cacheProperties.concat("path", "fillRule"),
          stateProperties: fabric5.Object.prototype.stateProperties.concat("path"),
          initialize: function(path, options) {
            options = options || {};
            this.callSuper("initialize", options);
            if (!path) {
              path = [];
            }
            var fromArray = _toString.call(path) === "[object Array]";
            this.path = fabric5.util.makePathSimpler(fromArray ? path : fabric5.util.parsePath(path));
            if (!this.path) {
              return;
            }
            fabric5.Polyline.prototype._setPositionDimensions.call(this, options);
          },
          _renderPathCommands: function(ctx) {
            var current, subpathStartX = 0, subpathStartY = 0, x = 0, y = 0, controlX = 0, controlY = 0, l = -this.pathOffset.x, t = -this.pathOffset.y;
            ctx.beginPath();
            for (var i = 0, len = this.path.length; i < len; ++i) {
              current = this.path[i];
              switch (current[0]) {
                case "L":
                  x = current[1];
                  y = current[2];
                  ctx.lineTo(x + l, y + t);
                  break;
                case "M":
                  x = current[1];
                  y = current[2];
                  subpathStartX = x;
                  subpathStartY = y;
                  ctx.moveTo(x + l, y + t);
                  break;
                case "C":
                  x = current[5];
                  y = current[6];
                  controlX = current[3];
                  controlY = current[4];
                  ctx.bezierCurveTo(current[1] + l, current[2] + t, controlX + l, controlY + t, x + l, y + t);
                  break;
                case "Q":
                  ctx.quadraticCurveTo(current[1] + l, current[2] + t, current[3] + l, current[4] + t);
                  x = current[3];
                  y = current[4];
                  controlX = current[1];
                  controlY = current[2];
                  break;
                case "z":
                case "Z":
                  x = subpathStartX;
                  y = subpathStartY;
                  ctx.closePath();
                  break;
              }
            }
          },
          _render: function(ctx) {
            this._renderPathCommands(ctx);
            this._renderPaintInOrder(ctx);
          },
          toString: function() {
            return "#<fabric.Path (" + this.complexity() + '): { "top": ' + this.top + ', "left": ' + this.left + " }>";
          },
          toObject: function(propertiesToInclude) {
            return extend(this.callSuper("toObject", propertiesToInclude), {
              path: this.path.map(function(item) {
                return item.slice();
              })
            });
          },
          toDatalessObject: function(propertiesToInclude) {
            var o = this.toObject(["sourcePath"].concat(propertiesToInclude));
            if (o.sourcePath) {
              delete o.path;
            }
            return o;
          },
          _toSVG: function() {
            var path = fabric5.util.joinPath(this.path);
            return [
              "<path ",
              "COMMON_PARTS",
              'd="',
              path,
              '" stroke-linecap="round" ',
              "/>\n"
            ];
          },
          _getOffsetTransform: function() {
            var digits = fabric5.Object.NUM_FRACTION_DIGITS;
            return " translate(" + toFixed(-this.pathOffset.x, digits) + ", " + toFixed(-this.pathOffset.y, digits) + ")";
          },
          toClipPathSVG: function(reviver) {
            var additionalTransform = this._getOffsetTransform();
            return "	" + this._createBaseClipPathSVGMarkup(this._toSVG(), { reviver, additionalTransform });
          },
          toSVG: function(reviver) {
            var additionalTransform = this._getOffsetTransform();
            return this._createBaseSVGMarkup(this._toSVG(), { reviver, additionalTransform });
          },
          complexity: function() {
            return this.path.length;
          },
          _calcDimensions: function() {
            var aX = [], aY = [], current, subpathStartX = 0, subpathStartY = 0, x = 0, y = 0, bounds;
            for (var i = 0, len = this.path.length; i < len; ++i) {
              current = this.path[i];
              switch (current[0]) {
                case "L":
                  x = current[1];
                  y = current[2];
                  bounds = [];
                  break;
                case "M":
                  x = current[1];
                  y = current[2];
                  subpathStartX = x;
                  subpathStartY = y;
                  bounds = [];
                  break;
                case "C":
                  bounds = fabric5.util.getBoundsOfCurve(x, y, current[1], current[2], current[3], current[4], current[5], current[6]);
                  x = current[5];
                  y = current[6];
                  break;
                case "Q":
                  bounds = fabric5.util.getBoundsOfCurve(x, y, current[1], current[2], current[1], current[2], current[3], current[4]);
                  x = current[3];
                  y = current[4];
                  break;
                case "z":
                case "Z":
                  x = subpathStartX;
                  y = subpathStartY;
                  break;
              }
              bounds.forEach(function(point) {
                aX.push(point.x);
                aY.push(point.y);
              });
              aX.push(x);
              aY.push(y);
            }
            var minX = min(aX) || 0, minY = min(aY) || 0, maxX = max(aX) || 0, maxY = max(aY) || 0, deltaX = maxX - minX, deltaY = maxY - minY;
            return {
              left: minX,
              top: minY,
              width: deltaX,
              height: deltaY
            };
          }
        });
        fabric5.Path.fromObject = function(object, callback) {
          if (typeof object.sourcePath === "string") {
            var pathUrl = object.sourcePath;
            fabric5.loadSVGFromURL(pathUrl, function(elements) {
              var path = elements[0];
              path.setOptions(object);
              callback && callback(path);
            });
          } else {
            fabric5.Object._fromObject("Path", object, callback, "path");
          }
        };
        fabric5.Path.ATTRIBUTE_NAMES = fabric5.SHARED_ATTRIBUTES.concat(["d"]);
        fabric5.Path.fromElement = function(element, callback, options) {
          var parsedAttributes = fabric5.parseAttributes(element, fabric5.Path.ATTRIBUTE_NAMES);
          parsedAttributes.fromSVG = true;
          callback(new fabric5.Path(parsedAttributes.d, extend(parsedAttributes, options)));
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), min = fabric5.util.array.min, max = fabric5.util.array.max;
        if (fabric5.Group) {
          return;
        }
        fabric5.Group = fabric5.util.createClass(fabric5.Object, fabric5.Collection, {
          type: "group",
          strokeWidth: 0,
          subTargetCheck: false,
          cacheProperties: [],
          useSetOnGroup: false,
          initialize: function(objects, options, isAlreadyGrouped) {
            options = options || {};
            this._objects = [];
            isAlreadyGrouped && this.callSuper("initialize", options);
            this._objects = objects || [];
            for (var i = this._objects.length; i--; ) {
              this._objects[i].group = this;
            }
            if (!isAlreadyGrouped) {
              var center = options && options.centerPoint;
              if (options.originX !== void 0) {
                this.originX = options.originX;
              }
              if (options.originY !== void 0) {
                this.originY = options.originY;
              }
              center || this._calcBounds();
              this._updateObjectsCoords(center);
              delete options.centerPoint;
              this.callSuper("initialize", options);
            } else {
              this._updateObjectsACoords();
            }
            this.setCoords();
          },
          _updateObjectsACoords: function() {
            var skipControls = true;
            for (var i = this._objects.length; i--; ) {
              this._objects[i].setCoords(skipControls);
            }
          },
          _updateObjectsCoords: function(center) {
            var center = center || this.getCenterPoint();
            for (var i = this._objects.length; i--; ) {
              this._updateObjectCoords(this._objects[i], center);
            }
          },
          _updateObjectCoords: function(object, center) {
            var objectLeft = object.left, objectTop = object.top, skipControls = true;
            object.set({
              left: objectLeft - center.x,
              top: objectTop - center.y
            });
            object.group = this;
            object.setCoords(skipControls);
          },
          toString: function() {
            return "#<fabric.Group: (" + this.complexity() + ")>";
          },
          addWithUpdate: function(object) {
            var nested = !!this.group;
            this._restoreObjectsState();
            fabric5.util.resetObjectTransform(this);
            if (object) {
              if (nested) {
                fabric5.util.removeTransformFromObject(object, this.group.calcTransformMatrix());
              }
              this._objects.push(object);
              object.group = this;
              object._set("canvas", this.canvas);
            }
            this._calcBounds();
            this._updateObjectsCoords();
            this.dirty = true;
            if (nested) {
              this.group.addWithUpdate();
            } else {
              this.setCoords();
            }
            return this;
          },
          removeWithUpdate: function(object) {
            this._restoreObjectsState();
            fabric5.util.resetObjectTransform(this);
            this.remove(object);
            this._calcBounds();
            this._updateObjectsCoords();
            this.setCoords();
            this.dirty = true;
            return this;
          },
          _onObjectAdded: function(object) {
            this.dirty = true;
            object.group = this;
            object._set("canvas", this.canvas);
          },
          _onObjectRemoved: function(object) {
            this.dirty = true;
            delete object.group;
          },
          _set: function(key, value) {
            var i = this._objects.length;
            if (this.useSetOnGroup) {
              while (i--) {
                this._objects[i].setOnGroup(key, value);
              }
            }
            if (key === "canvas") {
              while (i--) {
                this._objects[i]._set(key, value);
              }
            }
            fabric5.Object.prototype._set.call(this, key, value);
          },
          toObject: function(propertiesToInclude) {
            var _includeDefaultValues = this.includeDefaultValues;
            var objsToObject = this._objects.filter(function(obj2) {
              return !obj2.excludeFromExport;
            }).map(function(obj2) {
              var originalDefaults = obj2.includeDefaultValues;
              obj2.includeDefaultValues = _includeDefaultValues;
              var _obj = obj2.toObject(propertiesToInclude);
              obj2.includeDefaultValues = originalDefaults;
              return _obj;
            });
            var obj = fabric5.Object.prototype.toObject.call(this, propertiesToInclude);
            obj.objects = objsToObject;
            return obj;
          },
          toDatalessObject: function(propertiesToInclude) {
            var objsToObject, sourcePath = this.sourcePath;
            if (sourcePath) {
              objsToObject = sourcePath;
            } else {
              var _includeDefaultValues = this.includeDefaultValues;
              objsToObject = this._objects.map(function(obj2) {
                var originalDefaults = obj2.includeDefaultValues;
                obj2.includeDefaultValues = _includeDefaultValues;
                var _obj = obj2.toDatalessObject(propertiesToInclude);
                obj2.includeDefaultValues = originalDefaults;
                return _obj;
              });
            }
            var obj = fabric5.Object.prototype.toDatalessObject.call(this, propertiesToInclude);
            obj.objects = objsToObject;
            return obj;
          },
          render: function(ctx) {
            this._transformDone = true;
            this.callSuper("render", ctx);
            this._transformDone = false;
          },
          shouldCache: function() {
            var ownCache = fabric5.Object.prototype.shouldCache.call(this);
            if (ownCache) {
              for (var i = 0, len = this._objects.length; i < len; i++) {
                if (this._objects[i].willDrawShadow()) {
                  this.ownCaching = false;
                  return false;
                }
              }
            }
            return ownCache;
          },
          willDrawShadow: function() {
            if (fabric5.Object.prototype.willDrawShadow.call(this)) {
              return true;
            }
            for (var i = 0, len = this._objects.length; i < len; i++) {
              if (this._objects[i].willDrawShadow()) {
                return true;
              }
            }
            return false;
          },
          isOnACache: function() {
            return this.ownCaching || this.group && this.group.isOnACache();
          },
          drawObject: function(ctx) {
            for (var i = 0, len = this._objects.length; i < len; i++) {
              this._objects[i].render(ctx);
            }
            this._drawClipPath(ctx);
          },
          isCacheDirty: function(skipCanvas) {
            if (this.callSuper("isCacheDirty", skipCanvas)) {
              return true;
            }
            if (!this.statefullCache) {
              return false;
            }
            for (var i = 0, len = this._objects.length; i < len; i++) {
              if (this._objects[i].isCacheDirty(true)) {
                if (this._cacheCanvas) {
                  var x = this.cacheWidth / this.zoomX, y = this.cacheHeight / this.zoomY;
                  this._cacheContext.clearRect(-x / 2, -y / 2, x, y);
                }
                return true;
              }
            }
            return false;
          },
          _restoreObjectsState: function() {
            var groupMatrix = this.calcOwnMatrix();
            this._objects.forEach(function(object) {
              fabric5.util.addTransformToObject(object, groupMatrix);
              delete object.group;
              object.setCoords();
            });
            return this;
          },
          realizeTransform: function(object, parentMatrix) {
            fabric5.util.addTransformToObject(object, parentMatrix);
            return object;
          },
          destroy: function() {
            this._objects.forEach(function(object) {
              object.set("dirty", true);
            });
            return this._restoreObjectsState();
          },
          toActiveSelection: function() {
            if (!this.canvas) {
              return;
            }
            var objects = this._objects, canvas = this.canvas;
            this._objects = [];
            var options = this.toObject();
            delete options.objects;
            var activeSelection = new fabric5.ActiveSelection([]);
            activeSelection.set(options);
            activeSelection.type = "activeSelection";
            canvas.remove(this);
            objects.forEach(function(object) {
              object.group = activeSelection;
              object.dirty = true;
              canvas.add(object);
            });
            activeSelection.canvas = canvas;
            activeSelection._objects = objects;
            canvas._activeObject = activeSelection;
            activeSelection.setCoords();
            return activeSelection;
          },
          ungroupOnCanvas: function() {
            return this._restoreObjectsState();
          },
          setObjectsCoords: function() {
            var skipControls = true;
            this.forEachObject(function(object) {
              object.setCoords(skipControls);
            });
            return this;
          },
          _calcBounds: function(onlyWidthHeight) {
            var aX = [], aY = [], o, prop, coords, props = ["tr", "br", "bl", "tl"], i = 0, iLen = this._objects.length, j, jLen = props.length;
            for (; i < iLen; ++i) {
              o = this._objects[i];
              coords = o.calcACoords();
              for (j = 0; j < jLen; j++) {
                prop = props[j];
                aX.push(coords[prop].x);
                aY.push(coords[prop].y);
              }
              o.aCoords = coords;
            }
            this._getBounds(aX, aY, onlyWidthHeight);
          },
          _getBounds: function(aX, aY, onlyWidthHeight) {
            var minXY = new fabric5.Point(min(aX), min(aY)), maxXY = new fabric5.Point(max(aX), max(aY)), top2 = minXY.y || 0, left2 = minXY.x || 0, width2 = maxXY.x - minXY.x || 0, height2 = maxXY.y - minXY.y || 0;
            this.width = width2;
            this.height = height2;
            if (!onlyWidthHeight) {
              this.setPositionByOrigin({ x: left2, y: top2 }, "left", "top");
            }
          },
          _toSVG: function(reviver) {
            var svgString = ["<g ", "COMMON_PARTS", " >\n"];
            for (var i = 0, len = this._objects.length; i < len; i++) {
              svgString.push("		", this._objects[i].toSVG(reviver));
            }
            svgString.push("</g>\n");
            return svgString;
          },
          getSvgStyles: function() {
            var opacity = typeof this.opacity !== "undefined" && this.opacity !== 1 ? "opacity: " + this.opacity + ";" : "", visibility2 = this.visible ? "" : " visibility: hidden;";
            return [
              opacity,
              this.getSvgFilter(),
              visibility2
            ].join("");
          },
          toClipPathSVG: function(reviver) {
            var svgString = [];
            for (var i = 0, len = this._objects.length; i < len; i++) {
              svgString.push("	", this._objects[i].toClipPathSVG(reviver));
            }
            return this._createBaseClipPathSVGMarkup(svgString, { reviver });
          }
        });
        fabric5.Group.fromObject = function(object, callback) {
          var objects = object.objects, options = fabric5.util.object.clone(object, true);
          delete options.objects;
          if (typeof objects === "string") {
            fabric5.loadSVGFromURL(objects, function(elements) {
              var group = fabric5.util.groupSVGElements(elements, object, objects);
              group.set(options);
              callback && callback(group);
            });
            return;
          }
          fabric5.util.enlivenObjects(objects, function(enlivenedObjects) {
            fabric5.util.enlivenObjects([object.clipPath], function(enlivedClipPath) {
              var options2 = fabric5.util.object.clone(object, true);
              options2.clipPath = enlivedClipPath[0];
              delete options2.objects;
              callback && callback(new fabric5.Group(enlivenedObjects, options2, true));
            });
          });
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {});
        if (fabric5.ActiveSelection) {
          return;
        }
        fabric5.ActiveSelection = fabric5.util.createClass(fabric5.Group, {
          type: "activeSelection",
          initialize: function(objects, options) {
            options = options || {};
            this._objects = objects || [];
            for (var i = this._objects.length; i--; ) {
              this._objects[i].group = this;
            }
            if (options.originX) {
              this.originX = options.originX;
            }
            if (options.originY) {
              this.originY = options.originY;
            }
            this._calcBounds();
            this._updateObjectsCoords();
            fabric5.Object.prototype.initialize.call(this, options);
            this.setCoords();
          },
          toGroup: function() {
            var objects = this._objects.concat();
            this._objects = [];
            var options = fabric5.Object.prototype.toObject.call(this);
            var newGroup = new fabric5.Group([]);
            delete options.type;
            newGroup.set(options);
            objects.forEach(function(object) {
              object.canvas.remove(object);
              object.group = newGroup;
            });
            newGroup._objects = objects;
            if (!this.canvas) {
              return newGroup;
            }
            var canvas = this.canvas;
            canvas.add(newGroup);
            canvas._activeObject = newGroup;
            newGroup.setCoords();
            return newGroup;
          },
          onDeselect: function() {
            this.destroy();
            return false;
          },
          toString: function() {
            return "#<fabric.ActiveSelection: (" + this.complexity() + ")>";
          },
          shouldCache: function() {
            return false;
          },
          isOnACache: function() {
            return false;
          },
          _renderControls: function(ctx, styleOverride, childrenOverride) {
            ctx.save();
            ctx.globalAlpha = this.isMoving ? this.borderOpacityWhenMoving : 1;
            this.callSuper("_renderControls", ctx, styleOverride);
            childrenOverride = childrenOverride || {};
            if (typeof childrenOverride.hasControls === "undefined") {
              childrenOverride.hasControls = false;
            }
            childrenOverride.forActiveSelection = true;
            for (var i = 0, len = this._objects.length; i < len; i++) {
              this._objects[i]._renderControls(ctx, childrenOverride);
            }
            ctx.restore();
          }
        });
        fabric5.ActiveSelection.fromObject = function(object, callback) {
          fabric5.util.enlivenObjects(object.objects, function(enlivenedObjects) {
            delete object.objects;
            callback && callback(new fabric5.ActiveSelection(enlivenedObjects, object, true));
          });
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var extend = fabric4.util.object.extend;
        if (!global2.fabric) {
          global2.fabric = {};
        }
        if (global2.fabric.Image) {
          fabric4.warn("fabric.Image is already defined.");
          return;
        }
        fabric4.Image = fabric4.util.createClass(fabric4.Object, {
          type: "image",
          strokeWidth: 0,
          srcFromAttribute: false,
          _lastScaleX: 1,
          _lastScaleY: 1,
          _filterScalingX: 1,
          _filterScalingY: 1,
          minimumScaleTrigger: 0.5,
          stateProperties: fabric4.Object.prototype.stateProperties.concat("cropX", "cropY"),
          cacheProperties: fabric4.Object.prototype.cacheProperties.concat("cropX", "cropY"),
          cacheKey: "",
          cropX: 0,
          cropY: 0,
          imageSmoothing: true,
          initialize: function(element, options) {
            options || (options = {});
            this.filters = [];
            this.cacheKey = "texture" + fabric4.Object.__uid++;
            this.callSuper("initialize", options);
            this._initElement(element, options);
          },
          getElement: function() {
            return this._element || {};
          },
          setElement: function(element, options) {
            this.removeTexture(this.cacheKey);
            this.removeTexture(this.cacheKey + "_filtered");
            this._element = element;
            this._originalElement = element;
            this._initConfig(options);
            if (this.filters.length !== 0) {
              this.applyFilters();
            }
            if (this.resizeFilter) {
              this.applyResizeFilters();
            }
            return this;
          },
          removeTexture: function(key) {
            var backend = fabric4.filterBackend;
            if (backend && backend.evictCachesForKey) {
              backend.evictCachesForKey(key);
            }
          },
          dispose: function() {
            this.removeTexture(this.cacheKey);
            this.removeTexture(this.cacheKey + "_filtered");
            this._cacheContext = void 0;
            ["_originalElement", "_element", "_filteredEl", "_cacheCanvas"].forEach(function(element) {
              fabric4.util.cleanUpJsdomNode(this[element]);
              this[element] = void 0;
            }.bind(this));
          },
          getCrossOrigin: function() {
            return this._originalElement && (this._originalElement.crossOrigin || null);
          },
          getOriginalSize: function() {
            var element = this.getElement();
            return {
              width: element.naturalWidth || element.width,
              height: element.naturalHeight || element.height
            };
          },
          _stroke: function(ctx) {
            if (!this.stroke || this.strokeWidth === 0) {
              return;
            }
            var w = this.width / 2, h = this.height / 2;
            ctx.beginPath();
            ctx.moveTo(-w, -h);
            ctx.lineTo(w, -h);
            ctx.lineTo(w, h);
            ctx.lineTo(-w, h);
            ctx.lineTo(-w, -h);
            ctx.closePath();
          },
          toObject: function(propertiesToInclude) {
            var filters = [];
            this.filters.forEach(function(filterObj) {
              if (filterObj) {
                filters.push(filterObj.toObject());
              }
            });
            var object = extend(this.callSuper("toObject", ["cropX", "cropY"].concat(propertiesToInclude)), {
              src: this.getSrc(),
              crossOrigin: this.getCrossOrigin(),
              filters
            });
            if (this.resizeFilter) {
              object.resizeFilter = this.resizeFilter.toObject();
            }
            return object;
          },
          hasCrop: function() {
            return this.cropX || this.cropY || this.width < this._element.width || this.height < this._element.height;
          },
          _toSVG: function() {
            var svgString = [], imageMarkup = [], strokeSvg, element = this._element, x = -this.width / 2, y = -this.height / 2, clipPath = "", imageRendering = "";
            if (!element) {
              return [];
            }
            if (this.hasCrop()) {
              var clipPathId = fabric4.Object.__uid++;
              svgString.push('<clipPath id="imageCrop_' + clipPathId + '">\n', '	<rect x="' + x + '" y="' + y + '" width="' + this.width + '" height="' + this.height + '" />\n', "</clipPath>\n");
              clipPath = ' clip-path="url(#imageCrop_' + clipPathId + ')" ';
            }
            if (!this.imageSmoothing) {
              imageRendering = '" image-rendering="optimizeSpeed';
            }
            imageMarkup.push("	<image ", "COMMON_PARTS", 'xlink:href="', this.getSvgSrc(true), '" x="', x - this.cropX, '" y="', y - this.cropY, '" width="', element.width || element.naturalWidth, '" height="', element.height || element.height, imageRendering, '"', clipPath, "></image>\n");
            if (this.stroke || this.strokeDashArray) {
              var origFill = this.fill;
              this.fill = null;
              strokeSvg = [
                "	<rect ",
                'x="',
                x,
                '" y="',
                y,
                '" width="',
                this.width,
                '" height="',
                this.height,
                '" style="',
                this.getSvgStyles(),
                '"/>\n'
              ];
              this.fill = origFill;
            }
            if (this.paintFirst !== "fill") {
              svgString = svgString.concat(strokeSvg, imageMarkup);
            } else {
              svgString = svgString.concat(imageMarkup, strokeSvg);
            }
            return svgString;
          },
          getSrc: function(filtered) {
            var element = filtered ? this._element : this._originalElement;
            if (element) {
              if (element.toDataURL) {
                return element.toDataURL();
              }
              if (this.srcFromAttribute) {
                return element.getAttribute("src");
              } else {
                return element.src;
              }
            } else {
              return this.src || "";
            }
          },
          setSrc: function(src, callback, options) {
            fabric4.util.loadImage(src, function(img, isError) {
              this.setElement(img, options);
              this._setWidthHeight();
              callback && callback(this, isError);
            }, this, options && options.crossOrigin);
            return this;
          },
          toString: function() {
            return '#<fabric.Image: { src: "' + this.getSrc() + '" }>';
          },
          applyResizeFilters: function() {
            var filter = this.resizeFilter, minimumScale = this.minimumScaleTrigger, objectScale = this.getTotalObjectScaling(), scaleX = objectScale.scaleX, scaleY = objectScale.scaleY, elementToFilter = this._filteredEl || this._originalElement;
            if (this.group) {
              this.set("dirty", true);
            }
            if (!filter || scaleX > minimumScale && scaleY > minimumScale) {
              this._element = elementToFilter;
              this._filterScalingX = 1;
              this._filterScalingY = 1;
              this._lastScaleX = scaleX;
              this._lastScaleY = scaleY;
              return;
            }
            if (!fabric4.filterBackend) {
              fabric4.filterBackend = fabric4.initFilterBackend();
            }
            var canvasEl = fabric4.util.createCanvasElement(), cacheKey = this._filteredEl ? this.cacheKey + "_filtered" : this.cacheKey, sourceWidth = elementToFilter.width, sourceHeight = elementToFilter.height;
            canvasEl.width = sourceWidth;
            canvasEl.height = sourceHeight;
            this._element = canvasEl;
            this._lastScaleX = filter.scaleX = scaleX;
            this._lastScaleY = filter.scaleY = scaleY;
            fabric4.filterBackend.applyFilters([filter], elementToFilter, sourceWidth, sourceHeight, this._element, cacheKey);
            this._filterScalingX = canvasEl.width / this._originalElement.width;
            this._filterScalingY = canvasEl.height / this._originalElement.height;
          },
          applyFilters: function(filters) {
            filters = filters || this.filters || [];
            filters = filters.filter(function(filter) {
              return filter && !filter.isNeutralState();
            });
            this.set("dirty", true);
            this.removeTexture(this.cacheKey + "_filtered");
            if (filters.length === 0) {
              this._element = this._originalElement;
              this._filteredEl = null;
              this._filterScalingX = 1;
              this._filterScalingY = 1;
              return this;
            }
            var imgElement = this._originalElement, sourceWidth = imgElement.naturalWidth || imgElement.width, sourceHeight = imgElement.naturalHeight || imgElement.height;
            if (this._element === this._originalElement) {
              var canvasEl = fabric4.util.createCanvasElement();
              canvasEl.width = sourceWidth;
              canvasEl.height = sourceHeight;
              this._element = canvasEl;
              this._filteredEl = canvasEl;
            } else {
              this._element = this._filteredEl;
              this._filteredEl.getContext("2d").clearRect(0, 0, sourceWidth, sourceHeight);
              this._lastScaleX = 1;
              this._lastScaleY = 1;
            }
            if (!fabric4.filterBackend) {
              fabric4.filterBackend = fabric4.initFilterBackend();
            }
            fabric4.filterBackend.applyFilters(filters, this._originalElement, sourceWidth, sourceHeight, this._element, this.cacheKey);
            if (this._originalElement.width !== this._element.width || this._originalElement.height !== this._element.height) {
              this._filterScalingX = this._element.width / this._originalElement.width;
              this._filterScalingY = this._element.height / this._originalElement.height;
            }
            return this;
          },
          _render: function(ctx) {
            fabric4.util.setImageSmoothing(ctx, this.imageSmoothing);
            if (this.isMoving !== true && this.resizeFilter && this._needsResize()) {
              this.applyResizeFilters();
            }
            this._stroke(ctx);
            this._renderPaintInOrder(ctx);
          },
          drawCacheOnCanvas: function(ctx) {
            fabric4.util.setImageSmoothing(ctx, this.imageSmoothing);
            fabric4.Object.prototype.drawCacheOnCanvas.call(this, ctx);
          },
          shouldCache: function() {
            return this.needsItsOwnCache();
          },
          _renderFill: function(ctx) {
            var elementToDraw = this._element;
            if (!elementToDraw) {
              return;
            }
            var scaleX = this._filterScalingX, scaleY = this._filterScalingY, w = this.width, h = this.height, min = Math.min, max = Math.max, cropX = max(this.cropX, 0), cropY = max(this.cropY, 0), elWidth = elementToDraw.naturalWidth || elementToDraw.width, elHeight = elementToDraw.naturalHeight || elementToDraw.height, sX = cropX * scaleX, sY = cropY * scaleY, sW = min(w * scaleX, elWidth - sX), sH = min(h * scaleY, elHeight - sY), x = -w / 2, y = -h / 2, maxDestW = min(w, elWidth / scaleX - cropX), maxDestH = min(h, elHeight / scaleY - cropY);
            elementToDraw && ctx.drawImage(elementToDraw, sX, sY, sW, sH, x, y, maxDestW, maxDestH);
          },
          _needsResize: function() {
            var scale = this.getTotalObjectScaling();
            return scale.scaleX !== this._lastScaleX || scale.scaleY !== this._lastScaleY;
          },
          _resetWidthHeight: function() {
            this.set(this.getOriginalSize());
          },
          _initElement: function(element, options) {
            this.setElement(fabric4.util.getById(element), options);
            fabric4.util.addClass(this.getElement(), fabric4.Image.CSS_CANVAS);
          },
          _initConfig: function(options) {
            options || (options = {});
            this.setOptions(options);
            this._setWidthHeight(options);
          },
          _initFilters: function(filters, callback) {
            if (filters && filters.length) {
              fabric4.util.enlivenObjects(filters, function(enlivenedObjects) {
                callback && callback(enlivenedObjects);
              }, "fabric.Image.filters");
            } else {
              callback && callback();
            }
          },
          _setWidthHeight: function(options) {
            options || (options = {});
            var el = this.getElement();
            this.width = options.width || el.naturalWidth || el.width || 0;
            this.height = options.height || el.naturalHeight || el.height || 0;
          },
          parsePreserveAspectRatioAttribute: function() {
            var pAR = fabric4.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio || ""), rWidth = this._element.width, rHeight = this._element.height, scaleX = 1, scaleY = 1, offsetLeft = 0, offsetTop = 0, cropX = 0, cropY = 0, offset, pWidth = this.width, pHeight = this.height, parsedAttributes = { width: pWidth, height: pHeight };
            if (pAR && (pAR.alignX !== "none" || pAR.alignY !== "none")) {
              if (pAR.meetOrSlice === "meet") {
                scaleX = scaleY = fabric4.util.findScaleToFit(this._element, parsedAttributes);
                offset = (pWidth - rWidth * scaleX) / 2;
                if (pAR.alignX === "Min") {
                  offsetLeft = -offset;
                }
                if (pAR.alignX === "Max") {
                  offsetLeft = offset;
                }
                offset = (pHeight - rHeight * scaleY) / 2;
                if (pAR.alignY === "Min") {
                  offsetTop = -offset;
                }
                if (pAR.alignY === "Max") {
                  offsetTop = offset;
                }
              }
              if (pAR.meetOrSlice === "slice") {
                scaleX = scaleY = fabric4.util.findScaleToCover(this._element, parsedAttributes);
                offset = rWidth - pWidth / scaleX;
                if (pAR.alignX === "Mid") {
                  cropX = offset / 2;
                }
                if (pAR.alignX === "Max") {
                  cropX = offset;
                }
                offset = rHeight - pHeight / scaleY;
                if (pAR.alignY === "Mid") {
                  cropY = offset / 2;
                }
                if (pAR.alignY === "Max") {
                  cropY = offset;
                }
                rWidth = pWidth / scaleX;
                rHeight = pHeight / scaleY;
              }
            } else {
              scaleX = pWidth / rWidth;
              scaleY = pHeight / rHeight;
            }
            return {
              width: rWidth,
              height: rHeight,
              scaleX,
              scaleY,
              offsetLeft,
              offsetTop,
              cropX,
              cropY
            };
          }
        });
        fabric4.Image.CSS_CANVAS = "canvas-img";
        fabric4.Image.prototype.getSvgSrc = fabric4.Image.prototype.getSrc;
        fabric4.Image.fromObject = function(_object, callback) {
          var object = fabric4.util.object.clone(_object);
          fabric4.util.loadImage(object.src, function(img, isError) {
            if (isError) {
              callback && callback(null, true);
              return;
            }
            fabric4.Image.prototype._initFilters.call(object, object.filters, function(filters) {
              object.filters = filters || [];
              fabric4.Image.prototype._initFilters.call(object, [object.resizeFilter], function(resizeFilters) {
                object.resizeFilter = resizeFilters[0];
                fabric4.util.enlivenObjects([object.clipPath], function(enlivedProps) {
                  object.clipPath = enlivedProps[0];
                  var image = new fabric4.Image(img, object);
                  callback(image, false);
                });
              });
            });
          }, null, object.crossOrigin);
        };
        fabric4.Image.fromURL = function(url, callback, imgOptions) {
          fabric4.util.loadImage(url, function(img, isError) {
            callback && callback(new fabric4.Image(img, imgOptions), isError);
          }, null, imgOptions && imgOptions.crossOrigin);
        };
        fabric4.Image.ATTRIBUTE_NAMES = fabric4.SHARED_ATTRIBUTES.concat("x y width height preserveAspectRatio xlink:href crossOrigin image-rendering".split(" "));
        fabric4.Image.fromElement = function(element, callback, options) {
          var parsedAttributes = fabric4.parseAttributes(element, fabric4.Image.ATTRIBUTE_NAMES);
          fabric4.Image.fromURL(parsedAttributes["xlink:href"], callback, extend(options ? fabric4.util.object.clone(options) : {}, parsedAttributes));
        };
      })(typeof exports !== "undefined" ? exports : exports);
      fabric4.util.object.extend(fabric4.Object.prototype, {
        _getAngleValueForStraighten: function() {
          var angle = this.angle % 360;
          if (angle > 0) {
            return Math.round((angle - 1) / 90) * 90;
          }
          return Math.round(angle / 90) * 90;
        },
        straighten: function() {
          this.rotate(this._getAngleValueForStraighten());
          return this;
        },
        fxStraighten: function(callbacks) {
          callbacks = callbacks || {};
          var empty = function() {
          }, onComplete = callbacks.onComplete || empty, onChange = callbacks.onChange || empty, _this = this;
          fabric4.util.animate({
            startValue: this.get("angle"),
            endValue: this._getAngleValueForStraighten(),
            duration: this.FX_DURATION,
            onChange: function(value) {
              _this.rotate(value);
              onChange();
            },
            onComplete: function() {
              _this.setCoords();
              onComplete();
            }
          });
          return this;
        }
      });
      fabric4.util.object.extend(fabric4.StaticCanvas.prototype, {
        straightenObject: function(object) {
          object.straighten();
          this.requestRenderAll();
          return this;
        },
        fxStraightenObject: function(object) {
          object.fxStraighten({
            onChange: this.requestRenderAllBound
          });
          return this;
        }
      });
      (function() {
        "use strict";
        function testPrecision(gl, precision) {
          var fragmentSource = "precision " + precision + " float;\nvoid main(){}";
          var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
          gl.shaderSource(fragmentShader, fragmentSource);
          gl.compileShader(fragmentShader);
          if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
            return false;
          }
          return true;
        }
        fabric4.isWebglSupported = function(tileSize) {
          if (fabric4.isLikelyNode) {
            return false;
          }
          tileSize = tileSize || fabric4.WebglFilterBackend.prototype.tileSize;
          var canvas = document.createElement("canvas");
          var gl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
          var isSupported = false;
          if (gl) {
            fabric4.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            isSupported = fabric4.maxTextureSize >= tileSize;
            var precisions = ["highp", "mediump", "lowp"];
            for (var i = 0; i < 3; i++) {
              if (testPrecision(gl, precisions[i])) {
                fabric4.webGlPrecision = precisions[i];
                break;
              }
              ;
            }
          }
          this.isSupported = isSupported;
          return isSupported;
        };
        fabric4.WebglFilterBackend = WebglFilterBackend;
        function WebglFilterBackend(options) {
          if (options && options.tileSize) {
            this.tileSize = options.tileSize;
          }
          this.setupGLContext(this.tileSize, this.tileSize);
          this.captureGPUInfo();
        }
        ;
        WebglFilterBackend.prototype = {
          tileSize: 2048,
          resources: {},
          setupGLContext: function(width2, height2) {
            this.dispose();
            this.createWebGLCanvas(width2, height2);
            this.aPosition = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);
            this.chooseFastestCopyGLTo2DMethod(width2, height2);
          },
          chooseFastestCopyGLTo2DMethod: function(width2, height2) {
            var canMeasurePerf = typeof window.performance !== "undefined", canUseImageData;
            try {
              new ImageData(1, 1);
              canUseImageData = true;
            } catch (e) {
              canUseImageData = false;
            }
            var canUseArrayBuffer = typeof ArrayBuffer !== "undefined";
            var canUseUint8Clamped = typeof Uint8ClampedArray !== "undefined";
            if (!(canMeasurePerf && canUseImageData && canUseArrayBuffer && canUseUint8Clamped)) {
              return;
            }
            var targetCanvas = fabric4.util.createCanvasElement();
            var imageBuffer = new ArrayBuffer(width2 * height2 * 4);
            if (fabric4.forceGLPutImageData) {
              this.imageBuffer = imageBuffer;
              this.copyGLTo2D = copyGLTo2DPutImageData;
              return;
            }
            var testContext = {
              imageBuffer,
              destinationWidth: width2,
              destinationHeight: height2,
              targetCanvas
            };
            var startTime, drawImageTime, putImageDataTime;
            targetCanvas.width = width2;
            targetCanvas.height = height2;
            startTime = window.performance.now();
            copyGLTo2DDrawImage.call(testContext, this.gl, testContext);
            drawImageTime = window.performance.now() - startTime;
            startTime = window.performance.now();
            copyGLTo2DPutImageData.call(testContext, this.gl, testContext);
            putImageDataTime = window.performance.now() - startTime;
            if (drawImageTime > putImageDataTime) {
              this.imageBuffer = imageBuffer;
              this.copyGLTo2D = copyGLTo2DPutImageData;
            } else {
              this.copyGLTo2D = copyGLTo2DDrawImage;
            }
          },
          createWebGLCanvas: function(width2, height2) {
            var canvas = fabric4.util.createCanvasElement();
            canvas.width = width2;
            canvas.height = height2;
            var glOptions = {
              alpha: true,
              premultipliedAlpha: false,
              depth: false,
              stencil: false,
              antialias: false
            }, gl = canvas.getContext("webgl", glOptions);
            if (!gl) {
              gl = canvas.getContext("experimental-webgl", glOptions);
            }
            if (!gl) {
              return;
            }
            gl.clearColor(0, 0, 0, 0);
            this.canvas = canvas;
            this.gl = gl;
          },
          applyFilters: function(filters, source, width2, height2, targetCanvas, cacheKey) {
            var gl = this.gl;
            var cachedTexture;
            if (cacheKey) {
              cachedTexture = this.getCachedTexture(cacheKey, source);
            }
            var pipelineState = {
              originalWidth: source.width || source.originalWidth,
              originalHeight: source.height || source.originalHeight,
              sourceWidth: width2,
              sourceHeight: height2,
              destinationWidth: width2,
              destinationHeight: height2,
              context: gl,
              sourceTexture: this.createTexture(gl, width2, height2, !cachedTexture && source),
              targetTexture: this.createTexture(gl, width2, height2),
              originalTexture: cachedTexture || this.createTexture(gl, width2, height2, !cachedTexture && source),
              passes: filters.length,
              webgl: true,
              aPosition: this.aPosition,
              programCache: this.programCache,
              pass: 0,
              filterBackend: this,
              targetCanvas
            };
            var tempFbo = gl.createFramebuffer();
            gl.bindFramebuffer(gl.FRAMEBUFFER, tempFbo);
            filters.forEach(function(filter) {
              filter && filter.applyTo(pipelineState);
            });
            resizeCanvasIfNeeded(pipelineState);
            this.copyGLTo2D(gl, pipelineState);
            gl.bindTexture(gl.TEXTURE_2D, null);
            gl.deleteTexture(pipelineState.sourceTexture);
            gl.deleteTexture(pipelineState.targetTexture);
            gl.deleteFramebuffer(tempFbo);
            targetCanvas.getContext("2d").setTransform(1, 0, 0, 1, 0, 0);
            return pipelineState;
          },
          dispose: function() {
            if (this.canvas) {
              this.canvas = null;
              this.gl = null;
            }
            this.clearWebGLCaches();
          },
          clearWebGLCaches: function() {
            this.programCache = {};
            this.textureCache = {};
          },
          createTexture: function(gl, width2, height2, textureImageSource) {
            var texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            if (textureImageSource) {
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImageSource);
            } else {
              gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width2, height2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
            }
            return texture;
          },
          getCachedTexture: function(uniqueId, textureImageSource) {
            if (this.textureCache[uniqueId]) {
              return this.textureCache[uniqueId];
            } else {
              var texture = this.createTexture(this.gl, textureImageSource.width, textureImageSource.height, textureImageSource);
              this.textureCache[uniqueId] = texture;
              return texture;
            }
          },
          evictCachesForKey: function(cacheKey) {
            if (this.textureCache[cacheKey]) {
              this.gl.deleteTexture(this.textureCache[cacheKey]);
              delete this.textureCache[cacheKey];
            }
          },
          copyGLTo2D: copyGLTo2DDrawImage,
          captureGPUInfo: function() {
            if (this.gpuInfo) {
              return this.gpuInfo;
            }
            var gl = this.gl, gpuInfo = { renderer: "", vendor: "" };
            if (!gl) {
              return gpuInfo;
            }
            var ext = gl.getExtension("WEBGL_debug_renderer_info");
            if (ext) {
              var renderer = gl.getParameter(ext.UNMASKED_RENDERER_WEBGL);
              var vendor = gl.getParameter(ext.UNMASKED_VENDOR_WEBGL);
              if (renderer) {
                gpuInfo.renderer = renderer.toLowerCase();
              }
              if (vendor) {
                gpuInfo.vendor = vendor.toLowerCase();
              }
            }
            this.gpuInfo = gpuInfo;
            return gpuInfo;
          }
        };
      })();
      function resizeCanvasIfNeeded(pipelineState) {
        var targetCanvas = pipelineState.targetCanvas, width2 = targetCanvas.width, height2 = targetCanvas.height, dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight;
        if (width2 !== dWidth || height2 !== dHeight) {
          targetCanvas.width = dWidth;
          targetCanvas.height = dHeight;
        }
      }
      function copyGLTo2DDrawImage(gl, pipelineState) {
        var glCanvas = gl.canvas, targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext("2d");
        ctx.translate(0, targetCanvas.height);
        ctx.scale(1, -1);
        var sourceY = glCanvas.height - targetCanvas.height;
        ctx.drawImage(glCanvas, 0, sourceY, targetCanvas.width, targetCanvas.height, 0, 0, targetCanvas.width, targetCanvas.height);
      }
      function copyGLTo2DPutImageData(gl, pipelineState) {
        var targetCanvas = pipelineState.targetCanvas, ctx = targetCanvas.getContext("2d"), dWidth = pipelineState.destinationWidth, dHeight = pipelineState.destinationHeight, numBytes = dWidth * dHeight * 4;
        var u8 = new Uint8Array(this.imageBuffer, 0, numBytes);
        var u8Clamped = new Uint8ClampedArray(this.imageBuffer, 0, numBytes);
        gl.readPixels(0, 0, dWidth, dHeight, gl.RGBA, gl.UNSIGNED_BYTE, u8);
        var imgData = new ImageData(u8Clamped, dWidth, dHeight);
        ctx.putImageData(imgData, 0, 0);
      }
      (function() {
        "use strict";
        var noop2 = function() {
        };
        fabric4.Canvas2dFilterBackend = Canvas2dFilterBackend;
        function Canvas2dFilterBackend() {
        }
        ;
        Canvas2dFilterBackend.prototype = {
          evictCachesForKey: noop2,
          dispose: noop2,
          clearWebGLCaches: noop2,
          resources: {},
          applyFilters: function(filters, sourceElement, sourceWidth, sourceHeight, targetCanvas) {
            var ctx = targetCanvas.getContext("2d");
            ctx.drawImage(sourceElement, 0, 0, sourceWidth, sourceHeight);
            var imageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
            var originalImageData = ctx.getImageData(0, 0, sourceWidth, sourceHeight);
            var pipelineState = {
              sourceWidth,
              sourceHeight,
              imageData,
              originalEl: sourceElement,
              originalImageData,
              canvasEl: targetCanvas,
              ctx,
              filterBackend: this
            };
            filters.forEach(function(filter) {
              filter.applyTo(pipelineState);
            });
            if (pipelineState.imageData.width !== sourceWidth || pipelineState.imageData.height !== sourceHeight) {
              targetCanvas.width = pipelineState.imageData.width;
              targetCanvas.height = pipelineState.imageData.height;
            }
            ctx.putImageData(pipelineState.imageData, 0, 0);
            return pipelineState;
          }
        };
      })();
      fabric4.Image = fabric4.Image || {};
      fabric4.Image.filters = fabric4.Image.filters || {};
      fabric4.Image.filters.BaseFilter = fabric4.util.createClass({
        type: "BaseFilter",
        vertexSource: "attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvoid main() {\nvTexCoord = aPosition;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",
        fragmentSource: "precision highp float;\nvarying vec2 vTexCoord;\nuniform sampler2D uTexture;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\n}",
        initialize: function(options) {
          if (options) {
            this.setOptions(options);
          }
        },
        setOptions: function(options) {
          for (var prop in options) {
            this[prop] = options[prop];
          }
        },
        createProgram: function(gl, fragmentSource, vertexSource) {
          fragmentSource = fragmentSource || this.fragmentSource;
          vertexSource = vertexSource || this.vertexSource;
          if (fabric4.webGlPrecision !== "highp") {
            fragmentSource = fragmentSource.replace(/precision highp float/g, "precision " + fabric4.webGlPrecision + " float");
          }
          var vertexShader = gl.createShader(gl.VERTEX_SHADER);
          gl.shaderSource(vertexShader, vertexSource);
          gl.compileShader(vertexShader);
          if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
            throw new Error("Vertex shader compile error for " + this.type + ": " + gl.getShaderInfoLog(vertexShader));
          }
          var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
          gl.shaderSource(fragmentShader, fragmentSource);
          gl.compileShader(fragmentShader);
          if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
            throw new Error("Fragment shader compile error for " + this.type + ": " + gl.getShaderInfoLog(fragmentShader));
          }
          var program = gl.createProgram();
          gl.attachShader(program, vertexShader);
          gl.attachShader(program, fragmentShader);
          gl.linkProgram(program);
          if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
            throw new Error('Shader link error for "${this.type}" ' + gl.getProgramInfoLog(program));
          }
          var attributeLocations = this.getAttributeLocations(gl, program);
          var uniformLocations = this.getUniformLocations(gl, program) || {};
          uniformLocations.uStepW = gl.getUniformLocation(program, "uStepW");
          uniformLocations.uStepH = gl.getUniformLocation(program, "uStepH");
          return {
            program,
            attributeLocations,
            uniformLocations
          };
        },
        getAttributeLocations: function(gl, program) {
          return {
            aPosition: gl.getAttribLocation(program, "aPosition")
          };
        },
        getUniformLocations: function() {
          return {};
        },
        sendAttributeData: function(gl, attributeLocations, aPositionData) {
          var attributeLocation = attributeLocations.aPosition;
          var buffer = gl.createBuffer();
          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
          gl.enableVertexAttribArray(attributeLocation);
          gl.vertexAttribPointer(attributeLocation, 2, gl.FLOAT, false, 0, 0);
          gl.bufferData(gl.ARRAY_BUFFER, aPositionData, gl.STATIC_DRAW);
        },
        _setupFrameBuffer: function(options) {
          var gl = options.context, width2, height2;
          if (options.passes > 1) {
            width2 = options.destinationWidth;
            height2 = options.destinationHeight;
            if (options.sourceWidth !== width2 || options.sourceHeight !== height2) {
              gl.deleteTexture(options.targetTexture);
              options.targetTexture = options.filterBackend.createTexture(gl, width2, height2);
            }
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, options.targetTexture, 0);
          } else {
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            gl.finish();
          }
        },
        _swapTextures: function(options) {
          options.passes--;
          options.pass++;
          var temp = options.targetTexture;
          options.targetTexture = options.sourceTexture;
          options.sourceTexture = temp;
        },
        isNeutralState: function() {
          var main = this.mainParameter, _class = fabric4.Image.filters[this.type].prototype;
          if (main) {
            if (Array.isArray(_class[main])) {
              for (var i = _class[main].length; i--; ) {
                if (this[main][i] !== _class[main][i]) {
                  return false;
                }
              }
              return true;
            } else {
              return _class[main] === this[main];
            }
          } else {
            return false;
          }
        },
        applyTo: function(options) {
          if (options.webgl) {
            this._setupFrameBuffer(options);
            this.applyToWebGL(options);
            this._swapTextures(options);
          } else {
            this.applyTo2d(options);
          }
        },
        retrieveShader: function(options) {
          if (!options.programCache.hasOwnProperty(this.type)) {
            options.programCache[this.type] = this.createProgram(options.context);
          }
          return options.programCache[this.type];
        },
        applyToWebGL: function(options) {
          var gl = options.context;
          var shader = this.retrieveShader(options);
          if (options.pass === 0 && options.originalTexture) {
            gl.bindTexture(gl.TEXTURE_2D, options.originalTexture);
          } else {
            gl.bindTexture(gl.TEXTURE_2D, options.sourceTexture);
          }
          gl.useProgram(shader.program);
          this.sendAttributeData(gl, shader.attributeLocations, options.aPosition);
          gl.uniform1f(shader.uniformLocations.uStepW, 1 / options.sourceWidth);
          gl.uniform1f(shader.uniformLocations.uStepH, 1 / options.sourceHeight);
          this.sendUniformData(gl, shader.uniformLocations);
          gl.viewport(0, 0, options.destinationWidth, options.destinationHeight);
          gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
        },
        bindAdditionalTexture: function(gl, texture, textureUnit) {
          gl.activeTexture(textureUnit);
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.activeTexture(gl.TEXTURE0);
        },
        unbindAdditionalTexture: function(gl, textureUnit) {
          gl.activeTexture(textureUnit);
          gl.bindTexture(gl.TEXTURE_2D, null);
          gl.activeTexture(gl.TEXTURE0);
        },
        getMainParameter: function() {
          return this[this.mainParameter];
        },
        setMainParameter: function(value) {
          this[this.mainParameter] = value;
        },
        sendUniformData: function() {
        },
        createHelpLayer: function(options) {
          if (!options.helpLayer) {
            var helpLayer = document.createElement("canvas");
            helpLayer.width = options.sourceWidth;
            helpLayer.height = options.sourceHeight;
            options.helpLayer = helpLayer;
          }
        },
        toObject: function() {
          var object = { type: this.type }, mainP = this.mainParameter;
          if (mainP) {
            object[mainP] = this[mainP];
          }
          return object;
        },
        toJSON: function() {
          return this.toObject();
        }
      });
      fabric4.Image.filters.BaseFilter.fromObject = function(object, callback) {
        var filter = new fabric4.Image.filters[object.type](object);
        callback && callback(filter);
        return filter;
      };
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.ColorMatrix = createClass(filters.BaseFilter, {
          type: "ColorMatrix",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nuniform mat4 uColorMatrix;\nuniform vec4 uConstants;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor *= uColorMatrix;\ncolor += uConstants;\ngl_FragColor = color;\n}",
          matrix: [
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            1,
            0
          ],
          mainParameter: "matrix",
          colorsOnly: true,
          initialize: function(options) {
            this.callSuper("initialize", options);
            this.matrix = this.matrix.slice(0);
          },
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, iLen = data.length, m = this.matrix, r, g, b, a, i, colorsOnly = this.colorsOnly;
            for (i = 0; i < iLen; i += 4) {
              r = data[i];
              g = data[i + 1];
              b = data[i + 2];
              if (colorsOnly) {
                data[i] = r * m[0] + g * m[1] + b * m[2] + m[4] * 255;
                data[i + 1] = r * m[5] + g * m[6] + b * m[7] + m[9] * 255;
                data[i + 2] = r * m[10] + g * m[11] + b * m[12] + m[14] * 255;
              } else {
                a = data[i + 3];
                data[i] = r * m[0] + g * m[1] + b * m[2] + a * m[3] + m[4] * 255;
                data[i + 1] = r * m[5] + g * m[6] + b * m[7] + a * m[8] + m[9] * 255;
                data[i + 2] = r * m[10] + g * m[11] + b * m[12] + a * m[13] + m[14] * 255;
                data[i + 3] = r * m[15] + g * m[16] + b * m[17] + a * m[18] + m[19] * 255;
              }
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uColorMatrix: gl.getUniformLocation(program, "uColorMatrix"),
              uConstants: gl.getUniformLocation(program, "uConstants")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            var m = this.matrix, matrix = [
              m[0],
              m[1],
              m[2],
              m[3],
              m[5],
              m[6],
              m[7],
              m[8],
              m[10],
              m[11],
              m[12],
              m[13],
              m[15],
              m[16],
              m[17],
              m[18]
            ], constants = [m[4], m[9], m[14], m[19]];
            gl.uniformMatrix4fv(uniformLocations.uColorMatrix, false, matrix);
            gl.uniform4fv(uniformLocations.uConstants, constants);
          }
        });
        fabric5.Image.filters.ColorMatrix.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Brightness = createClass(filters.BaseFilter, {
          type: "Brightness",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uBrightness;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += uBrightness;\ngl_FragColor = color;\n}",
          brightness: 0,
          mainParameter: "brightness",
          applyTo2d: function(options) {
            if (this.brightness === 0) {
              return;
            }
            var imageData = options.imageData, data = imageData.data, i, len = data.length, brightness = Math.round(this.brightness * 255);
            for (i = 0; i < len; i += 4) {
              data[i] = data[i] + brightness;
              data[i + 1] = data[i + 1] + brightness;
              data[i + 2] = data[i + 2] + brightness;
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uBrightness: gl.getUniformLocation(program, "uBrightness")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uBrightness, this.brightness);
          }
        });
        fabric5.Image.filters.Brightness.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), extend = fabric5.util.object.extend, filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Convolute = createClass(filters.BaseFilter, {
          type: "Convolute",
          opaque: false,
          matrix: [0, 0, 0, 0, 1, 0, 0, 0, 0],
          fragmentSource: {
            Convolute_3_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
            Convolute_3_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[9];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 3.0; h+=1.0) {\nfor (float w = 0.0; w < 3.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",
            Convolute_5_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
            Convolute_5_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[25];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 5.0; h+=1.0) {\nfor (float w = 0.0; w < 5.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",
            Convolute_7_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
            Convolute_7_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[49];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 7.0; h+=1.0) {\nfor (float w = 0.0; w < 7.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}",
            Convolute_9_1: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 0);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\n}\n}\ngl_FragColor = color;\n}",
            Convolute_9_0: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uMatrix[81];\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = vec4(0, 0, 0, 1);\nfor (float h = 0.0; h < 9.0; h+=1.0) {\nfor (float w = 0.0; w < 9.0; w+=1.0) {\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\n}\n}\nfloat alpha = texture2D(uTexture, vTexCoord).a;\ngl_FragColor = color;\ngl_FragColor.a = alpha;\n}"
          },
          retrieveShader: function(options) {
            var size = Math.sqrt(this.matrix.length);
            var cacheKey = this.type + "_" + size + "_" + (this.opaque ? 1 : 0);
            var shaderSource = this.fragmentSource[cacheKey];
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
            }
            return options.programCache[cacheKey];
          },
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, weights = this.matrix, side = Math.round(Math.sqrt(weights.length)), halfSide = Math.floor(side / 2), sw = imageData.width, sh = imageData.height, output = options.ctx.createImageData(sw, sh), dst = output.data, alphaFac = this.opaque ? 1 : 0, r, g, b, a, dstOff, scx, scy, srcOff, wt, x, y, cx2, cy;
            for (y = 0; y < sh; y++) {
              for (x = 0; x < sw; x++) {
                dstOff = (y * sw + x) * 4;
                r = 0;
                g = 0;
                b = 0;
                a = 0;
                for (cy = 0; cy < side; cy++) {
                  for (cx2 = 0; cx2 < side; cx2++) {
                    scy = y + cy - halfSide;
                    scx = x + cx2 - halfSide;
                    if (scy < 0 || scy >= sh || scx < 0 || scx >= sw) {
                      continue;
                    }
                    srcOff = (scy * sw + scx) * 4;
                    wt = weights[cy * side + cx2];
                    r += data[srcOff] * wt;
                    g += data[srcOff + 1] * wt;
                    b += data[srcOff + 2] * wt;
                    if (!alphaFac) {
                      a += data[srcOff + 3] * wt;
                    }
                  }
                }
                dst[dstOff] = r;
                dst[dstOff + 1] = g;
                dst[dstOff + 2] = b;
                if (!alphaFac) {
                  dst[dstOff + 3] = a;
                } else {
                  dst[dstOff + 3] = data[dstOff + 3];
                }
              }
            }
            options.imageData = output;
          },
          getUniformLocations: function(gl, program) {
            return {
              uMatrix: gl.getUniformLocation(program, "uMatrix"),
              uOpaque: gl.getUniformLocation(program, "uOpaque"),
              uHalfSize: gl.getUniformLocation(program, "uHalfSize"),
              uSize: gl.getUniformLocation(program, "uSize")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1fv(uniformLocations.uMatrix, this.matrix);
          },
          toObject: function() {
            return extend(this.callSuper("toObject"), {
              opaque: this.opaque,
              matrix: this.matrix
            });
          }
        });
        fabric5.Image.filters.Convolute.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Grayscale = createClass(filters.BaseFilter, {
          type: "Grayscale",
          fragmentSource: {
            average: "precision highp float;\nuniform sampler2D uTexture;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat average = (color.r + color.b + color.g) / 3.0;\ngl_FragColor = vec4(average, average, average, color.a);\n}",
            lightness: "precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\ngl_FragColor = vec4(average, average, average, col.a);\n}",
            luminosity: "precision highp float;\nuniform sampler2D uTexture;\nuniform int uMode;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 col = texture2D(uTexture, vTexCoord);\nfloat average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\ngl_FragColor = vec4(average, average, average, col.a);\n}"
          },
          mode: "average",
          mainParameter: "mode",
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, i, len = data.length, value, mode = this.mode;
            for (i = 0; i < len; i += 4) {
              if (mode === "average") {
                value = (data[i] + data[i + 1] + data[i + 2]) / 3;
              } else if (mode === "lightness") {
                value = (Math.min(data[i], data[i + 1], data[i + 2]) + Math.max(data[i], data[i + 1], data[i + 2])) / 2;
              } else if (mode === "luminosity") {
                value = 0.21 * data[i] + 0.72 * data[i + 1] + 0.07 * data[i + 2];
              }
              data[i] = value;
              data[i + 1] = value;
              data[i + 2] = value;
            }
          },
          retrieveShader: function(options) {
            var cacheKey = this.type + "_" + this.mode;
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              var shaderSource = this.fragmentSource[this.mode];
              options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
            }
            return options.programCache[cacheKey];
          },
          getUniformLocations: function(gl, program) {
            return {
              uMode: gl.getUniformLocation(program, "uMode")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            var mode = 1;
            gl.uniform1i(uniformLocations.uMode, mode);
          },
          isNeutralState: function() {
            return false;
          }
        });
        fabric5.Image.filters.Grayscale.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Invert = createClass(filters.BaseFilter, {
          type: "Invert",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform int uInvert;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nif (uInvert == 1) {\ngl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\n} else {\ngl_FragColor = color;\n}\n}",
          invert: true,
          mainParameter: "invert",
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, i, len = data.length;
            for (i = 0; i < len; i += 4) {
              data[i] = 255 - data[i];
              data[i + 1] = 255 - data[i + 1];
              data[i + 2] = 255 - data[i + 2];
            }
          },
          isNeutralState: function() {
            return !this.invert;
          },
          getUniformLocations: function(gl, program) {
            return {
              uInvert: gl.getUniformLocation(program, "uInvert")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1i(uniformLocations.uInvert, this.invert);
          }
        });
        fabric5.Image.filters.Invert.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), extend = fabric5.util.object.extend, filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Noise = createClass(filters.BaseFilter, {
          type: "Noise",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uStepH;\nuniform float uNoise;\nuniform float uSeed;\nvarying vec2 vTexCoord;\nfloat rand(vec2 co, float seed, float vScale) {\nreturn fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\n}\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ncolor.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\ngl_FragColor = color;\n}",
          mainParameter: "noise",
          noise: 0,
          applyTo2d: function(options) {
            if (this.noise === 0) {
              return;
            }
            var imageData = options.imageData, data = imageData.data, i, len = data.length, noise = this.noise, rand;
            for (i = 0, len = data.length; i < len; i += 4) {
              rand = (0.5 - Math.random()) * noise;
              data[i] += rand;
              data[i + 1] += rand;
              data[i + 2] += rand;
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uNoise: gl.getUniformLocation(program, "uNoise"),
              uSeed: gl.getUniformLocation(program, "uSeed")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uNoise, this.noise / 255);
            gl.uniform1f(uniformLocations.uSeed, Math.random());
          },
          toObject: function() {
            return extend(this.callSuper("toObject"), {
              noise: this.noise
            });
          }
        });
        fabric5.Image.filters.Noise.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Pixelate = createClass(filters.BaseFilter, {
          type: "Pixelate",
          blocksize: 4,
          mainParameter: "blocksize",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uBlocksize;\nuniform float uStepW;\nuniform float uStepH;\nvarying vec2 vTexCoord;\nvoid main() {\nfloat blockW = uBlocksize * uStepW;\nfloat blockH = uBlocksize * uStepW;\nint posX = int(vTexCoord.x / blockW);\nint posY = int(vTexCoord.y / blockH);\nfloat fposX = float(posX);\nfloat fposY = float(posY);\nvec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\nvec4 color = texture2D(uTexture, squareCoords);\ngl_FragColor = color;\n}",
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, iLen = imageData.height, jLen = imageData.width, index, i, j, r, g, b, a, _i, _j, _iLen, _jLen;
            for (i = 0; i < iLen; i += this.blocksize) {
              for (j = 0; j < jLen; j += this.blocksize) {
                index = i * 4 * jLen + j * 4;
                r = data[index];
                g = data[index + 1];
                b = data[index + 2];
                a = data[index + 3];
                _iLen = Math.min(i + this.blocksize, iLen);
                _jLen = Math.min(j + this.blocksize, jLen);
                for (_i = i; _i < _iLen; _i++) {
                  for (_j = j; _j < _jLen; _j++) {
                    index = _i * 4 * jLen + _j * 4;
                    data[index] = r;
                    data[index + 1] = g;
                    data[index + 2] = b;
                    data[index + 3] = a;
                  }
                }
              }
            }
          },
          isNeutralState: function() {
            return this.blocksize === 1;
          },
          getUniformLocations: function(gl, program) {
            return {
              uBlocksize: gl.getUniformLocation(program, "uBlocksize"),
              uStepW: gl.getUniformLocation(program, "uStepW"),
              uStepH: gl.getUniformLocation(program, "uStepH")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uBlocksize, this.blocksize);
          }
        });
        fabric5.Image.filters.Pixelate.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), extend = fabric5.util.object.extend, filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.RemoveColor = createClass(filters.BaseFilter, {
          type: "RemoveColor",
          color: "#FFFFFF",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uLow;\nuniform vec4 uHigh;\nvarying vec2 vTexCoord;\nvoid main() {\ngl_FragColor = texture2D(uTexture, vTexCoord);\nif(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\ngl_FragColor.a = 0.0;\n}\n}",
          distance: 0.02,
          useAlpha: false,
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, i, distance = this.distance * 255, r, g, b, source = new fabric5.Color(this.color).getSource(), lowC = [
              source[0] - distance,
              source[1] - distance,
              source[2] - distance
            ], highC = [
              source[0] + distance,
              source[1] + distance,
              source[2] + distance
            ];
            for (i = 0; i < data.length; i += 4) {
              r = data[i];
              g = data[i + 1];
              b = data[i + 2];
              if (r > lowC[0] && g > lowC[1] && b > lowC[2] && r < highC[0] && g < highC[1] && b < highC[2]) {
                data[i + 3] = 0;
              }
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uLow: gl.getUniformLocation(program, "uLow"),
              uHigh: gl.getUniformLocation(program, "uHigh")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            var source = new fabric5.Color(this.color).getSource(), distance = parseFloat(this.distance), lowC = [
              0 + source[0] / 255 - distance,
              0 + source[1] / 255 - distance,
              0 + source[2] / 255 - distance,
              1
            ], highC = [
              source[0] / 255 + distance,
              source[1] / 255 + distance,
              source[2] / 255 + distance,
              1
            ];
            gl.uniform4fv(uniformLocations.uLow, lowC);
            gl.uniform4fv(uniformLocations.uHigh, highC);
          },
          toObject: function() {
            return extend(this.callSuper("toObject"), {
              color: this.color,
              distance: this.distance
            });
          }
        });
        fabric5.Image.filters.RemoveColor.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        var matrices = {
          Brownie: [
            0.5997,
            0.34553,
            -0.27082,
            0,
            0.186,
            -0.0377,
            0.86095,
            0.15059,
            0,
            -0.1449,
            0.24113,
            -0.07441,
            0.44972,
            0,
            -0.02965,
            0,
            0,
            0,
            1,
            0
          ],
          Vintage: [
            0.62793,
            0.32021,
            -0.03965,
            0,
            0.03784,
            0.02578,
            0.64411,
            0.03259,
            0,
            0.02926,
            0.0466,
            -0.08512,
            0.52416,
            0,
            0.02023,
            0,
            0,
            0,
            1,
            0
          ],
          Kodachrome: [
            1.12855,
            -0.39673,
            -0.03992,
            0,
            0.24991,
            -0.16404,
            1.08352,
            -0.05498,
            0,
            0.09698,
            -0.16786,
            -0.56034,
            1.60148,
            0,
            0.13972,
            0,
            0,
            0,
            1,
            0
          ],
          Technicolor: [
            1.91252,
            -0.85453,
            -0.09155,
            0,
            0.04624,
            -0.30878,
            1.76589,
            -0.10601,
            0,
            -0.27589,
            -0.2311,
            -0.75018,
            1.84759,
            0,
            0.12137,
            0,
            0,
            0,
            1,
            0
          ],
          Polaroid: [
            1.438,
            -0.062,
            -0.062,
            0,
            0,
            -0.122,
            1.378,
            -0.122,
            0,
            0,
            -0.016,
            -0.016,
            1.483,
            0,
            0,
            0,
            0,
            0,
            1,
            0
          ],
          Sepia: [
            0.393,
            0.769,
            0.189,
            0,
            0,
            0.349,
            0.686,
            0.168,
            0,
            0,
            0.272,
            0.534,
            0.131,
            0,
            0,
            0,
            0,
            0,
            1,
            0
          ],
          BlackWhite: [
            1.5,
            1.5,
            1.5,
            0,
            -1,
            1.5,
            1.5,
            1.5,
            0,
            -1,
            1.5,
            1.5,
            1.5,
            0,
            -1,
            0,
            0,
            0,
            1,
            0
          ]
        };
        for (var key in matrices) {
          filters[key] = createClass(filters.ColorMatrix, {
            type: key,
            matrix: matrices[key],
            mainParameter: false,
            colorsOnly: true
          });
          fabric5.Image.filters[key].fromObject = fabric5.Image.filters.BaseFilter.fromObject;
        }
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric, filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.BlendColor = createClass(filters.BaseFilter, {
          type: "BlendColor",
          color: "#F95C63",
          mode: "multiply",
          alpha: 1,
          fragmentSource: {
            multiply: "gl_FragColor.rgb *= uColor.rgb;\n",
            screen: "gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\n",
            add: "gl_FragColor.rgb += uColor.rgb;\n",
            diff: "gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\n",
            subtract: "gl_FragColor.rgb -= uColor.rgb;\n",
            lighten: "gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\n",
            darken: "gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\n",
            exclusion: "gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\n",
            overlay: "if (uColor.r < 0.5) {\ngl_FragColor.r *= 2.0 * uColor.r;\n} else {\ngl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\n}\nif (uColor.g < 0.5) {\ngl_FragColor.g *= 2.0 * uColor.g;\n} else {\ngl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\n}\nif (uColor.b < 0.5) {\ngl_FragColor.b *= 2.0 * uColor.b;\n} else {\ngl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\n}\n",
            tint: "gl_FragColor.rgb *= (1.0 - uColor.a);\ngl_FragColor.rgb += uColor.rgb;\n"
          },
          buildSource: function(mode) {
            return "precision highp float;\nuniform sampler2D uTexture;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\ngl_FragColor = color;\nif (color.a > 0.0) {\n" + this.fragmentSource[mode] + "}\n}";
          },
          retrieveShader: function(options) {
            var cacheKey = this.type + "_" + this.mode, shaderSource;
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              shaderSource = this.buildSource(this.mode);
              options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
            }
            return options.programCache[cacheKey];
          },
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, iLen = data.length, tr, tg, tb, r, g, b, source, alpha1 = 1 - this.alpha;
            source = new fabric5.Color(this.color).getSource();
            tr = source[0] * this.alpha;
            tg = source[1] * this.alpha;
            tb = source[2] * this.alpha;
            for (var i = 0; i < iLen; i += 4) {
              r = data[i];
              g = data[i + 1];
              b = data[i + 2];
              switch (this.mode) {
                case "multiply":
                  data[i] = r * tr / 255;
                  data[i + 1] = g * tg / 255;
                  data[i + 2] = b * tb / 255;
                  break;
                case "screen":
                  data[i] = 255 - (255 - r) * (255 - tr) / 255;
                  data[i + 1] = 255 - (255 - g) * (255 - tg) / 255;
                  data[i + 2] = 255 - (255 - b) * (255 - tb) / 255;
                  break;
                case "add":
                  data[i] = r + tr;
                  data[i + 1] = g + tg;
                  data[i + 2] = b + tb;
                  break;
                case "diff":
                case "difference":
                  data[i] = Math.abs(r - tr);
                  data[i + 1] = Math.abs(g - tg);
                  data[i + 2] = Math.abs(b - tb);
                  break;
                case "subtract":
                  data[i] = r - tr;
                  data[i + 1] = g - tg;
                  data[i + 2] = b - tb;
                  break;
                case "darken":
                  data[i] = Math.min(r, tr);
                  data[i + 1] = Math.min(g, tg);
                  data[i + 2] = Math.min(b, tb);
                  break;
                case "lighten":
                  data[i] = Math.max(r, tr);
                  data[i + 1] = Math.max(g, tg);
                  data[i + 2] = Math.max(b, tb);
                  break;
                case "overlay":
                  data[i] = tr < 128 ? 2 * r * tr / 255 : 255 - 2 * (255 - r) * (255 - tr) / 255;
                  data[i + 1] = tg < 128 ? 2 * g * tg / 255 : 255 - 2 * (255 - g) * (255 - tg) / 255;
                  data[i + 2] = tb < 128 ? 2 * b * tb / 255 : 255 - 2 * (255 - b) * (255 - tb) / 255;
                  break;
                case "exclusion":
                  data[i] = tr + r - 2 * tr * r / 255;
                  data[i + 1] = tg + g - 2 * tg * g / 255;
                  data[i + 2] = tb + b - 2 * tb * b / 255;
                  break;
                case "tint":
                  data[i] = tr + r * alpha1;
                  data[i + 1] = tg + g * alpha1;
                  data[i + 2] = tb + b * alpha1;
              }
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uColor: gl.getUniformLocation(program, "uColor")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            var source = new fabric5.Color(this.color).getSource();
            source[0] = this.alpha * source[0] / 255;
            source[1] = this.alpha * source[1] / 255;
            source[2] = this.alpha * source[2] / 255;
            source[3] = this.alpha;
            gl.uniform4fv(uniformLocations.uColor, source);
          },
          toObject: function() {
            return {
              type: this.type,
              color: this.color,
              mode: this.mode,
              alpha: this.alpha
            };
          }
        });
        fabric5.Image.filters.BlendColor.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric, filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.BlendImage = createClass(filters.BaseFilter, {
          type: "BlendImage",
          image: null,
          mode: "multiply",
          alpha: 1,
          vertexSource: "attribute vec2 aPosition;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nuniform mat3 uTransformMatrix;\nvoid main() {\nvTexCoord = aPosition;\nvTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\n}",
          fragmentSource: {
            multiply: "precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.rgba *= color2.rgba;\ngl_FragColor = color;\n}",
            mask: "precision highp float;\nuniform sampler2D uTexture;\nuniform sampler2D uImage;\nuniform vec4 uColor;\nvarying vec2 vTexCoord;\nvarying vec2 vTexCoord2;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec4 color2 = texture2D(uImage, vTexCoord2);\ncolor.a = color2.a;\ngl_FragColor = color;\n}"
          },
          retrieveShader: function(options) {
            var cacheKey = this.type + "_" + this.mode;
            var shaderSource = this.fragmentSource[this.mode];
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              options.programCache[cacheKey] = this.createProgram(options.context, shaderSource);
            }
            return options.programCache[cacheKey];
          },
          applyToWebGL: function(options) {
            var gl = options.context, texture = this.createTexture(options.filterBackend, this.image);
            this.bindAdditionalTexture(gl, texture, gl.TEXTURE1);
            this.callSuper("applyToWebGL", options);
            this.unbindAdditionalTexture(gl, gl.TEXTURE1);
          },
          createTexture: function(backend, image) {
            return backend.getCachedTexture(image.cacheKey, image._element);
          },
          calculateMatrix: function() {
            var image = this.image, width2 = image._element.width, height2 = image._element.height;
            return [
              1 / image.scaleX,
              0,
              0,
              0,
              1 / image.scaleY,
              0,
              -image.left / width2,
              -image.top / height2,
              1
            ];
          },
          applyTo2d: function(options) {
            var imageData = options.imageData, resources = options.filterBackend.resources, data = imageData.data, iLen = data.length, width2 = imageData.width, height2 = imageData.height, tr, tg, tb, ta, r, g, b, a, canvas1, context, image = this.image, blendData;
            if (!resources.blendImage) {
              resources.blendImage = fabric5.util.createCanvasElement();
            }
            canvas1 = resources.blendImage;
            context = canvas1.getContext("2d");
            if (canvas1.width !== width2 || canvas1.height !== height2) {
              canvas1.width = width2;
              canvas1.height = height2;
            } else {
              context.clearRect(0, 0, width2, height2);
            }
            context.setTransform(image.scaleX, 0, 0, image.scaleY, image.left, image.top);
            context.drawImage(image._element, 0, 0, width2, height2);
            blendData = context.getImageData(0, 0, width2, height2).data;
            for (var i = 0; i < iLen; i += 4) {
              r = data[i];
              g = data[i + 1];
              b = data[i + 2];
              a = data[i + 3];
              tr = blendData[i];
              tg = blendData[i + 1];
              tb = blendData[i + 2];
              ta = blendData[i + 3];
              switch (this.mode) {
                case "multiply":
                  data[i] = r * tr / 255;
                  data[i + 1] = g * tg / 255;
                  data[i + 2] = b * tb / 255;
                  data[i + 3] = a * ta / 255;
                  break;
                case "mask":
                  data[i + 3] = ta;
                  break;
              }
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uTransformMatrix: gl.getUniformLocation(program, "uTransformMatrix"),
              uImage: gl.getUniformLocation(program, "uImage")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            var matrix = this.calculateMatrix();
            gl.uniform1i(uniformLocations.uImage, 1);
            gl.uniformMatrix3fv(uniformLocations.uTransformMatrix, false, matrix);
          },
          toObject: function() {
            return {
              type: this.type,
              image: this.image && this.image.toObject(),
              mode: this.mode,
              alpha: this.alpha
            };
          }
        });
        fabric5.Image.filters.BlendImage.fromObject = function(object, callback) {
          fabric5.Image.fromObject(object.image, function(image) {
            var options = fabric5.util.object.clone(object);
            options.image = image;
            callback(new fabric5.Image.filters.BlendImage(options));
          });
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), pow = Math.pow, floor = Math.floor, sqrt = Math.sqrt, abs2 = Math.abs, round2 = Math.round, sin = Math.sin, ceil = Math.ceil, filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Resize = createClass(filters.BaseFilter, {
          type: "Resize",
          resizeType: "hermite",
          scaleX: 1,
          scaleY: 1,
          lanczosLobes: 3,
          getUniformLocations: function(gl, program) {
            return {
              uDelta: gl.getUniformLocation(program, "uDelta"),
              uTaps: gl.getUniformLocation(program, "uTaps")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform2fv(uniformLocations.uDelta, this.horizontal ? [1 / this.width, 0] : [0, 1 / this.height]);
            gl.uniform1fv(uniformLocations.uTaps, this.taps);
          },
          retrieveShader: function(options) {
            var filterWindow = this.getFilterWindow(), cacheKey = this.type + "_" + filterWindow;
            if (!options.programCache.hasOwnProperty(cacheKey)) {
              var fragmentShader = this.generateShader(filterWindow);
              options.programCache[cacheKey] = this.createProgram(options.context, fragmentShader);
            }
            return options.programCache[cacheKey];
          },
          getFilterWindow: function() {
            var scale = this.tempScale;
            return Math.ceil(this.lanczosLobes / scale);
          },
          getTaps: function() {
            var lobeFunction = this.lanczosCreate(this.lanczosLobes), scale = this.tempScale, filterWindow = this.getFilterWindow(), taps = new Array(filterWindow);
            for (var i = 1; i <= filterWindow; i++) {
              taps[i - 1] = lobeFunction(i * scale);
            }
            return taps;
          },
          generateShader: function(filterWindow) {
            var offsets = new Array(filterWindow), fragmentShader = this.fragmentSourceTOP, filterWindow;
            for (var i = 1; i <= filterWindow; i++) {
              offsets[i - 1] = i + ".0 * uDelta";
            }
            fragmentShader += "uniform float uTaps[" + filterWindow + "];\n";
            fragmentShader += "void main() {\n";
            fragmentShader += "  vec4 color = texture2D(uTexture, vTexCoord);\n";
            fragmentShader += "  float sum = 1.0;\n";
            offsets.forEach(function(offset, i2) {
              fragmentShader += "  color += texture2D(uTexture, vTexCoord + " + offset + ") * uTaps[" + i2 + "];\n";
              fragmentShader += "  color += texture2D(uTexture, vTexCoord - " + offset + ") * uTaps[" + i2 + "];\n";
              fragmentShader += "  sum += 2.0 * uTaps[" + i2 + "];\n";
            });
            fragmentShader += "  gl_FragColor = color / sum;\n";
            fragmentShader += "}";
            return fragmentShader;
          },
          fragmentSourceTOP: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\n",
          applyTo: function(options) {
            if (options.webgl) {
              options.passes++;
              this.width = options.sourceWidth;
              this.horizontal = true;
              this.dW = Math.round(this.width * this.scaleX);
              this.dH = options.sourceHeight;
              this.tempScale = this.dW / this.width;
              this.taps = this.getTaps();
              options.destinationWidth = this.dW;
              this._setupFrameBuffer(options);
              this.applyToWebGL(options);
              this._swapTextures(options);
              options.sourceWidth = options.destinationWidth;
              this.height = options.sourceHeight;
              this.horizontal = false;
              this.dH = Math.round(this.height * this.scaleY);
              this.tempScale = this.dH / this.height;
              this.taps = this.getTaps();
              options.destinationHeight = this.dH;
              this._setupFrameBuffer(options);
              this.applyToWebGL(options);
              this._swapTextures(options);
              options.sourceHeight = options.destinationHeight;
            } else {
              this.applyTo2d(options);
            }
          },
          isNeutralState: function() {
            return this.scaleX === 1 && this.scaleY === 1;
          },
          lanczosCreate: function(lobes) {
            return function(x) {
              if (x >= lobes || x <= -lobes) {
                return 0;
              }
              if (x < 11920929e-14 && x > -11920929e-14) {
                return 1;
              }
              x *= Math.PI;
              var xx = x / lobes;
              return sin(x) / x * sin(xx) / xx;
            };
          },
          applyTo2d: function(options) {
            var imageData = options.imageData, scaleX = this.scaleX, scaleY = this.scaleY;
            this.rcpScaleX = 1 / scaleX;
            this.rcpScaleY = 1 / scaleY;
            var oW = imageData.width, oH = imageData.height, dW = round2(oW * scaleX), dH = round2(oH * scaleY), newData;
            if (this.resizeType === "sliceHack") {
              newData = this.sliceByTwo(options, oW, oH, dW, dH);
            } else if (this.resizeType === "hermite") {
              newData = this.hermiteFastResize(options, oW, oH, dW, dH);
            } else if (this.resizeType === "bilinear") {
              newData = this.bilinearFiltering(options, oW, oH, dW, dH);
            } else if (this.resizeType === "lanczos") {
              newData = this.lanczosResize(options, oW, oH, dW, dH);
            }
            options.imageData = newData;
          },
          sliceByTwo: function(options, oW, oH, dW, dH) {
            var imageData = options.imageData, mult = 0.5, doneW = false, doneH = false, stepW = oW * mult, stepH = oH * mult, resources = fabric5.filterBackend.resources, tmpCanvas, ctx, sX = 0, sY = 0, dX = oW, dY = 0;
            if (!resources.sliceByTwo) {
              resources.sliceByTwo = document.createElement("canvas");
            }
            tmpCanvas = resources.sliceByTwo;
            if (tmpCanvas.width < oW * 1.5 || tmpCanvas.height < oH) {
              tmpCanvas.width = oW * 1.5;
              tmpCanvas.height = oH;
            }
            ctx = tmpCanvas.getContext("2d");
            ctx.clearRect(0, 0, oW * 1.5, oH);
            ctx.putImageData(imageData, 0, 0);
            dW = floor(dW);
            dH = floor(dH);
            while (!doneW || !doneH) {
              oW = stepW;
              oH = stepH;
              if (dW < floor(stepW * mult)) {
                stepW = floor(stepW * mult);
              } else {
                stepW = dW;
                doneW = true;
              }
              if (dH < floor(stepH * mult)) {
                stepH = floor(stepH * mult);
              } else {
                stepH = dH;
                doneH = true;
              }
              ctx.drawImage(tmpCanvas, sX, sY, oW, oH, dX, dY, stepW, stepH);
              sX = dX;
              sY = dY;
              dY += stepH;
            }
            return ctx.getImageData(sX, sY, dW, dH);
          },
          lanczosResize: function(options, oW, oH, dW, dH) {
            function process2(u) {
              var v, i, weight, idx, a, red2, green2, blue2, alpha2, fX, fY;
              center.x = (u + 0.5) * ratioX;
              icenter.x = floor(center.x);
              for (v = 0; v < dH; v++) {
                center.y = (v + 0.5) * ratioY;
                icenter.y = floor(center.y);
                a = 0;
                red2 = 0;
                green2 = 0;
                blue2 = 0;
                alpha2 = 0;
                for (i = icenter.x - range2X; i <= icenter.x + range2X; i++) {
                  if (i < 0 || i >= oW) {
                    continue;
                  }
                  fX = floor(1e3 * abs2(i - center.x));
                  if (!cacheLanc[fX]) {
                    cacheLanc[fX] = {};
                  }
                  for (var j = icenter.y - range2Y; j <= icenter.y + range2Y; j++) {
                    if (j < 0 || j >= oH) {
                      continue;
                    }
                    fY = floor(1e3 * abs2(j - center.y));
                    if (!cacheLanc[fX][fY]) {
                      cacheLanc[fX][fY] = lanczos(sqrt(pow(fX * rcpRatioX, 2) + pow(fY * rcpRatioY, 2)) / 1e3);
                    }
                    weight = cacheLanc[fX][fY];
                    if (weight > 0) {
                      idx = (j * oW + i) * 4;
                      a += weight;
                      red2 += weight * srcData[idx];
                      green2 += weight * srcData[idx + 1];
                      blue2 += weight * srcData[idx + 2];
                      alpha2 += weight * srcData[idx + 3];
                    }
                  }
                }
                idx = (v * dW + u) * 4;
                destData[idx] = red2 / a;
                destData[idx + 1] = green2 / a;
                destData[idx + 2] = blue2 / a;
                destData[idx + 3] = alpha2 / a;
              }
              if (++u < dW) {
                return process2(u);
              } else {
                return destImg;
              }
            }
            var srcData = options.imageData.data, destImg = options.ctx.createImageData(dW, dH), destData = destImg.data, lanczos = this.lanczosCreate(this.lanczosLobes), ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, rcpRatioX = 2 / this.rcpScaleX, rcpRatioY = 2 / this.rcpScaleY, range2X = ceil(ratioX * this.lanczosLobes / 2), range2Y = ceil(ratioY * this.lanczosLobes / 2), cacheLanc = {}, center = {}, icenter = {};
            return process2(0);
          },
          bilinearFiltering: function(options, oW, oH, dW, dH) {
            var a, b, c, d, x, y, i, j, xDiff, yDiff, chnl, color2, offset = 0, origPix, ratioX = this.rcpScaleX, ratioY = this.rcpScaleY, w4 = 4 * (oW - 1), img = options.imageData, pixels = img.data, destImage = options.ctx.createImageData(dW, dH), destPixels = destImage.data;
            for (i = 0; i < dH; i++) {
              for (j = 0; j < dW; j++) {
                x = floor(ratioX * j);
                y = floor(ratioY * i);
                xDiff = ratioX * j - x;
                yDiff = ratioY * i - y;
                origPix = 4 * (y * oW + x);
                for (chnl = 0; chnl < 4; chnl++) {
                  a = pixels[origPix + chnl];
                  b = pixels[origPix + 4 + chnl];
                  c = pixels[origPix + w4 + chnl];
                  d = pixels[origPix + w4 + 4 + chnl];
                  color2 = a * (1 - xDiff) * (1 - yDiff) + b * xDiff * (1 - yDiff) + c * yDiff * (1 - xDiff) + d * xDiff * yDiff;
                  destPixels[offset++] = color2;
                }
              }
            }
            return destImage;
          },
          hermiteFastResize: function(options, oW, oH, dW, dH) {
            var ratioW = this.rcpScaleX, ratioH = this.rcpScaleY, ratioWHalf = ceil(ratioW / 2), ratioHHalf = ceil(ratioH / 2), img = options.imageData, data = img.data, img2 = options.ctx.createImageData(dW, dH), data2 = img2.data;
            for (var j = 0; j < dH; j++) {
              for (var i = 0; i < dW; i++) {
                var x2 = (i + j * dW) * 4, weight = 0, weights = 0, weightsAlpha = 0, gxR = 0, gxG = 0, gxB = 0, gxA = 0, centerY = (j + 0.5) * ratioH;
                for (var yy = floor(j * ratioH); yy < (j + 1) * ratioH; yy++) {
                  var dy = abs2(centerY - (yy + 0.5)) / ratioHHalf, centerX = (i + 0.5) * ratioW, w0 = dy * dy;
                  for (var xx = floor(i * ratioW); xx < (i + 1) * ratioW; xx++) {
                    var dx = abs2(centerX - (xx + 0.5)) / ratioWHalf, w = sqrt(w0 + dx * dx);
                    if (w > 1 && w < -1) {
                      continue;
                    }
                    weight = 2 * w * w * w - 3 * w * w + 1;
                    if (weight > 0) {
                      dx = 4 * (xx + yy * oW);
                      gxA += weight * data[dx + 3];
                      weightsAlpha += weight;
                      if (data[dx + 3] < 255) {
                        weight = weight * data[dx + 3] / 250;
                      }
                      gxR += weight * data[dx];
                      gxG += weight * data[dx + 1];
                      gxB += weight * data[dx + 2];
                      weights += weight;
                    }
                  }
                }
                data2[x2] = gxR / weights;
                data2[x2 + 1] = gxG / weights;
                data2[x2 + 2] = gxB / weights;
                data2[x2 + 3] = gxA / weightsAlpha;
              }
            }
            return img2;
          },
          toObject: function() {
            return {
              type: this.type,
              scaleX: this.scaleX,
              scaleY: this.scaleY,
              resizeType: this.resizeType,
              lanczosLobes: this.lanczosLobes
            };
          }
        });
        fabric5.Image.filters.Resize.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Contrast = createClass(filters.BaseFilter, {
          type: "Contrast",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uContrast;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\ncolor.rgb = contrastF * (color.rgb - 0.5) + 0.5;\ngl_FragColor = color;\n}",
          contrast: 0,
          mainParameter: "contrast",
          applyTo2d: function(options) {
            if (this.contrast === 0) {
              return;
            }
            var imageData = options.imageData, i, len, data = imageData.data, len = data.length, contrast = Math.floor(this.contrast * 255), contrastF = 259 * (contrast + 255) / (255 * (259 - contrast));
            for (i = 0; i < len; i += 4) {
              data[i] = contrastF * (data[i] - 128) + 128;
              data[i + 1] = contrastF * (data[i + 1] - 128) + 128;
              data[i + 2] = contrastF * (data[i + 2] - 128) + 128;
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uContrast: gl.getUniformLocation(program, "uContrast")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uContrast, this.contrast);
          }
        });
        fabric5.Image.filters.Contrast.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Saturation = createClass(filters.BaseFilter, {
          type: "Saturation",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uSaturation;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat rgMax = max(color.r, color.g);\nfloat rgbMax = max(rgMax, color.b);\ncolor.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\ncolor.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\ncolor.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\ngl_FragColor = color;\n}",
          saturation: 0,
          mainParameter: "saturation",
          applyTo2d: function(options) {
            if (this.saturation === 0) {
              return;
            }
            var imageData = options.imageData, data = imageData.data, len = data.length, adjust = -this.saturation, i, max;
            for (i = 0; i < len; i += 4) {
              max = Math.max(data[i], data[i + 1], data[i + 2]);
              data[i] += max !== data[i] ? (max - data[i]) * adjust : 0;
              data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * adjust : 0;
              data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * adjust : 0;
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uSaturation: gl.getUniformLocation(program, "uSaturation")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uSaturation, -this.saturation);
          }
        });
        fabric5.Image.filters.Saturation.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Vibrance = createClass(filters.BaseFilter, {
          type: "Vibrance",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform float uVibrance;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nfloat max = max(color.r, max(color.g, color.b));\nfloat avg = (color.r + color.g + color.b) / 3.0;\nfloat amt = (abs(max - avg) * 2.0) * uVibrance;\ncolor.r += max != color.r ? (max - color.r) * amt : 0.00;\ncolor.g += max != color.g ? (max - color.g) * amt : 0.00;\ncolor.b += max != color.b ? (max - color.b) * amt : 0.00;\ngl_FragColor = color;\n}",
          vibrance: 0,
          mainParameter: "vibrance",
          applyTo2d: function(options) {
            if (this.vibrance === 0) {
              return;
            }
            var imageData = options.imageData, data = imageData.data, len = data.length, adjust = -this.vibrance, i, max, avg, amt;
            for (i = 0; i < len; i += 4) {
              max = Math.max(data[i], data[i + 1], data[i + 2]);
              avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
              amt = Math.abs(max - avg) * 2 / 255 * adjust;
              data[i] += max !== data[i] ? (max - data[i]) * amt : 0;
              data[i + 1] += max !== data[i + 1] ? (max - data[i + 1]) * amt : 0;
              data[i + 2] += max !== data[i + 2] ? (max - data[i + 2]) * amt : 0;
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uVibrance: gl.getUniformLocation(program, "uVibrance")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform1f(uniformLocations.uVibrance, -this.vibrance);
          }
        });
        fabric5.Image.filters.Vibrance.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Blur = createClass(filters.BaseFilter, {
          type: "Blur",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec2 uDelta;\nvarying vec2 vTexCoord;\nconst float nSamples = 15.0;\nvec3 v3offset = vec3(12.9898, 78.233, 151.7182);\nfloat random(vec3 scale) {\nreturn fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\n}\nvoid main() {\nvec4 color = vec4(0.0);\nfloat total = 0.0;\nfloat offset = random(v3offset);\nfor (float t = -nSamples; t <= nSamples; t++) {\nfloat percent = (t + offset - 0.5) / nSamples;\nfloat weight = 1.0 - abs(percent);\ncolor += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\ntotal += weight;\n}\ngl_FragColor = color / total;\n}",
          blur: 0,
          mainParameter: "blur",
          applyTo: function(options) {
            if (options.webgl) {
              this.aspectRatio = options.sourceWidth / options.sourceHeight;
              options.passes++;
              this._setupFrameBuffer(options);
              this.horizontal = true;
              this.applyToWebGL(options);
              this._swapTextures(options);
              this._setupFrameBuffer(options);
              this.horizontal = false;
              this.applyToWebGL(options);
              this._swapTextures(options);
            } else {
              this.applyTo2d(options);
            }
          },
          applyTo2d: function(options) {
            options.imageData = this.simpleBlur(options);
          },
          simpleBlur: function(options) {
            var resources = options.filterBackend.resources, canvas1, canvas2, width2 = options.imageData.width, height2 = options.imageData.height;
            if (!resources.blurLayer1) {
              resources.blurLayer1 = fabric5.util.createCanvasElement();
              resources.blurLayer2 = fabric5.util.createCanvasElement();
            }
            canvas1 = resources.blurLayer1;
            canvas2 = resources.blurLayer2;
            if (canvas1.width !== width2 || canvas1.height !== height2) {
              canvas2.width = canvas1.width = width2;
              canvas2.height = canvas1.height = height2;
            }
            var ctx1 = canvas1.getContext("2d"), ctx2 = canvas2.getContext("2d"), nSamples = 15, random, percent, j, i, blur = this.blur * 0.06 * 0.5;
            ctx1.putImageData(options.imageData, 0, 0);
            ctx2.clearRect(0, 0, width2, height2);
            for (i = -nSamples; i <= nSamples; i++) {
              random = (Math.random() - 0.5) / 4;
              percent = i / nSamples;
              j = blur * percent * width2 + random;
              ctx2.globalAlpha = 1 - Math.abs(percent);
              ctx2.drawImage(canvas1, j, random);
              ctx1.drawImage(canvas2, 0, 0);
              ctx2.globalAlpha = 1;
              ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
            }
            for (i = -nSamples; i <= nSamples; i++) {
              random = (Math.random() - 0.5) / 4;
              percent = i / nSamples;
              j = blur * percent * height2 + random;
              ctx2.globalAlpha = 1 - Math.abs(percent);
              ctx2.drawImage(canvas1, random, j);
              ctx1.drawImage(canvas2, 0, 0);
              ctx2.globalAlpha = 1;
              ctx2.clearRect(0, 0, canvas2.width, canvas2.height);
            }
            options.ctx.drawImage(canvas1, 0, 0);
            var newImageData = options.ctx.getImageData(0, 0, canvas1.width, canvas1.height);
            ctx1.globalAlpha = 1;
            ctx1.clearRect(0, 0, canvas1.width, canvas1.height);
            return newImageData;
          },
          getUniformLocations: function(gl, program) {
            return {
              delta: gl.getUniformLocation(program, "uDelta")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            var delta = this.chooseRightDelta();
            gl.uniform2fv(uniformLocations.delta, delta);
          },
          chooseRightDelta: function() {
            var blurScale = 1, delta = [0, 0], blur;
            if (this.horizontal) {
              if (this.aspectRatio > 1) {
                blurScale = 1 / this.aspectRatio;
              }
            } else {
              if (this.aspectRatio < 1) {
                blurScale = this.aspectRatio;
              }
            }
            blur = blurScale * this.blur * 0.12;
            if (this.horizontal) {
              delta[0] = blur;
            } else {
              delta[1] = blur;
            }
            return delta;
          }
        });
        filters.Blur.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Gamma = createClass(filters.BaseFilter, {
          type: "Gamma",
          fragmentSource: "precision highp float;\nuniform sampler2D uTexture;\nuniform vec3 uGamma;\nvarying vec2 vTexCoord;\nvoid main() {\nvec4 color = texture2D(uTexture, vTexCoord);\nvec3 correction = (1.0 / uGamma);\ncolor.r = pow(color.r, correction.r);\ncolor.g = pow(color.g, correction.g);\ncolor.b = pow(color.b, correction.b);\ngl_FragColor = color;\ngl_FragColor.rgb *= color.a;\n}",
          gamma: [1, 1, 1],
          mainParameter: "gamma",
          initialize: function(options) {
            this.gamma = [1, 1, 1];
            filters.BaseFilter.prototype.initialize.call(this, options);
          },
          applyTo2d: function(options) {
            var imageData = options.imageData, data = imageData.data, gamma = this.gamma, len = data.length, rInv = 1 / gamma[0], gInv = 1 / gamma[1], bInv = 1 / gamma[2], i;
            if (!this.rVals) {
              this.rVals = new Uint8Array(256);
              this.gVals = new Uint8Array(256);
              this.bVals = new Uint8Array(256);
            }
            for (i = 0, len = 256; i < len; i++) {
              this.rVals[i] = Math.pow(i / 255, rInv) * 255;
              this.gVals[i] = Math.pow(i / 255, gInv) * 255;
              this.bVals[i] = Math.pow(i / 255, bInv) * 255;
            }
            for (i = 0, len = data.length; i < len; i += 4) {
              data[i] = this.rVals[data[i]];
              data[i + 1] = this.gVals[data[i + 1]];
              data[i + 2] = this.bVals[data[i + 2]];
            }
          },
          getUniformLocations: function(gl, program) {
            return {
              uGamma: gl.getUniformLocation(program, "uGamma")
            };
          },
          sendUniformData: function(gl, uniformLocations) {
            gl.uniform3fv(uniformLocations.uGamma, this.gamma);
          }
        });
        fabric5.Image.filters.Gamma.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.Composed = createClass(filters.BaseFilter, {
          type: "Composed",
          subFilters: [],
          initialize: function(options) {
            this.callSuper("initialize", options);
            this.subFilters = this.subFilters.slice(0);
          },
          applyTo: function(options) {
            options.passes += this.subFilters.length - 1;
            this.subFilters.forEach(function(filter) {
              filter.applyTo(options);
            });
          },
          toObject: function() {
            return fabric5.util.object.extend(this.callSuper("toObject"), {
              subFilters: this.subFilters.map(function(filter) {
                return filter.toObject();
              })
            });
          },
          isNeutralState: function() {
            return !this.subFilters.some(function(filter) {
              return !filter.isNeutralState();
            });
          }
        });
        fabric5.Image.filters.Composed.fromObject = function(object, callback) {
          var filters2 = object.subFilters || [], subFilters = filters2.map(function(filter) {
            return new fabric5.Image.filters[filter.type](filter);
          }), instance = new fabric5.Image.filters.Composed({ subFilters });
          callback && callback(instance);
          return instance;
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), filters = fabric5.Image.filters, createClass = fabric5.util.createClass;
        filters.HueRotation = createClass(filters.ColorMatrix, {
          type: "HueRotation",
          rotation: 0,
          mainParameter: "rotation",
          calculateMatrix: function() {
            var rad = this.rotation * Math.PI, cos = fabric5.util.cos(rad), sin = fabric5.util.sin(rad), aThird = 1 / 3, aThirdSqtSin = Math.sqrt(aThird) * sin, OneMinusCos = 1 - cos;
            this.matrix = [
              1,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              1,
              0,
              0,
              0,
              0,
              0,
              1,
              0
            ];
            this.matrix[0] = cos + OneMinusCos / 3;
            this.matrix[1] = aThird * OneMinusCos - aThirdSqtSin;
            this.matrix[2] = aThird * OneMinusCos + aThirdSqtSin;
            this.matrix[5] = aThird * OneMinusCos + aThirdSqtSin;
            this.matrix[6] = cos + aThird * OneMinusCos;
            this.matrix[7] = aThird * OneMinusCos - aThirdSqtSin;
            this.matrix[10] = aThird * OneMinusCos - aThirdSqtSin;
            this.matrix[11] = aThird * OneMinusCos + aThirdSqtSin;
            this.matrix[12] = cos + aThird * OneMinusCos;
          },
          isNeutralState: function(options) {
            this.calculateMatrix();
            return filters.BaseFilter.prototype.isNeutralState.call(this, options);
          },
          applyTo: function(options) {
            this.calculateMatrix();
            filters.BaseFilter.prototype.applyTo.call(this, options);
          }
        });
        fabric5.Image.filters.HueRotation.fromObject = fabric5.Image.filters.BaseFilter.fromObject;
      })(typeof exports !== "undefined" ? exports : exports);
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {}), clone = fabric5.util.object.clone;
        if (fabric5.Text) {
          fabric5.warn("fabric.Text is already defined");
          return;
        }
        var additionalProps = "fontFamily fontWeight fontSize text underline overline linethrough textAlign fontStyle lineHeight textBackgroundColor charSpacing styles direction path pathStartOffset pathSide".split(" ");
        fabric5.Text = fabric5.util.createClass(fabric5.Object, {
          _dimensionAffectingProps: [
            "fontSize",
            "fontWeight",
            "fontFamily",
            "fontStyle",
            "lineHeight",
            "text",
            "charSpacing",
            "textAlign",
            "styles",
            "path",
            "pathStartOffset",
            "pathSide"
          ],
          _reNewline: /\r?\n/,
          _reSpacesAndTabs: /[ \t\r]/g,
          _reSpaceAndTab: /[ \t\r]/,
          _reWords: /\S+/g,
          type: "text",
          fontSize: 40,
          fontWeight: "normal",
          fontFamily: "Times New Roman",
          underline: false,
          overline: false,
          linethrough: false,
          textAlign: "left",
          fontStyle: "normal",
          lineHeight: 1.16,
          superscript: {
            size: 0.6,
            baseline: -0.35
          },
          subscript: {
            size: 0.6,
            baseline: 0.11
          },
          textBackgroundColor: "",
          stateProperties: fabric5.Object.prototype.stateProperties.concat(additionalProps),
          cacheProperties: fabric5.Object.prototype.cacheProperties.concat(additionalProps),
          stroke: null,
          shadow: null,
          path: null,
          pathStartOffset: 0,
          pathSide: "left",
          _fontSizeFraction: 0.222,
          offsets: {
            underline: 0.1,
            linethrough: -0.315,
            overline: -0.88
          },
          _fontSizeMult: 1.13,
          charSpacing: 0,
          styles: null,
          _measuringContext: null,
          deltaY: 0,
          direction: "ltr",
          _styleProperties: [
            "stroke",
            "strokeWidth",
            "fill",
            "fontFamily",
            "fontSize",
            "fontWeight",
            "fontStyle",
            "underline",
            "overline",
            "linethrough",
            "deltaY",
            "textBackgroundColor"
          ],
          __charBounds: [],
          CACHE_FONT_SIZE: 400,
          MIN_TEXT_WIDTH: 2,
          initialize: function(text, options) {
            this.styles = options ? options.styles || {} : {};
            this.text = text;
            this.__skipDimension = true;
            this.callSuper("initialize", options);
            if (this.path) {
              this.setPathInfo();
            }
            this.__skipDimension = false;
            this.initDimensions();
            this.setCoords();
            this.setupState({ propertySet: "_dimensionAffectingProps" });
          },
          setPathInfo: function() {
            var path = this.path;
            if (path) {
              path.segmentsInfo = fabric5.util.getPathSegmentsInfo(path.path);
            }
          },
          getMeasuringContext: function() {
            if (!fabric5._measuringContext) {
              fabric5._measuringContext = this.canvas && this.canvas.contextCache || fabric5.util.createCanvasElement().getContext("2d");
            }
            return fabric5._measuringContext;
          },
          _splitText: function() {
            var newLines = this._splitTextIntoLines(this.text);
            this.textLines = newLines.lines;
            this._textLines = newLines.graphemeLines;
            this._unwrappedTextLines = newLines._unwrappedLines;
            this._text = newLines.graphemeText;
            return newLines;
          },
          initDimensions: function() {
            if (this.__skipDimension) {
              return;
            }
            this._splitText();
            this._clearCache();
            if (this.path) {
              this.width = this.path.width;
              this.height = this.path.height;
            } else {
              this.width = this.calcTextWidth() || this.cursorWidth || this.MIN_TEXT_WIDTH;
              this.height = this.calcTextHeight();
            }
            if (this.textAlign.indexOf("justify") !== -1) {
              this.enlargeSpaces();
            }
            this.saveState({ propertySet: "_dimensionAffectingProps" });
          },
          enlargeSpaces: function() {
            var diffSpace, currentLineWidth, numberOfSpaces, accumulatedSpace, line2, charBound, spaces;
            for (var i = 0, len = this._textLines.length; i < len; i++) {
              if (this.textAlign !== "justify" && (i === len - 1 || this.isEndOfWrapping(i))) {
                continue;
              }
              accumulatedSpace = 0;
              line2 = this._textLines[i];
              currentLineWidth = this.getLineWidth(i);
              if (currentLineWidth < this.width && (spaces = this.textLines[i].match(this._reSpacesAndTabs))) {
                numberOfSpaces = spaces.length;
                diffSpace = (this.width - currentLineWidth) / numberOfSpaces;
                for (var j = 0, jlen = line2.length; j <= jlen; j++) {
                  charBound = this.__charBounds[i][j];
                  if (this._reSpaceAndTab.test(line2[j])) {
                    charBound.width += diffSpace;
                    charBound.kernedWidth += diffSpace;
                    charBound.left += accumulatedSpace;
                    accumulatedSpace += diffSpace;
                  } else {
                    charBound.left += accumulatedSpace;
                  }
                }
              }
            }
          },
          isEndOfWrapping: function(lineIndex) {
            return lineIndex === this._textLines.length - 1;
          },
          missingNewlineOffset: function() {
            return 1;
          },
          toString: function() {
            return "#<fabric.Text (" + this.complexity() + '): { "text": "' + this.text + '", "fontFamily": "' + this.fontFamily + '" }>';
          },
          _getCacheCanvasDimensions: function() {
            var dims = this.callSuper("_getCacheCanvasDimensions");
            var fontSize2 = this.fontSize;
            dims.width += fontSize2 * dims.zoomX;
            dims.height += fontSize2 * dims.zoomY;
            return dims;
          },
          _render: function(ctx) {
            var path = this.path;
            path && !path.isNotVisible() && path._render(ctx);
            this._setTextStyles(ctx);
            this._renderTextLinesBackground(ctx);
            this._renderTextDecoration(ctx, "underline");
            this._renderText(ctx);
            this._renderTextDecoration(ctx, "overline");
            this._renderTextDecoration(ctx, "linethrough");
          },
          _renderText: function(ctx) {
            if (this.paintFirst === "stroke") {
              this._renderTextStroke(ctx);
              this._renderTextFill(ctx);
            } else {
              this._renderTextFill(ctx);
              this._renderTextStroke(ctx);
            }
          },
          _setTextStyles: function(ctx, charStyle, forMeasuring) {
            ctx.textBaseline = "alphabetic";
            ctx.font = this._getFontDeclaration(charStyle, forMeasuring);
          },
          calcTextWidth: function() {
            var maxWidth2 = this.getLineWidth(0);
            for (var i = 1, len = this._textLines.length; i < len; i++) {
              var currentLineWidth = this.getLineWidth(i);
              if (currentLineWidth > maxWidth2) {
                maxWidth2 = currentLineWidth;
              }
            }
            return maxWidth2;
          },
          _renderTextLine: function(method, ctx, line2, left2, top2, lineIndex) {
            this._renderChars(method, ctx, line2, left2, top2, lineIndex);
          },
          _renderTextLinesBackground: function(ctx) {
            if (!this.textBackgroundColor && !this.styleHas("textBackgroundColor")) {
              return;
            }
            var heightOfLine, lineLeftOffset, originalFill = ctx.fillStyle, line2, lastColor, leftOffset = this._getLeftOffset(), lineTopOffset = this._getTopOffset(), boxStart = 0, boxWidth = 0, charBox, currentColor, path = this.path, drawStart;
            for (var i = 0, len = this._textLines.length; i < len; i++) {
              heightOfLine = this.getHeightOfLine(i);
              if (!this.textBackgroundColor && !this.styleHas("textBackgroundColor", i)) {
                lineTopOffset += heightOfLine;
                continue;
              }
              line2 = this._textLines[i];
              lineLeftOffset = this._getLineLeftOffset(i);
              boxWidth = 0;
              boxStart = 0;
              lastColor = this.getValueOfPropertyAt(i, 0, "textBackgroundColor");
              for (var j = 0, jlen = line2.length; j < jlen; j++) {
                charBox = this.__charBounds[i][j];
                currentColor = this.getValueOfPropertyAt(i, j, "textBackgroundColor");
                if (path) {
                  ctx.save();
                  ctx.translate(charBox.renderLeft, charBox.renderTop);
                  ctx.rotate(charBox.angle);
                  ctx.fillStyle = currentColor;
                  currentColor && ctx.fillRect(-charBox.width / 2, -heightOfLine / this.lineHeight * (1 - this._fontSizeFraction), charBox.width, heightOfLine / this.lineHeight);
                  ctx.restore();
                } else if (currentColor !== lastColor) {
                  drawStart = leftOffset + lineLeftOffset + boxStart;
                  if (this.direction === "rtl") {
                    drawStart = this.width - drawStart - boxWidth;
                  }
                  ctx.fillStyle = lastColor;
                  lastColor && ctx.fillRect(drawStart, lineTopOffset, boxWidth, heightOfLine / this.lineHeight);
                  boxStart = charBox.left;
                  boxWidth = charBox.width;
                  lastColor = currentColor;
                } else {
                  boxWidth += charBox.kernedWidth;
                }
              }
              if (currentColor && !path) {
                drawStart = leftOffset + lineLeftOffset + boxStart;
                if (this.direction === "rtl") {
                  drawStart = this.width - drawStart - boxWidth;
                }
                ctx.fillStyle = currentColor;
                ctx.fillRect(drawStart, lineTopOffset, boxWidth, heightOfLine / this.lineHeight);
              }
              lineTopOffset += heightOfLine;
            }
            ctx.fillStyle = originalFill;
            this._removeShadow(ctx);
          },
          getFontCache: function(decl) {
            var fontFamily2 = decl.fontFamily.toLowerCase();
            if (!fabric5.charWidthsCache[fontFamily2]) {
              fabric5.charWidthsCache[fontFamily2] = {};
            }
            var cache2 = fabric5.charWidthsCache[fontFamily2], cacheProp = decl.fontStyle.toLowerCase() + "_" + (decl.fontWeight + "").toLowerCase();
            if (!cache2[cacheProp]) {
              cache2[cacheProp] = {};
            }
            return cache2[cacheProp];
          },
          _measureChar: function(_char, charStyle, previousChar, prevCharStyle) {
            var fontCache = this.getFontCache(charStyle), fontDeclaration = this._getFontDeclaration(charStyle), previousFontDeclaration = this._getFontDeclaration(prevCharStyle), couple = previousChar + _char, stylesAreEqual = fontDeclaration === previousFontDeclaration, width2, coupleWidth, previousWidth, fontMultiplier = charStyle.fontSize / this.CACHE_FONT_SIZE, kernedWidth;
            if (previousChar && fontCache[previousChar] !== void 0) {
              previousWidth = fontCache[previousChar];
            }
            if (fontCache[_char] !== void 0) {
              kernedWidth = width2 = fontCache[_char];
            }
            if (stylesAreEqual && fontCache[couple] !== void 0) {
              coupleWidth = fontCache[couple];
              kernedWidth = coupleWidth - previousWidth;
            }
            if (width2 === void 0 || previousWidth === void 0 || coupleWidth === void 0) {
              var ctx = this.getMeasuringContext();
              this._setTextStyles(ctx, charStyle, true);
            }
            if (width2 === void 0) {
              kernedWidth = width2 = ctx.measureText(_char).width;
              fontCache[_char] = width2;
            }
            if (previousWidth === void 0 && stylesAreEqual && previousChar) {
              previousWidth = ctx.measureText(previousChar).width;
              fontCache[previousChar] = previousWidth;
            }
            if (stylesAreEqual && coupleWidth === void 0) {
              coupleWidth = ctx.measureText(couple).width;
              fontCache[couple] = coupleWidth;
              kernedWidth = coupleWidth - previousWidth;
            }
            return { width: width2 * fontMultiplier, kernedWidth: kernedWidth * fontMultiplier };
          },
          getHeightOfChar: function(line2, _char) {
            return this.getValueOfPropertyAt(line2, _char, "fontSize");
          },
          measureLine: function(lineIndex) {
            var lineInfo = this._measureLine(lineIndex);
            if (this.charSpacing !== 0) {
              lineInfo.width -= this._getWidthOfCharSpacing();
            }
            if (lineInfo.width < 0) {
              lineInfo.width = 0;
            }
            return lineInfo;
          },
          _measureLine: function(lineIndex) {
            var width2 = 0, i, grapheme, line2 = this._textLines[lineIndex], prevGrapheme, graphemeInfo, numOfSpaces = 0, lineBounds = new Array(line2.length), positionInPath = 0, startingPoint, totalPathLength, path = this.path, reverse = this.pathSide === "right";
            this.__charBounds[lineIndex] = lineBounds;
            for (i = 0; i < line2.length; i++) {
              grapheme = line2[i];
              graphemeInfo = this._getGraphemeBox(grapheme, lineIndex, i, prevGrapheme);
              lineBounds[i] = graphemeInfo;
              width2 += graphemeInfo.kernedWidth;
              prevGrapheme = grapheme;
            }
            lineBounds[i] = {
              left: graphemeInfo ? graphemeInfo.left + graphemeInfo.width : 0,
              width: 0,
              kernedWidth: 0,
              height: this.fontSize
            };
            if (path) {
              totalPathLength = path.segmentsInfo[path.segmentsInfo.length - 1].length;
              startingPoint = fabric5.util.getPointOnPath(path.path, 0, path.segmentsInfo);
              startingPoint.x += path.pathOffset.x;
              startingPoint.y += path.pathOffset.y;
              switch (this.textAlign) {
                case "left":
                  positionInPath = reverse ? totalPathLength - width2 : 0;
                  break;
                case "center":
                  positionInPath = (totalPathLength - width2) / 2;
                  break;
                case "right":
                  positionInPath = reverse ? 0 : totalPathLength - width2;
                  break;
              }
              positionInPath += this.pathStartOffset * (reverse ? -1 : 1);
              for (i = reverse ? line2.length - 1 : 0; reverse ? i >= 0 : i < line2.length; reverse ? i-- : i++) {
                graphemeInfo = lineBounds[i];
                if (positionInPath > totalPathLength) {
                  positionInPath %= totalPathLength;
                } else if (positionInPath < 0) {
                  positionInPath += totalPathLength;
                }
                this._setGraphemeOnPath(positionInPath, graphemeInfo, startingPoint);
                positionInPath += graphemeInfo.kernedWidth;
              }
            }
            return { width: width2, numOfSpaces };
          },
          _setGraphemeOnPath: function(positionInPath, graphemeInfo, startingPoint) {
            var centerPosition = positionInPath + graphemeInfo.kernedWidth / 2, path = this.path;
            var info = fabric5.util.getPointOnPath(path.path, centerPosition, path.segmentsInfo);
            graphemeInfo.renderLeft = info.x - startingPoint.x;
            graphemeInfo.renderTop = info.y - startingPoint.y;
            graphemeInfo.angle = info.angle + (this.pathSide === "right" ? Math.PI : 0);
          },
          _getGraphemeBox: function(grapheme, lineIndex, charIndex, prevGrapheme, skipLeft) {
            var style3 = this.getCompleteStyleDeclaration(lineIndex, charIndex), prevStyle = prevGrapheme ? this.getCompleteStyleDeclaration(lineIndex, charIndex - 1) : {}, info = this._measureChar(grapheme, style3, prevGrapheme, prevStyle), kernedWidth = info.kernedWidth, width2 = info.width, charSpacing;
            if (this.charSpacing !== 0) {
              charSpacing = this._getWidthOfCharSpacing();
              width2 += charSpacing;
              kernedWidth += charSpacing;
            }
            var box = {
              width: width2,
              left: 0,
              height: style3.fontSize,
              kernedWidth,
              deltaY: style3.deltaY
            };
            if (charIndex > 0 && !skipLeft) {
              var previousBox = this.__charBounds[lineIndex][charIndex - 1];
              box.left = previousBox.left + previousBox.width + info.kernedWidth - info.width;
            }
            return box;
          },
          getHeightOfLine: function(lineIndex) {
            if (this.__lineHeights[lineIndex]) {
              return this.__lineHeights[lineIndex];
            }
            var line2 = this._textLines[lineIndex], maxHeight2 = this.getHeightOfChar(lineIndex, 0);
            for (var i = 1, len = line2.length; i < len; i++) {
              maxHeight2 = Math.max(this.getHeightOfChar(lineIndex, i), maxHeight2);
            }
            return this.__lineHeights[lineIndex] = maxHeight2 * this.lineHeight * this._fontSizeMult;
          },
          calcTextHeight: function() {
            var lineHeight2, height2 = 0;
            for (var i = 0, len = this._textLines.length; i < len; i++) {
              lineHeight2 = this.getHeightOfLine(i);
              height2 += i === len - 1 ? lineHeight2 / this.lineHeight : lineHeight2;
            }
            return height2;
          },
          _getLeftOffset: function() {
            return this.direction === "ltr" ? -this.width / 2 : this.width / 2;
          },
          _getTopOffset: function() {
            return -this.height / 2;
          },
          _renderTextCommon: function(ctx, method) {
            ctx.save();
            var lineHeights = 0, left2 = this._getLeftOffset(), top2 = this._getTopOffset();
            for (var i = 0, len = this._textLines.length; i < len; i++) {
              var heightOfLine = this.getHeightOfLine(i), maxHeight2 = heightOfLine / this.lineHeight, leftOffset = this._getLineLeftOffset(i);
              this._renderTextLine(method, ctx, this._textLines[i], left2 + leftOffset, top2 + lineHeights + maxHeight2, i);
              lineHeights += heightOfLine;
            }
            ctx.restore();
          },
          _renderTextFill: function(ctx) {
            if (!this.fill && !this.styleHas("fill")) {
              return;
            }
            this._renderTextCommon(ctx, "fillText");
          },
          _renderTextStroke: function(ctx) {
            if ((!this.stroke || this.strokeWidth === 0) && this.isEmptyStyles()) {
              return;
            }
            if (this.shadow && !this.shadow.affectStroke) {
              this._removeShadow(ctx);
            }
            ctx.save();
            this._setLineDash(ctx, this.strokeDashArray);
            ctx.beginPath();
            this._renderTextCommon(ctx, "strokeText");
            ctx.closePath();
            ctx.restore();
          },
          _renderChars: function(method, ctx, line2, left2, top2, lineIndex) {
            var lineHeight2 = this.getHeightOfLine(lineIndex), isJustify = this.textAlign.indexOf("justify") !== -1, actualStyle, nextStyle, charsToRender = "", charBox, boxWidth = 0, timeToRender, path = this.path, shortCut = !isJustify && this.charSpacing === 0 && this.isEmptyStyles(lineIndex) && !path, isLtr = this.direction === "ltr", sign = this.direction === "ltr" ? 1 : -1, drawingLeft;
            ctx.save();
            top2 -= lineHeight2 * this._fontSizeFraction / this.lineHeight;
            if (shortCut) {
              ctx.canvas.setAttribute("dir", isLtr ? "ltr" : "rtl");
              ctx.direction = isLtr ? "ltr" : "rtl";
              ctx.textAlign = isLtr ? "left" : "right";
              this._renderChar(method, ctx, lineIndex, 0, line2.join(""), left2, top2, lineHeight2);
              ctx.restore();
              return;
            }
            for (var i = 0, len = line2.length - 1; i <= len; i++) {
              timeToRender = i === len || this.charSpacing || path;
              charsToRender += line2[i];
              charBox = this.__charBounds[lineIndex][i];
              if (boxWidth === 0) {
                left2 += sign * (charBox.kernedWidth - charBox.width);
                boxWidth += charBox.width;
              } else {
                boxWidth += charBox.kernedWidth;
              }
              if (isJustify && !timeToRender) {
                if (this._reSpaceAndTab.test(line2[i])) {
                  timeToRender = true;
                }
              }
              if (!timeToRender) {
                actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);
                nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);
                timeToRender = this._hasStyleChanged(actualStyle, nextStyle);
              }
              if (timeToRender) {
                if (path) {
                  ctx.save();
                  ctx.translate(charBox.renderLeft, charBox.renderTop);
                  ctx.rotate(charBox.angle);
                  this._renderChar(method, ctx, lineIndex, i, charsToRender, -boxWidth / 2, 0, lineHeight2);
                  ctx.restore();
                } else {
                  drawingLeft = left2;
                  ctx.canvas.setAttribute("dir", isLtr ? "ltr" : "rtl");
                  ctx.direction = isLtr ? "ltr" : "rtl";
                  ctx.textAlign = isLtr ? "left" : "right";
                  this._renderChar(method, ctx, lineIndex, i, charsToRender, drawingLeft, top2, lineHeight2);
                }
                charsToRender = "";
                actualStyle = nextStyle;
                left2 += sign * boxWidth;
                boxWidth = 0;
              }
            }
            ctx.restore();
          },
          _applyPatternGradientTransformText: function(filler) {
            var pCanvas = fabric5.util.createCanvasElement(), pCtx, width2 = this.width + this.strokeWidth, height2 = this.height + this.strokeWidth;
            pCanvas.width = width2;
            pCanvas.height = height2;
            pCtx = pCanvas.getContext("2d");
            pCtx.beginPath();
            pCtx.moveTo(0, 0);
            pCtx.lineTo(width2, 0);
            pCtx.lineTo(width2, height2);
            pCtx.lineTo(0, height2);
            pCtx.closePath();
            pCtx.translate(width2 / 2, height2 / 2);
            pCtx.fillStyle = filler.toLive(pCtx);
            this._applyPatternGradientTransform(pCtx, filler);
            pCtx.fill();
            return pCtx.createPattern(pCanvas, "no-repeat");
          },
          handleFiller: function(ctx, property, filler) {
            var offsetX, offsetY;
            if (filler.toLive) {
              if (filler.gradientUnits === "percentage" || filler.gradientTransform || filler.patternTransform) {
                offsetX = -this.width / 2;
                offsetY = -this.height / 2;
                ctx.translate(offsetX, offsetY);
                ctx[property] = this._applyPatternGradientTransformText(filler);
                return { offsetX, offsetY };
              } else {
                ctx[property] = filler.toLive(ctx, this);
                return this._applyPatternGradientTransform(ctx, filler);
              }
            } else {
              ctx[property] = filler;
            }
            return { offsetX: 0, offsetY: 0 };
          },
          _setStrokeStyles: function(ctx, decl) {
            ctx.lineWidth = decl.strokeWidth;
            ctx.lineCap = this.strokeLineCap;
            ctx.lineDashOffset = this.strokeDashOffset;
            ctx.lineJoin = this.strokeLineJoin;
            ctx.miterLimit = this.strokeMiterLimit;
            return this.handleFiller(ctx, "strokeStyle", decl.stroke);
          },
          _setFillStyles: function(ctx, decl) {
            return this.handleFiller(ctx, "fillStyle", decl.fill);
          },
          _renderChar: function(method, ctx, lineIndex, charIndex, _char, left2, top2) {
            var decl = this._getStyleDeclaration(lineIndex, charIndex), fullDecl = this.getCompleteStyleDeclaration(lineIndex, charIndex), shouldFill = method === "fillText" && fullDecl.fill, shouldStroke = method === "strokeText" && fullDecl.stroke && fullDecl.strokeWidth, fillOffsets, strokeOffsets;
            if (!shouldStroke && !shouldFill) {
              return;
            }
            ctx.save();
            shouldFill && (fillOffsets = this._setFillStyles(ctx, fullDecl));
            shouldStroke && (strokeOffsets = this._setStrokeStyles(ctx, fullDecl));
            ctx.font = this._getFontDeclaration(fullDecl);
            if (decl && decl.textBackgroundColor) {
              this._removeShadow(ctx);
            }
            if (decl && decl.deltaY) {
              top2 += decl.deltaY;
            }
            shouldFill && ctx.fillText(_char, left2 - fillOffsets.offsetX, top2 - fillOffsets.offsetY);
            shouldStroke && ctx.strokeText(_char, left2 - strokeOffsets.offsetX, top2 - strokeOffsets.offsetY);
            ctx.restore();
          },
          setSuperscript: function(start, end) {
            return this._setScript(start, end, this.superscript);
          },
          setSubscript: function(start, end) {
            return this._setScript(start, end, this.subscript);
          },
          _setScript: function(start, end, schema) {
            var loc = this.get2DCursorLocation(start, true), fontSize2 = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, "fontSize"), dy = this.getValueOfPropertyAt(loc.lineIndex, loc.charIndex, "deltaY"), style3 = { fontSize: fontSize2 * schema.size, deltaY: dy + fontSize2 * schema.baseline };
            this.setSelectionStyles(style3, start, end);
            return this;
          },
          _hasStyleChanged: function(prevStyle, thisStyle) {
            return prevStyle.fill !== thisStyle.fill || prevStyle.stroke !== thisStyle.stroke || prevStyle.strokeWidth !== thisStyle.strokeWidth || prevStyle.fontSize !== thisStyle.fontSize || prevStyle.fontFamily !== thisStyle.fontFamily || prevStyle.fontWeight !== thisStyle.fontWeight || prevStyle.fontStyle !== thisStyle.fontStyle || prevStyle.deltaY !== thisStyle.deltaY;
          },
          _hasStyleChangedForSvg: function(prevStyle, thisStyle) {
            return this._hasStyleChanged(prevStyle, thisStyle) || prevStyle.overline !== thisStyle.overline || prevStyle.underline !== thisStyle.underline || prevStyle.linethrough !== thisStyle.linethrough;
          },
          _getLineLeftOffset: function(lineIndex) {
            var lineWidth = this.getLineWidth(lineIndex), lineDiff = this.width - lineWidth, textAlign2 = this.textAlign, direction = this.direction, isEndOfWrapping, leftOffset = 0, isEndOfWrapping = this.isEndOfWrapping(lineIndex);
            if (textAlign2 === "justify" || textAlign2 === "justify-center" && !isEndOfWrapping || textAlign2 === "justify-right" && !isEndOfWrapping || textAlign2 === "justify-left" && !isEndOfWrapping) {
              return 0;
            }
            if (textAlign2 === "center") {
              leftOffset = lineDiff / 2;
            }
            if (textAlign2 === "right") {
              leftOffset = lineDiff;
            }
            if (textAlign2 === "justify-center") {
              leftOffset = lineDiff / 2;
            }
            if (textAlign2 === "justify-right") {
              leftOffset = lineDiff;
            }
            if (direction === "rtl") {
              leftOffset -= lineDiff;
            }
            return leftOffset;
          },
          _clearCache: function() {
            this.__lineWidths = [];
            this.__lineHeights = [];
            this.__charBounds = [];
          },
          _shouldClearDimensionCache: function() {
            var shouldClear = this._forceClearCache;
            shouldClear || (shouldClear = this.hasStateChanged("_dimensionAffectingProps"));
            if (shouldClear) {
              this.dirty = true;
              this._forceClearCache = false;
            }
            return shouldClear;
          },
          getLineWidth: function(lineIndex) {
            if (this.__lineWidths[lineIndex]) {
              return this.__lineWidths[lineIndex];
            }
            var width2, line2 = this._textLines[lineIndex], lineInfo;
            if (line2 === "") {
              width2 = 0;
            } else {
              lineInfo = this.measureLine(lineIndex);
              width2 = lineInfo.width;
            }
            this.__lineWidths[lineIndex] = width2;
            return width2;
          },
          _getWidthOfCharSpacing: function() {
            if (this.charSpacing !== 0) {
              return this.fontSize * this.charSpacing / 1e3;
            }
            return 0;
          },
          getValueOfPropertyAt: function(lineIndex, charIndex, property) {
            var charStyle = this._getStyleDeclaration(lineIndex, charIndex);
            if (charStyle && typeof charStyle[property] !== "undefined") {
              return charStyle[property];
            }
            return this[property];
          },
          _renderTextDecoration: function(ctx, type) {
            if (!this[type] && !this.styleHas(type)) {
              return;
            }
            var heightOfLine, size, _size, lineLeftOffset, dy, _dy, line2, lastDecoration, leftOffset = this._getLeftOffset(), topOffset = this._getTopOffset(), top2, boxStart, boxWidth, charBox, currentDecoration, maxHeight2, currentFill, lastFill, path = this.path, charSpacing = this._getWidthOfCharSpacing(), offsetY = this.offsets[type];
            for (var i = 0, len = this._textLines.length; i < len; i++) {
              heightOfLine = this.getHeightOfLine(i);
              if (!this[type] && !this.styleHas(type, i)) {
                topOffset += heightOfLine;
                continue;
              }
              line2 = this._textLines[i];
              maxHeight2 = heightOfLine / this.lineHeight;
              lineLeftOffset = this._getLineLeftOffset(i);
              boxStart = 0;
              boxWidth = 0;
              lastDecoration = this.getValueOfPropertyAt(i, 0, type);
              lastFill = this.getValueOfPropertyAt(i, 0, "fill");
              top2 = topOffset + maxHeight2 * (1 - this._fontSizeFraction);
              size = this.getHeightOfChar(i, 0);
              dy = this.getValueOfPropertyAt(i, 0, "deltaY");
              for (var j = 0, jlen = line2.length; j < jlen; j++) {
                charBox = this.__charBounds[i][j];
                currentDecoration = this.getValueOfPropertyAt(i, j, type);
                currentFill = this.getValueOfPropertyAt(i, j, "fill");
                _size = this.getHeightOfChar(i, j);
                _dy = this.getValueOfPropertyAt(i, j, "deltaY");
                if (path && currentDecoration && currentFill) {
                  ctx.save();
                  ctx.fillStyle = lastFill;
                  ctx.translate(charBox.renderLeft, charBox.renderTop);
                  ctx.rotate(charBox.angle);
                  ctx.fillRect(-charBox.kernedWidth / 2, offsetY * _size + _dy, charBox.kernedWidth, this.fontSize / 15);
                  ctx.restore();
                } else if ((currentDecoration !== lastDecoration || currentFill !== lastFill || _size !== size || _dy !== dy) && boxWidth > 0) {
                  var drawStart = leftOffset + lineLeftOffset + boxStart;
                  if (this.direction === "rtl") {
                    drawStart = this.width - drawStart - boxWidth;
                  }
                  if (lastDecoration && lastFill) {
                    ctx.fillStyle = lastFill;
                    ctx.fillRect(drawStart, top2 + offsetY * size + dy, boxWidth, this.fontSize / 15);
                  }
                  boxStart = charBox.left;
                  boxWidth = charBox.width;
                  lastDecoration = currentDecoration;
                  lastFill = currentFill;
                  size = _size;
                  dy = _dy;
                } else {
                  boxWidth += charBox.kernedWidth;
                }
              }
              var drawStart = leftOffset + lineLeftOffset + boxStart;
              if (this.direction === "rtl") {
                drawStart = this.width - drawStart - boxWidth;
              }
              ctx.fillStyle = currentFill;
              currentDecoration && currentFill && ctx.fillRect(drawStart, top2 + offsetY * size + dy, boxWidth - charSpacing, this.fontSize / 15);
              topOffset += heightOfLine;
            }
            this._removeShadow(ctx);
          },
          _getFontDeclaration: function(styleObject, forMeasuring) {
            var style3 = styleObject || this, family = this.fontFamily, fontIsGeneric = fabric5.Text.genericFonts.indexOf(family.toLowerCase()) > -1;
            var fontFamily2 = family === void 0 || family.indexOf("'") > -1 || family.indexOf(",") > -1 || family.indexOf('"') > -1 || fontIsGeneric ? style3.fontFamily : '"' + style3.fontFamily + '"';
            return [
              fabric5.isLikelyNode ? style3.fontWeight : style3.fontStyle,
              fabric5.isLikelyNode ? style3.fontStyle : style3.fontWeight,
              forMeasuring ? this.CACHE_FONT_SIZE + "px" : style3.fontSize + "px",
              fontFamily2
            ].join(" ");
          },
          render: function(ctx) {
            if (!this.visible) {
              return;
            }
            if (this.canvas && this.canvas.skipOffscreen && !this.group && !this.isOnScreen()) {
              return;
            }
            if (this._shouldClearDimensionCache()) {
              this.initDimensions();
            }
            this.callSuper("render", ctx);
          },
          _splitTextIntoLines: function(text) {
            var lines = text.split(this._reNewline), newLines = new Array(lines.length), newLine = ["\n"], newText = [];
            for (var i = 0; i < lines.length; i++) {
              newLines[i] = fabric5.util.string.graphemeSplit(lines[i]);
              newText = newText.concat(newLines[i], newLine);
            }
            newText.pop();
            return { _unwrappedLines: newLines, lines, graphemeText: newText, graphemeLines: newLines };
          },
          toObject: function(propertiesToInclude) {
            var allProperties = additionalProps.concat(propertiesToInclude);
            var obj = this.callSuper("toObject", allProperties);
            obj.styles = clone(this.styles, true);
            if (obj.path) {
              obj.path = this.path.toObject();
            }
            return obj;
          },
          set: function(key, value) {
            this.callSuper("set", key, value);
            var needsDims = false;
            var isAddingPath = false;
            if (typeof key === "object") {
              for (var _key in key) {
                if (_key === "path") {
                  this.setPathInfo();
                }
                needsDims = needsDims || this._dimensionAffectingProps.indexOf(_key) !== -1;
                isAddingPath = isAddingPath || _key === "path";
              }
            } else {
              needsDims = this._dimensionAffectingProps.indexOf(key) !== -1;
              isAddingPath = key === "path";
            }
            if (isAddingPath) {
              this.setPathInfo();
            }
            if (needsDims) {
              this.initDimensions();
              this.setCoords();
            }
            return this;
          },
          complexity: function() {
            return 1;
          }
        });
        fabric5.Text.ATTRIBUTE_NAMES = fabric5.SHARED_ATTRIBUTES.concat("x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor".split(" "));
        fabric5.Text.DEFAULT_SVG_FONT_SIZE = 16;
        fabric5.Text.fromElement = function(element, callback, options) {
          if (!element) {
            return callback(null);
          }
          var parsedAttributes = fabric5.parseAttributes(element, fabric5.Text.ATTRIBUTE_NAMES), parsedAnchor = parsedAttributes.textAnchor || "left";
          options = fabric5.util.object.extend(options ? clone(options) : {}, parsedAttributes);
          options.top = options.top || 0;
          options.left = options.left || 0;
          if (parsedAttributes.textDecoration) {
            var textDecoration = parsedAttributes.textDecoration;
            if (textDecoration.indexOf("underline") !== -1) {
              options.underline = true;
            }
            if (textDecoration.indexOf("overline") !== -1) {
              options.overline = true;
            }
            if (textDecoration.indexOf("line-through") !== -1) {
              options.linethrough = true;
            }
            delete options.textDecoration;
          }
          if ("dx" in parsedAttributes) {
            options.left += parsedAttributes.dx;
          }
          if ("dy" in parsedAttributes) {
            options.top += parsedAttributes.dy;
          }
          if (!("fontSize" in options)) {
            options.fontSize = fabric5.Text.DEFAULT_SVG_FONT_SIZE;
          }
          var textContent = "";
          if (!("textContent" in element)) {
            if ("firstChild" in element && element.firstChild !== null) {
              if ("data" in element.firstChild && element.firstChild.data !== null) {
                textContent = element.firstChild.data;
              }
            }
          } else {
            textContent = element.textContent;
          }
          textContent = textContent.replace(/^\s+|\s+$|\n+/g, "").replace(/\s+/g, " ");
          var originalStrokeWidth = options.strokeWidth;
          options.strokeWidth = 0;
          var text = new fabric5.Text(textContent, options), textHeightScaleFactor = text.getScaledHeight() / text.height, lineHeightDiff = (text.height + text.strokeWidth) * text.lineHeight - text.height, scaledDiff = lineHeightDiff * textHeightScaleFactor, textHeight = text.getScaledHeight() + scaledDiff, offX = 0;
          if (parsedAnchor === "center") {
            offX = text.getScaledWidth() / 2;
          }
          if (parsedAnchor === "right") {
            offX = text.getScaledWidth();
          }
          text.set({
            left: text.left - offX,
            top: text.top - (textHeight - text.fontSize * (0.07 + text._fontSizeFraction)) / text.lineHeight,
            strokeWidth: typeof originalStrokeWidth !== "undefined" ? originalStrokeWidth : 1
          });
          callback(text);
        };
        fabric5.Text.fromObject = function(object, callback) {
          var objectCopy = clone(object), path = object.path;
          delete objectCopy.path;
          return fabric5.Object._fromObject("Text", objectCopy, function(textInstance) {
            if (path) {
              fabric5.Object._fromObject("Path", path, function(pathInstance) {
                textInstance.set("path", pathInstance);
                callback(textInstance);
              }, "path");
            } else {
              callback(textInstance);
            }
          }, "text");
        };
        fabric5.Text.genericFonts = ["sans-serif", "serif", "cursive", "fantasy", "monospace"];
        fabric5.util.createAccessors && fabric5.util.createAccessors(fabric5.Text);
      })(typeof exports !== "undefined" ? exports : exports);
      (function() {
        fabric4.util.object.extend(fabric4.Text.prototype, {
          isEmptyStyles: function(lineIndex) {
            if (!this.styles) {
              return true;
            }
            if (typeof lineIndex !== "undefined" && !this.styles[lineIndex]) {
              return true;
            }
            var obj = typeof lineIndex === "undefined" ? this.styles : { line: this.styles[lineIndex] };
            for (var p1 in obj) {
              for (var p2 in obj[p1]) {
                for (var p3 in obj[p1][p2]) {
                  return false;
                }
              }
            }
            return true;
          },
          styleHas: function(property, lineIndex) {
            if (!this.styles || !property || property === "") {
              return false;
            }
            if (typeof lineIndex !== "undefined" && !this.styles[lineIndex]) {
              return false;
            }
            var obj = typeof lineIndex === "undefined" ? this.styles : { 0: this.styles[lineIndex] };
            for (var p1 in obj) {
              for (var p2 in obj[p1]) {
                if (typeof obj[p1][p2][property] !== "undefined") {
                  return true;
                }
              }
            }
            return false;
          },
          cleanStyle: function(property) {
            if (!this.styles || !property || property === "") {
              return false;
            }
            var obj = this.styles, stylesCount = 0, letterCount, stylePropertyValue, allStyleObjectPropertiesMatch = true, graphemeCount = 0, styleObject;
            for (var p1 in obj) {
              letterCount = 0;
              for (var p2 in obj[p1]) {
                var styleObject = obj[p1][p2], stylePropertyHasBeenSet = styleObject.hasOwnProperty(property);
                stylesCount++;
                if (stylePropertyHasBeenSet) {
                  if (!stylePropertyValue) {
                    stylePropertyValue = styleObject[property];
                  } else if (styleObject[property] !== stylePropertyValue) {
                    allStyleObjectPropertiesMatch = false;
                  }
                  if (styleObject[property] === this[property]) {
                    delete styleObject[property];
                  }
                } else {
                  allStyleObjectPropertiesMatch = false;
                }
                if (Object.keys(styleObject).length !== 0) {
                  letterCount++;
                } else {
                  delete obj[p1][p2];
                }
              }
              if (letterCount === 0) {
                delete obj[p1];
              }
            }
            for (var i = 0; i < this._textLines.length; i++) {
              graphemeCount += this._textLines[i].length;
            }
            if (allStyleObjectPropertiesMatch && stylesCount === graphemeCount) {
              this[property] = stylePropertyValue;
              this.removeStyle(property);
            }
          },
          removeStyle: function(property) {
            if (!this.styles || !property || property === "") {
              return;
            }
            var obj = this.styles, line2, lineNum, charNum;
            for (lineNum in obj) {
              line2 = obj[lineNum];
              for (charNum in line2) {
                delete line2[charNum][property];
                if (Object.keys(line2[charNum]).length === 0) {
                  delete line2[charNum];
                }
              }
              if (Object.keys(line2).length === 0) {
                delete obj[lineNum];
              }
            }
          },
          _extendStyles: function(index, styles4) {
            var loc = this.get2DCursorLocation(index);
            if (!this._getLineStyle(loc.lineIndex)) {
              this._setLineStyle(loc.lineIndex);
            }
            if (!this._getStyleDeclaration(loc.lineIndex, loc.charIndex)) {
              this._setStyleDeclaration(loc.lineIndex, loc.charIndex, {});
            }
            fabric4.util.object.extend(this._getStyleDeclaration(loc.lineIndex, loc.charIndex), styles4);
          },
          get2DCursorLocation: function(selectionStart, skipWrapping) {
            if (typeof selectionStart === "undefined") {
              selectionStart = this.selectionStart;
            }
            var lines = skipWrapping ? this._unwrappedTextLines : this._textLines, len = lines.length;
            for (var i = 0; i < len; i++) {
              if (selectionStart <= lines[i].length) {
                return {
                  lineIndex: i,
                  charIndex: selectionStart
                };
              }
              selectionStart -= lines[i].length + this.missingNewlineOffset(i);
            }
            return {
              lineIndex: i - 1,
              charIndex: lines[i - 1].length < selectionStart ? lines[i - 1].length : selectionStart
            };
          },
          getSelectionStyles: function(startIndex, endIndex, complete) {
            if (typeof startIndex === "undefined") {
              startIndex = this.selectionStart || 0;
            }
            if (typeof endIndex === "undefined") {
              endIndex = this.selectionEnd || startIndex;
            }
            var styles4 = [];
            for (var i = startIndex; i < endIndex; i++) {
              styles4.push(this.getStyleAtPosition(i, complete));
            }
            return styles4;
          },
          getStyleAtPosition: function(position3, complete) {
            var loc = this.get2DCursorLocation(position3), style3 = complete ? this.getCompleteStyleDeclaration(loc.lineIndex, loc.charIndex) : this._getStyleDeclaration(loc.lineIndex, loc.charIndex);
            return style3 || {};
          },
          setSelectionStyles: function(styles4, startIndex, endIndex) {
            if (typeof startIndex === "undefined") {
              startIndex = this.selectionStart || 0;
            }
            if (typeof endIndex === "undefined") {
              endIndex = this.selectionEnd || startIndex;
            }
            for (var i = startIndex; i < endIndex; i++) {
              this._extendStyles(i, styles4);
            }
            this._forceClearCache = true;
            return this;
          },
          _getStyleDeclaration: function(lineIndex, charIndex) {
            var lineStyle = this.styles && this.styles[lineIndex];
            if (!lineStyle) {
              return null;
            }
            return lineStyle[charIndex];
          },
          getCompleteStyleDeclaration: function(lineIndex, charIndex) {
            var style3 = this._getStyleDeclaration(lineIndex, charIndex) || {}, styleObject = {}, prop;
            for (var i = 0; i < this._styleProperties.length; i++) {
              prop = this._styleProperties[i];
              styleObject[prop] = typeof style3[prop] === "undefined" ? this[prop] : style3[prop];
            }
            return styleObject;
          },
          _setStyleDeclaration: function(lineIndex, charIndex, style3) {
            this.styles[lineIndex][charIndex] = style3;
          },
          _deleteStyleDeclaration: function(lineIndex, charIndex) {
            delete this.styles[lineIndex][charIndex];
          },
          _getLineStyle: function(lineIndex) {
            return !!this.styles[lineIndex];
          },
          _setLineStyle: function(lineIndex) {
            this.styles[lineIndex] = {};
          },
          _deleteLineStyle: function(lineIndex) {
            delete this.styles[lineIndex];
          }
        });
      })();
      (function() {
        function parseDecoration(object) {
          if (object.textDecoration) {
            object.textDecoration.indexOf("underline") > -1 && (object.underline = true);
            object.textDecoration.indexOf("line-through") > -1 && (object.linethrough = true);
            object.textDecoration.indexOf("overline") > -1 && (object.overline = true);
            delete object.textDecoration;
          }
        }
        fabric4.IText = fabric4.util.createClass(fabric4.Text, fabric4.Observable, {
          type: "i-text",
          selectionStart: 0,
          selectionEnd: 0,
          selectionColor: "rgba(17,119,255,0.3)",
          isEditing: false,
          editable: true,
          editingBorderColor: "rgba(102,153,255,0.25)",
          cursorWidth: 2,
          cursorColor: "",
          cursorDelay: 1e3,
          cursorDuration: 600,
          caching: true,
          hiddenTextareaContainer: null,
          _reSpace: /\s|\n/,
          _currentCursorOpacity: 0,
          _selectionDirection: null,
          _abortCursorAnimation: false,
          __widthOfSpace: [],
          inCompositionMode: false,
          initialize: function(text, options) {
            this.callSuper("initialize", text, options);
            this.initBehavior();
          },
          setSelectionStart: function(index) {
            index = Math.max(index, 0);
            this._updateAndFire("selectionStart", index);
          },
          setSelectionEnd: function(index) {
            index = Math.min(index, this.text.length);
            this._updateAndFire("selectionEnd", index);
          },
          _updateAndFire: function(property, index) {
            if (this[property] !== index) {
              this._fireSelectionChanged();
              this[property] = index;
            }
            this._updateTextarea();
          },
          _fireSelectionChanged: function() {
            this.fire("selection:changed");
            this.canvas && this.canvas.fire("text:selection:changed", { target: this });
          },
          initDimensions: function() {
            this.isEditing && this.initDelayedCursor();
            this.clearContextTop();
            this.callSuper("initDimensions");
          },
          render: function(ctx) {
            this.clearContextTop();
            this.callSuper("render", ctx);
            this.cursorOffsetCache = {};
            this.renderCursorOrSelection();
          },
          _render: function(ctx) {
            this.callSuper("_render", ctx);
          },
          clearContextTop: function(skipRestore) {
            if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
              return;
            }
            var ctx = this.canvas.contextTop, v = this.canvas.viewportTransform;
            ctx.save();
            ctx.transform(v[0], v[1], v[2], v[3], v[4], v[5]);
            this.transform(ctx);
            this._clearTextArea(ctx);
            skipRestore || ctx.restore();
          },
          renderCursorOrSelection: function() {
            if (!this.isEditing || !this.canvas || !this.canvas.contextTop) {
              return;
            }
            var boundaries = this._getCursorBoundaries(), ctx = this.canvas.contextTop;
            this.clearContextTop(true);
            if (this.selectionStart === this.selectionEnd) {
              this.renderCursor(boundaries, ctx);
            } else {
              this.renderSelection(boundaries, ctx);
            }
            ctx.restore();
          },
          _clearTextArea: function(ctx) {
            var width2 = this.width + 4, height2 = this.height + 4;
            ctx.clearRect(-width2 / 2, -height2 / 2, width2, height2);
          },
          _getCursorBoundaries: function(position3) {
            if (typeof position3 === "undefined") {
              position3 = this.selectionStart;
            }
            var left2 = this._getLeftOffset(), top2 = this._getTopOffset(), offsets = this._getCursorBoundariesOffsets(position3);
            return {
              left: left2,
              top: top2,
              leftOffset: offsets.left,
              topOffset: offsets.top
            };
          },
          _getCursorBoundariesOffsets: function(position3) {
            if (this.cursorOffsetCache && "top" in this.cursorOffsetCache) {
              return this.cursorOffsetCache;
            }
            var lineLeftOffset, lineIndex, charIndex, topOffset = 0, leftOffset = 0, boundaries, cursorPosition = this.get2DCursorLocation(position3);
            charIndex = cursorPosition.charIndex;
            lineIndex = cursorPosition.lineIndex;
            for (var i = 0; i < lineIndex; i++) {
              topOffset += this.getHeightOfLine(i);
            }
            lineLeftOffset = this._getLineLeftOffset(lineIndex);
            var bound = this.__charBounds[lineIndex][charIndex];
            bound && (leftOffset = bound.left);
            if (this.charSpacing !== 0 && charIndex === this._textLines[lineIndex].length) {
              leftOffset -= this._getWidthOfCharSpacing();
            }
            boundaries = {
              top: topOffset,
              left: lineLeftOffset + (leftOffset > 0 ? leftOffset : 0)
            };
            if (this.direction === "rtl") {
              boundaries.left *= -1;
            }
            this.cursorOffsetCache = boundaries;
            return this.cursorOffsetCache;
          },
          renderCursor: function(boundaries, ctx) {
            var cursorLocation = this.get2DCursorLocation(), lineIndex = cursorLocation.lineIndex, charIndex = cursorLocation.charIndex > 0 ? cursorLocation.charIndex - 1 : 0, charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, "fontSize"), multiplier = this.scaleX * this.canvas.getZoom(), cursorWidth = this.cursorWidth / multiplier, topOffset = boundaries.topOffset, dy = this.getValueOfPropertyAt(lineIndex, charIndex, "deltaY");
            topOffset += (1 - this._fontSizeFraction) * this.getHeightOfLine(lineIndex) / this.lineHeight - charHeight * (1 - this._fontSizeFraction);
            if (this.inCompositionMode) {
              this.renderSelection(boundaries, ctx);
            }
            ctx.fillStyle = this.cursorColor || this.getValueOfPropertyAt(lineIndex, charIndex, "fill");
            ctx.globalAlpha = this.__isMousedown ? 1 : this._currentCursorOpacity;
            ctx.fillRect(boundaries.left + boundaries.leftOffset - cursorWidth / 2, topOffset + boundaries.top + dy, cursorWidth, charHeight);
          },
          renderSelection: function(boundaries, ctx) {
            var selectionStart = this.inCompositionMode ? this.hiddenTextarea.selectionStart : this.selectionStart, selectionEnd = this.inCompositionMode ? this.hiddenTextarea.selectionEnd : this.selectionEnd, isJustify = this.textAlign.indexOf("justify") !== -1, start = this.get2DCursorLocation(selectionStart), end = this.get2DCursorLocation(selectionEnd), startLine = start.lineIndex, endLine = end.lineIndex, startChar = start.charIndex < 0 ? 0 : start.charIndex, endChar = end.charIndex < 0 ? 0 : end.charIndex;
            for (var i = startLine; i <= endLine; i++) {
              var lineOffset = this._getLineLeftOffset(i) || 0, lineHeight2 = this.getHeightOfLine(i), realLineHeight = 0, boxStart = 0, boxEnd = 0;
              if (i === startLine) {
                boxStart = this.__charBounds[startLine][startChar].left;
              }
              if (i >= startLine && i < endLine) {
                boxEnd = isJustify && !this.isEndOfWrapping(i) ? this.width : this.getLineWidth(i) || 5;
              } else if (i === endLine) {
                if (endChar === 0) {
                  boxEnd = this.__charBounds[endLine][endChar].left;
                } else {
                  var charSpacing = this._getWidthOfCharSpacing();
                  boxEnd = this.__charBounds[endLine][endChar - 1].left + this.__charBounds[endLine][endChar - 1].width - charSpacing;
                }
              }
              realLineHeight = lineHeight2;
              if (this.lineHeight < 1 || i === endLine && this.lineHeight > 1) {
                lineHeight2 /= this.lineHeight;
              }
              var drawStart = boundaries.left + lineOffset + boxStart, drawWidth = boxEnd - boxStart, drawHeight = lineHeight2, extraTop = 0;
              if (this.inCompositionMode) {
                ctx.fillStyle = this.compositionColor || "black";
                drawHeight = 1;
                extraTop = lineHeight2;
              } else {
                ctx.fillStyle = this.selectionColor;
              }
              if (this.direction === "rtl") {
                drawStart = this.width - drawStart - drawWidth;
              }
              ctx.fillRect(drawStart, boundaries.top + boundaries.topOffset + extraTop, drawWidth, drawHeight);
              boundaries.topOffset += realLineHeight;
            }
          },
          getCurrentCharFontSize: function() {
            var cp = this._getCurrentCharIndex();
            return this.getValueOfPropertyAt(cp.l, cp.c, "fontSize");
          },
          getCurrentCharColor: function() {
            var cp = this._getCurrentCharIndex();
            return this.getValueOfPropertyAt(cp.l, cp.c, "fill");
          },
          _getCurrentCharIndex: function() {
            var cursorPosition = this.get2DCursorLocation(this.selectionStart, true), charIndex = cursorPosition.charIndex > 0 ? cursorPosition.charIndex - 1 : 0;
            return { l: cursorPosition.lineIndex, c: charIndex };
          }
        });
        fabric4.IText.fromObject = function(object, callback) {
          parseDecoration(object);
          if (object.styles) {
            for (var i in object.styles) {
              for (var j in object.styles[i]) {
                parseDecoration(object.styles[i][j]);
              }
            }
          }
          fabric4.Object._fromObject("IText", object, callback, "text");
        };
      })();
      (function() {
        var clone = fabric4.util.object.clone;
        fabric4.util.object.extend(fabric4.IText.prototype, {
          initBehavior: function() {
            this.initAddedHandler();
            this.initRemovedHandler();
            this.initCursorSelectionHandlers();
            this.initDoubleClickSimulation();
            this.mouseMoveHandler = this.mouseMoveHandler.bind(this);
          },
          onDeselect: function() {
            this.isEditing && this.exitEditing();
            this.selected = false;
          },
          initAddedHandler: function() {
            var _this = this;
            this.on("added", function() {
              var canvas = _this.canvas;
              if (canvas) {
                if (!canvas._hasITextHandlers) {
                  canvas._hasITextHandlers = true;
                  _this._initCanvasHandlers(canvas);
                }
                canvas._iTextInstances = canvas._iTextInstances || [];
                canvas._iTextInstances.push(_this);
              }
            });
          },
          initRemovedHandler: function() {
            var _this = this;
            this.on("removed", function() {
              var canvas = _this.canvas;
              if (canvas) {
                canvas._iTextInstances = canvas._iTextInstances || [];
                fabric4.util.removeFromArray(canvas._iTextInstances, _this);
                if (canvas._iTextInstances.length === 0) {
                  canvas._hasITextHandlers = false;
                  _this._removeCanvasHandlers(canvas);
                }
              }
            });
          },
          _initCanvasHandlers: function(canvas) {
            canvas._mouseUpITextHandler = function() {
              if (canvas._iTextInstances) {
                canvas._iTextInstances.forEach(function(obj) {
                  obj.__isMousedown = false;
                });
              }
            };
            canvas.on("mouse:up", canvas._mouseUpITextHandler);
          },
          _removeCanvasHandlers: function(canvas) {
            canvas.off("mouse:up", canvas._mouseUpITextHandler);
          },
          _tick: function() {
            this._currentTickState = this._animateCursor(this, 1, this.cursorDuration, "_onTickComplete");
          },
          _animateCursor: function(obj, targetOpacity, duration2, completeMethod) {
            var tickState;
            tickState = {
              isAborted: false,
              abort: function() {
                this.isAborted = true;
              }
            };
            obj.animate("_currentCursorOpacity", targetOpacity, {
              duration: duration2,
              onComplete: function() {
                if (!tickState.isAborted) {
                  obj[completeMethod]();
                }
              },
              onChange: function() {
                if (obj.canvas && obj.selectionStart === obj.selectionEnd) {
                  obj.renderCursorOrSelection();
                }
              },
              abort: function() {
                return tickState.isAborted;
              }
            });
            return tickState;
          },
          _onTickComplete: function() {
            var _this = this;
            if (this._cursorTimeout1) {
              clearTimeout(this._cursorTimeout1);
            }
            this._cursorTimeout1 = setTimeout(function() {
              _this._currentTickCompleteState = _this._animateCursor(_this, 0, this.cursorDuration / 2, "_tick");
            }, 100);
          },
          initDelayedCursor: function(restart) {
            var _this = this, delay = restart ? 0 : this.cursorDelay;
            this.abortCursorAnimation();
            this._currentCursorOpacity = 1;
            this._cursorTimeout2 = setTimeout(function() {
              _this._tick();
            }, delay);
          },
          abortCursorAnimation: function() {
            var shouldClear = this._currentTickState || this._currentTickCompleteState, canvas = this.canvas;
            this._currentTickState && this._currentTickState.abort();
            this._currentTickCompleteState && this._currentTickCompleteState.abort();
            clearTimeout(this._cursorTimeout1);
            clearTimeout(this._cursorTimeout2);
            this._currentCursorOpacity = 0;
            if (shouldClear && canvas) {
              canvas.clearContext(canvas.contextTop || canvas.contextContainer);
            }
          },
          selectAll: function() {
            this.selectionStart = 0;
            this.selectionEnd = this._text.length;
            this._fireSelectionChanged();
            this._updateTextarea();
            return this;
          },
          getSelectedText: function() {
            return this._text.slice(this.selectionStart, this.selectionEnd).join("");
          },
          findWordBoundaryLeft: function(startFrom) {
            var offset = 0, index = startFrom - 1;
            if (this._reSpace.test(this._text[index])) {
              while (this._reSpace.test(this._text[index])) {
                offset++;
                index--;
              }
            }
            while (/\S/.test(this._text[index]) && index > -1) {
              offset++;
              index--;
            }
            return startFrom - offset;
          },
          findWordBoundaryRight: function(startFrom) {
            var offset = 0, index = startFrom;
            if (this._reSpace.test(this._text[index])) {
              while (this._reSpace.test(this._text[index])) {
                offset++;
                index++;
              }
            }
            while (/\S/.test(this._text[index]) && index < this._text.length) {
              offset++;
              index++;
            }
            return startFrom + offset;
          },
          findLineBoundaryLeft: function(startFrom) {
            var offset = 0, index = startFrom - 1;
            while (!/\n/.test(this._text[index]) && index > -1) {
              offset++;
              index--;
            }
            return startFrom - offset;
          },
          findLineBoundaryRight: function(startFrom) {
            var offset = 0, index = startFrom;
            while (!/\n/.test(this._text[index]) && index < this._text.length) {
              offset++;
              index++;
            }
            return startFrom + offset;
          },
          searchWordBoundary: function(selectionStart, direction) {
            var text = this._text, index = this._reSpace.test(text[selectionStart]) ? selectionStart - 1 : selectionStart, _char = text[index], reNonWord = fabric4.reNonWord;
            while (!reNonWord.test(_char) && index > 0 && index < text.length) {
              index += direction;
              _char = text[index];
            }
            if (reNonWord.test(_char)) {
              index += direction === 1 ? 0 : 1;
            }
            return index;
          },
          selectWord: function(selectionStart) {
            selectionStart = selectionStart || this.selectionStart;
            var newSelectionStart = this.searchWordBoundary(selectionStart, -1), newSelectionEnd = this.searchWordBoundary(selectionStart, 1);
            this.selectionStart = newSelectionStart;
            this.selectionEnd = newSelectionEnd;
            this._fireSelectionChanged();
            this._updateTextarea();
            this.renderCursorOrSelection();
          },
          selectLine: function(selectionStart) {
            selectionStart = selectionStart || this.selectionStart;
            var newSelectionStart = this.findLineBoundaryLeft(selectionStart), newSelectionEnd = this.findLineBoundaryRight(selectionStart);
            this.selectionStart = newSelectionStart;
            this.selectionEnd = newSelectionEnd;
            this._fireSelectionChanged();
            this._updateTextarea();
            return this;
          },
          enterEditing: function(e) {
            if (this.isEditing || !this.editable) {
              return;
            }
            if (this.canvas) {
              this.canvas.calcOffset();
              this.exitEditingOnOthers(this.canvas);
            }
            this.isEditing = true;
            this.initHiddenTextarea(e);
            this.hiddenTextarea.focus();
            this.hiddenTextarea.value = this.text;
            this._updateTextarea();
            this._saveEditingProps();
            this._setEditingProps();
            this._textBeforeEdit = this.text;
            this._tick();
            this.fire("editing:entered");
            this._fireSelectionChanged();
            if (!this.canvas) {
              return this;
            }
            this.canvas.fire("text:editing:entered", { target: this });
            this.initMouseMoveHandler();
            this.canvas.requestRenderAll();
            return this;
          },
          exitEditingOnOthers: function(canvas) {
            if (canvas._iTextInstances) {
              canvas._iTextInstances.forEach(function(obj) {
                obj.selected = false;
                if (obj.isEditing) {
                  obj.exitEditing();
                }
              });
            }
          },
          initMouseMoveHandler: function() {
            this.canvas.on("mouse:move", this.mouseMoveHandler);
          },
          mouseMoveHandler: function(options) {
            if (!this.__isMousedown || !this.isEditing) {
              return;
            }
            var newSelectionStart = this.getSelectionStartFromPointer(options.e), currentStart = this.selectionStart, currentEnd = this.selectionEnd;
            if ((newSelectionStart !== this.__selectionStartOnMouseDown || currentStart === currentEnd) && (currentStart === newSelectionStart || currentEnd === newSelectionStart)) {
              return;
            }
            if (newSelectionStart > this.__selectionStartOnMouseDown) {
              this.selectionStart = this.__selectionStartOnMouseDown;
              this.selectionEnd = newSelectionStart;
            } else {
              this.selectionStart = newSelectionStart;
              this.selectionEnd = this.__selectionStartOnMouseDown;
            }
            if (this.selectionStart !== currentStart || this.selectionEnd !== currentEnd) {
              this.restartCursorIfNeeded();
              this._fireSelectionChanged();
              this._updateTextarea();
              this.renderCursorOrSelection();
            }
          },
          _setEditingProps: function() {
            this.hoverCursor = "text";
            if (this.canvas) {
              this.canvas.defaultCursor = this.canvas.moveCursor = "text";
            }
            this.borderColor = this.editingBorderColor;
            this.hasControls = this.selectable = false;
            this.lockMovementX = this.lockMovementY = true;
          },
          fromStringToGraphemeSelection: function(start, end, text) {
            var smallerTextStart = text.slice(0, start), graphemeStart = fabric4.util.string.graphemeSplit(smallerTextStart).length;
            if (start === end) {
              return { selectionStart: graphemeStart, selectionEnd: graphemeStart };
            }
            var smallerTextEnd = text.slice(start, end), graphemeEnd = fabric4.util.string.graphemeSplit(smallerTextEnd).length;
            return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };
          },
          fromGraphemeToStringSelection: function(start, end, _text) {
            var smallerTextStart = _text.slice(0, start), graphemeStart = smallerTextStart.join("").length;
            if (start === end) {
              return { selectionStart: graphemeStart, selectionEnd: graphemeStart };
            }
            var smallerTextEnd = _text.slice(start, end), graphemeEnd = smallerTextEnd.join("").length;
            return { selectionStart: graphemeStart, selectionEnd: graphemeStart + graphemeEnd };
          },
          _updateTextarea: function() {
            this.cursorOffsetCache = {};
            if (!this.hiddenTextarea) {
              return;
            }
            if (!this.inCompositionMode) {
              var newSelection = this.fromGraphemeToStringSelection(this.selectionStart, this.selectionEnd, this._text);
              this.hiddenTextarea.selectionStart = newSelection.selectionStart;
              this.hiddenTextarea.selectionEnd = newSelection.selectionEnd;
            }
            this.updateTextareaPosition();
          },
          updateFromTextArea: function() {
            if (!this.hiddenTextarea) {
              return;
            }
            this.cursorOffsetCache = {};
            this.text = this.hiddenTextarea.value;
            if (this._shouldClearDimensionCache()) {
              this.initDimensions();
              this.setCoords();
            }
            var newSelection = this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);
            this.selectionEnd = this.selectionStart = newSelection.selectionEnd;
            if (!this.inCompositionMode) {
              this.selectionStart = newSelection.selectionStart;
            }
            this.updateTextareaPosition();
          },
          updateTextareaPosition: function() {
            if (this.selectionStart === this.selectionEnd) {
              var style3 = this._calcTextareaPosition();
              this.hiddenTextarea.style.left = style3.left;
              this.hiddenTextarea.style.top = style3.top;
            }
          },
          _calcTextareaPosition: function() {
            if (!this.canvas) {
              return { x: 1, y: 1 };
            }
            var desiredPosition = this.inCompositionMode ? this.compositionStart : this.selectionStart, boundaries = this._getCursorBoundaries(desiredPosition), cursorLocation = this.get2DCursorLocation(desiredPosition), lineIndex = cursorLocation.lineIndex, charIndex = cursorLocation.charIndex, charHeight = this.getValueOfPropertyAt(lineIndex, charIndex, "fontSize") * this.lineHeight, leftOffset = boundaries.leftOffset, m = this.calcTransformMatrix(), p = {
              x: boundaries.left + leftOffset,
              y: boundaries.top + boundaries.topOffset + charHeight
            }, retinaScaling = this.canvas.getRetinaScaling(), upperCanvas = this.canvas.upperCanvasEl, upperCanvasWidth = upperCanvas.width / retinaScaling, upperCanvasHeight = upperCanvas.height / retinaScaling, maxWidth2 = upperCanvasWidth - charHeight, maxHeight2 = upperCanvasHeight - charHeight, scaleX = upperCanvas.clientWidth / upperCanvasWidth, scaleY = upperCanvas.clientHeight / upperCanvasHeight;
            p = fabric4.util.transformPoint(p, m);
            p = fabric4.util.transformPoint(p, this.canvas.viewportTransform);
            p.x *= scaleX;
            p.y *= scaleY;
            if (p.x < 0) {
              p.x = 0;
            }
            if (p.x > maxWidth2) {
              p.x = maxWidth2;
            }
            if (p.y < 0) {
              p.y = 0;
            }
            if (p.y > maxHeight2) {
              p.y = maxHeight2;
            }
            p.x += this.canvas._offset.left;
            p.y += this.canvas._offset.top;
            return { left: p.x + "px", top: p.y + "px", fontSize: charHeight + "px", charHeight };
          },
          _saveEditingProps: function() {
            this._savedProps = {
              hasControls: this.hasControls,
              borderColor: this.borderColor,
              lockMovementX: this.lockMovementX,
              lockMovementY: this.lockMovementY,
              hoverCursor: this.hoverCursor,
              selectable: this.selectable,
              defaultCursor: this.canvas && this.canvas.defaultCursor,
              moveCursor: this.canvas && this.canvas.moveCursor
            };
          },
          _restoreEditingProps: function() {
            if (!this._savedProps) {
              return;
            }
            this.hoverCursor = this._savedProps.hoverCursor;
            this.hasControls = this._savedProps.hasControls;
            this.borderColor = this._savedProps.borderColor;
            this.selectable = this._savedProps.selectable;
            this.lockMovementX = this._savedProps.lockMovementX;
            this.lockMovementY = this._savedProps.lockMovementY;
            if (this.canvas) {
              this.canvas.defaultCursor = this._savedProps.defaultCursor;
              this.canvas.moveCursor = this._savedProps.moveCursor;
            }
          },
          exitEditing: function() {
            var isTextChanged = this._textBeforeEdit !== this.text;
            var hiddenTextarea = this.hiddenTextarea;
            this.selected = false;
            this.isEditing = false;
            this.selectionEnd = this.selectionStart;
            if (hiddenTextarea) {
              hiddenTextarea.blur && hiddenTextarea.blur();
              hiddenTextarea.parentNode && hiddenTextarea.parentNode.removeChild(hiddenTextarea);
            }
            this.hiddenTextarea = null;
            this.abortCursorAnimation();
            this._restoreEditingProps();
            this._currentCursorOpacity = 0;
            if (this._shouldClearDimensionCache()) {
              this.initDimensions();
              this.setCoords();
            }
            this.fire("editing:exited");
            isTextChanged && this.fire("modified");
            if (this.canvas) {
              this.canvas.off("mouse:move", this.mouseMoveHandler);
              this.canvas.fire("text:editing:exited", { target: this });
              isTextChanged && this.canvas.fire("object:modified", { target: this });
            }
            return this;
          },
          _removeExtraneousStyles: function() {
            for (var prop in this.styles) {
              if (!this._textLines[prop]) {
                delete this.styles[prop];
              }
            }
          },
          removeStyleFromTo: function(start, end) {
            var cursorStart = this.get2DCursorLocation(start, true), cursorEnd = this.get2DCursorLocation(end, true), lineStart = cursorStart.lineIndex, charStart = cursorStart.charIndex, lineEnd = cursorEnd.lineIndex, charEnd = cursorEnd.charIndex, i, styleObj;
            if (lineStart !== lineEnd) {
              if (this.styles[lineStart]) {
                for (i = charStart; i < this._unwrappedTextLines[lineStart].length; i++) {
                  delete this.styles[lineStart][i];
                }
              }
              if (this.styles[lineEnd]) {
                for (i = charEnd; i < this._unwrappedTextLines[lineEnd].length; i++) {
                  styleObj = this.styles[lineEnd][i];
                  if (styleObj) {
                    this.styles[lineStart] || (this.styles[lineStart] = {});
                    this.styles[lineStart][charStart + i - charEnd] = styleObj;
                  }
                }
              }
              for (i = lineStart + 1; i <= lineEnd; i++) {
                delete this.styles[i];
              }
              this.shiftLineStyles(lineEnd, lineStart - lineEnd);
            } else {
              if (this.styles[lineStart]) {
                styleObj = this.styles[lineStart];
                var diff = charEnd - charStart, numericChar, _char;
                for (i = charStart; i < charEnd; i++) {
                  delete styleObj[i];
                }
                for (_char in this.styles[lineStart]) {
                  numericChar = parseInt(_char, 10);
                  if (numericChar >= charEnd) {
                    styleObj[numericChar - diff] = styleObj[_char];
                    delete styleObj[_char];
                  }
                }
              }
            }
          },
          shiftLineStyles: function(lineIndex, offset) {
            var clonedStyles = clone(this.styles);
            for (var line2 in this.styles) {
              var numericLine = parseInt(line2, 10);
              if (numericLine > lineIndex) {
                this.styles[numericLine + offset] = clonedStyles[numericLine];
                if (!clonedStyles[numericLine - offset]) {
                  delete this.styles[numericLine];
                }
              }
            }
          },
          restartCursorIfNeeded: function() {
            if (!this._currentTickState || this._currentTickState.isAborted || !this._currentTickCompleteState || this._currentTickCompleteState.isAborted) {
              this.initDelayedCursor();
            }
          },
          insertNewlineStyleObject: function(lineIndex, charIndex, qty, copiedStyle) {
            var currentCharStyle, newLineStyles = {}, somethingAdded = false, isEndOfLine = this._unwrappedTextLines[lineIndex].length === charIndex;
            qty || (qty = 1);
            this.shiftLineStyles(lineIndex, qty);
            if (this.styles[lineIndex]) {
              currentCharStyle = this.styles[lineIndex][charIndex === 0 ? charIndex : charIndex - 1];
            }
            for (var index in this.styles[lineIndex]) {
              var numIndex = parseInt(index, 10);
              if (numIndex >= charIndex) {
                somethingAdded = true;
                newLineStyles[numIndex - charIndex] = this.styles[lineIndex][index];
                if (!(isEndOfLine && charIndex === 0)) {
                  delete this.styles[lineIndex][index];
                }
              }
            }
            var styleCarriedOver = false;
            if (somethingAdded && !isEndOfLine) {
              this.styles[lineIndex + qty] = newLineStyles;
              styleCarriedOver = true;
            }
            if (styleCarriedOver) {
              qty--;
            }
            while (qty > 0) {
              if (copiedStyle && copiedStyle[qty - 1]) {
                this.styles[lineIndex + qty] = { 0: clone(copiedStyle[qty - 1]) };
              } else if (currentCharStyle) {
                this.styles[lineIndex + qty] = { 0: clone(currentCharStyle) };
              } else {
                delete this.styles[lineIndex + qty];
              }
              qty--;
            }
            this._forceClearCache = true;
          },
          insertCharStyleObject: function(lineIndex, charIndex, quantity, copiedStyle) {
            if (!this.styles) {
              this.styles = {};
            }
            var currentLineStyles = this.styles[lineIndex], currentLineStylesCloned = currentLineStyles ? clone(currentLineStyles) : {};
            quantity || (quantity = 1);
            for (var index in currentLineStylesCloned) {
              var numericIndex = parseInt(index, 10);
              if (numericIndex >= charIndex) {
                currentLineStyles[numericIndex + quantity] = currentLineStylesCloned[numericIndex];
                if (!currentLineStylesCloned[numericIndex - quantity]) {
                  delete currentLineStyles[numericIndex];
                }
              }
            }
            this._forceClearCache = true;
            if (copiedStyle) {
              while (quantity--) {
                if (!Object.keys(copiedStyle[quantity]).length) {
                  continue;
                }
                if (!this.styles[lineIndex]) {
                  this.styles[lineIndex] = {};
                }
                this.styles[lineIndex][charIndex + quantity] = clone(copiedStyle[quantity]);
              }
              return;
            }
            if (!currentLineStyles) {
              return;
            }
            var newStyle = currentLineStyles[charIndex ? charIndex - 1 : 1];
            while (newStyle && quantity--) {
              this.styles[lineIndex][charIndex + quantity] = clone(newStyle);
            }
          },
          insertNewStyleBlock: function(insertedText, start, copiedStyle) {
            var cursorLoc = this.get2DCursorLocation(start, true), addedLines = [0], linesLength = 0;
            for (var i = 0; i < insertedText.length; i++) {
              if (insertedText[i] === "\n") {
                linesLength++;
                addedLines[linesLength] = 0;
              } else {
                addedLines[linesLength]++;
              }
            }
            if (addedLines[0] > 0) {
              this.insertCharStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex, addedLines[0], copiedStyle);
              copiedStyle = copiedStyle && copiedStyle.slice(addedLines[0] + 1);
            }
            linesLength && this.insertNewlineStyleObject(cursorLoc.lineIndex, cursorLoc.charIndex + addedLines[0], linesLength);
            for (var i = 1; i < linesLength; i++) {
              if (addedLines[i] > 0) {
                this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);
              } else if (copiedStyle) {
                this.styles[cursorLoc.lineIndex + i][0] = copiedStyle[0];
              }
              copiedStyle = copiedStyle && copiedStyle.slice(addedLines[i] + 1);
            }
            if (addedLines[i] > 0) {
              this.insertCharStyleObject(cursorLoc.lineIndex + i, 0, addedLines[i], copiedStyle);
            }
          },
          setSelectionStartEndWithShift: function(start, end, newSelection) {
            if (newSelection <= start) {
              if (end === start) {
                this._selectionDirection = "left";
              } else if (this._selectionDirection === "right") {
                this._selectionDirection = "left";
                this.selectionEnd = start;
              }
              this.selectionStart = newSelection;
            } else if (newSelection > start && newSelection < end) {
              if (this._selectionDirection === "right") {
                this.selectionEnd = newSelection;
              } else {
                this.selectionStart = newSelection;
              }
            } else {
              if (end === start) {
                this._selectionDirection = "right";
              } else if (this._selectionDirection === "left") {
                this._selectionDirection = "right";
                this.selectionStart = end;
              }
              this.selectionEnd = newSelection;
            }
          },
          setSelectionInBoundaries: function() {
            var length2 = this.text.length;
            if (this.selectionStart > length2) {
              this.selectionStart = length2;
            } else if (this.selectionStart < 0) {
              this.selectionStart = 0;
            }
            if (this.selectionEnd > length2) {
              this.selectionEnd = length2;
            } else if (this.selectionEnd < 0) {
              this.selectionEnd = 0;
            }
          }
        });
      })();
      fabric4.util.object.extend(fabric4.IText.prototype, {
        initDoubleClickSimulation: function() {
          this.__lastClickTime = +new Date();
          this.__lastLastClickTime = +new Date();
          this.__lastPointer = {};
          this.on("mousedown", this.onMouseDown);
        },
        onMouseDown: function(options) {
          if (!this.canvas) {
            return;
          }
          this.__newClickTime = +new Date();
          var newPointer = options.pointer;
          if (this.isTripleClick(newPointer)) {
            this.fire("tripleclick", options);
            this._stopEvent(options.e);
          }
          this.__lastLastClickTime = this.__lastClickTime;
          this.__lastClickTime = this.__newClickTime;
          this.__lastPointer = newPointer;
          this.__lastIsEditing = this.isEditing;
          this.__lastSelected = this.selected;
        },
        isTripleClick: function(newPointer) {
          return this.__newClickTime - this.__lastClickTime < 500 && this.__lastClickTime - this.__lastLastClickTime < 500 && this.__lastPointer.x === newPointer.x && this.__lastPointer.y === newPointer.y;
        },
        _stopEvent: function(e) {
          e.preventDefault && e.preventDefault();
          e.stopPropagation && e.stopPropagation();
        },
        initCursorSelectionHandlers: function() {
          this.initMousedownHandler();
          this.initMouseupHandler();
          this.initClicks();
        },
        doubleClickHandler: function(options) {
          if (!this.isEditing) {
            return;
          }
          this.selectWord(this.getSelectionStartFromPointer(options.e));
        },
        tripleClickHandler: function(options) {
          if (!this.isEditing) {
            return;
          }
          this.selectLine(this.getSelectionStartFromPointer(options.e));
        },
        initClicks: function() {
          this.on("mousedblclick", this.doubleClickHandler);
          this.on("tripleclick", this.tripleClickHandler);
        },
        _mouseDownHandler: function(options) {
          if (!this.canvas || !this.editable || options.e.button && options.e.button !== 1) {
            return;
          }
          this.__isMousedown = true;
          if (this.selected) {
            this.inCompositionMode = false;
            this.setCursorByClick(options.e);
          }
          if (this.isEditing) {
            this.__selectionStartOnMouseDown = this.selectionStart;
            if (this.selectionStart === this.selectionEnd) {
              this.abortCursorAnimation();
            }
            this.renderCursorOrSelection();
          }
        },
        _mouseDownHandlerBefore: function(options) {
          if (!this.canvas || !this.editable || options.e.button && options.e.button !== 1) {
            return;
          }
          this.selected = this === this.canvas._activeObject;
        },
        initMousedownHandler: function() {
          this.on("mousedown", this._mouseDownHandler);
          this.on("mousedown:before", this._mouseDownHandlerBefore);
        },
        initMouseupHandler: function() {
          this.on("mouseup", this.mouseUpHandler);
        },
        mouseUpHandler: function(options) {
          this.__isMousedown = false;
          if (!this.editable || this.group || options.transform && options.transform.actionPerformed || options.e.button && options.e.button !== 1) {
            return;
          }
          if (this.canvas) {
            var currentActive = this.canvas._activeObject;
            if (currentActive && currentActive !== this) {
              return;
            }
          }
          if (this.__lastSelected && !this.__corner) {
            this.selected = false;
            this.__lastSelected = false;
            this.enterEditing(options.e);
            if (this.selectionStart === this.selectionEnd) {
              this.initDelayedCursor(true);
            } else {
              this.renderCursorOrSelection();
            }
          } else {
            this.selected = true;
          }
        },
        setCursorByClick: function(e) {
          var newSelection = this.getSelectionStartFromPointer(e), start = this.selectionStart, end = this.selectionEnd;
          if (e.shiftKey) {
            this.setSelectionStartEndWithShift(start, end, newSelection);
          } else {
            this.selectionStart = newSelection;
            this.selectionEnd = newSelection;
          }
          if (this.isEditing) {
            this._fireSelectionChanged();
            this._updateTextarea();
          }
        },
        getSelectionStartFromPointer: function(e) {
          var mouseOffset = this.getLocalPointer(e), prevWidth = 0, width2 = 0, height2 = 0, charIndex = 0, lineIndex = 0, lineLeftOffset, line2;
          for (var i = 0, len = this._textLines.length; i < len; i++) {
            if (height2 <= mouseOffset.y) {
              height2 += this.getHeightOfLine(i) * this.scaleY;
              lineIndex = i;
              if (i > 0) {
                charIndex += this._textLines[i - 1].length + this.missingNewlineOffset(i - 1);
              }
            } else {
              break;
            }
          }
          lineLeftOffset = this._getLineLeftOffset(lineIndex);
          width2 = lineLeftOffset * this.scaleX;
          line2 = this._textLines[lineIndex];
          if (this.direction === "rtl") {
            mouseOffset.x = this.width * this.scaleX - mouseOffset.x + width2;
          }
          for (var j = 0, jlen = line2.length; j < jlen; j++) {
            prevWidth = width2;
            width2 += this.__charBounds[lineIndex][j].kernedWidth * this.scaleX;
            if (width2 <= mouseOffset.x) {
              charIndex++;
            } else {
              break;
            }
          }
          return this._getNewSelectionStartFromOffset(mouseOffset, prevWidth, width2, charIndex, jlen);
        },
        _getNewSelectionStartFromOffset: function(mouseOffset, prevWidth, width2, index, jlen) {
          var distanceBtwLastCharAndCursor = mouseOffset.x - prevWidth, distanceBtwNextCharAndCursor = width2 - mouseOffset.x, offset = distanceBtwNextCharAndCursor > distanceBtwLastCharAndCursor || distanceBtwNextCharAndCursor < 0 ? 0 : 1, newSelectionStart = index + offset;
          if (this.flipX) {
            newSelectionStart = jlen - newSelectionStart;
          }
          if (newSelectionStart > this._text.length) {
            newSelectionStart = this._text.length;
          }
          return newSelectionStart;
        }
      });
      fabric4.util.object.extend(fabric4.IText.prototype, {
        initHiddenTextarea: function() {
          this.hiddenTextarea = fabric4.document.createElement("textarea");
          this.hiddenTextarea.setAttribute("autocapitalize", "off");
          this.hiddenTextarea.setAttribute("autocorrect", "off");
          this.hiddenTextarea.setAttribute("autocomplete", "off");
          this.hiddenTextarea.setAttribute("spellcheck", "false");
          this.hiddenTextarea.setAttribute("data-fabric-hiddentextarea", "");
          this.hiddenTextarea.setAttribute("wrap", "off");
          var style3 = this._calcTextareaPosition();
          this.hiddenTextarea.style.cssText = "position: absolute; top: " + style3.top + "; left: " + style3.left + "; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; padding\uFF70top: " + style3.fontSize + ";";
          if (this.hiddenTextareaContainer) {
            this.hiddenTextareaContainer.appendChild(this.hiddenTextarea);
          } else {
            fabric4.document.body.appendChild(this.hiddenTextarea);
          }
          fabric4.util.addListener(this.hiddenTextarea, "keydown", this.onKeyDown.bind(this));
          fabric4.util.addListener(this.hiddenTextarea, "keyup", this.onKeyUp.bind(this));
          fabric4.util.addListener(this.hiddenTextarea, "input", this.onInput.bind(this));
          fabric4.util.addListener(this.hiddenTextarea, "copy", this.copy.bind(this));
          fabric4.util.addListener(this.hiddenTextarea, "cut", this.copy.bind(this));
          fabric4.util.addListener(this.hiddenTextarea, "paste", this.paste.bind(this));
          fabric4.util.addListener(this.hiddenTextarea, "compositionstart", this.onCompositionStart.bind(this));
          fabric4.util.addListener(this.hiddenTextarea, "compositionupdate", this.onCompositionUpdate.bind(this));
          fabric4.util.addListener(this.hiddenTextarea, "compositionend", this.onCompositionEnd.bind(this));
          if (!this._clickHandlerInitialized && this.canvas) {
            fabric4.util.addListener(this.canvas.upperCanvasEl, "click", this.onClick.bind(this));
            this._clickHandlerInitialized = true;
          }
        },
        keysMap: {
          9: "exitEditing",
          27: "exitEditing",
          33: "moveCursorUp",
          34: "moveCursorDown",
          35: "moveCursorRight",
          36: "moveCursorLeft",
          37: "moveCursorLeft",
          38: "moveCursorUp",
          39: "moveCursorRight",
          40: "moveCursorDown"
        },
        keysMapRtl: {
          9: "exitEditing",
          27: "exitEditing",
          33: "moveCursorUp",
          34: "moveCursorDown",
          35: "moveCursorLeft",
          36: "moveCursorRight",
          37: "moveCursorRight",
          38: "moveCursorUp",
          39: "moveCursorLeft",
          40: "moveCursorDown"
        },
        ctrlKeysMapUp: {
          67: "copy",
          88: "cut"
        },
        ctrlKeysMapDown: {
          65: "selectAll"
        },
        onClick: function() {
          this.hiddenTextarea && this.hiddenTextarea.focus();
        },
        onKeyDown: function(e) {
          if (!this.isEditing) {
            return;
          }
          var keyMap = this.direction === "rtl" ? this.keysMapRtl : this.keysMap;
          if (e.keyCode in keyMap) {
            this[keyMap[e.keyCode]](e);
          } else if (e.keyCode in this.ctrlKeysMapDown && (e.ctrlKey || e.metaKey)) {
            this[this.ctrlKeysMapDown[e.keyCode]](e);
          } else {
            return;
          }
          e.stopImmediatePropagation();
          e.preventDefault();
          if (e.keyCode >= 33 && e.keyCode <= 40) {
            this.inCompositionMode = false;
            this.clearContextTop();
            this.renderCursorOrSelection();
          } else {
            this.canvas && this.canvas.requestRenderAll();
          }
        },
        onKeyUp: function(e) {
          if (!this.isEditing || this._copyDone || this.inCompositionMode) {
            this._copyDone = false;
            return;
          }
          if (e.keyCode in this.ctrlKeysMapUp && (e.ctrlKey || e.metaKey)) {
            this[this.ctrlKeysMapUp[e.keyCode]](e);
          } else {
            return;
          }
          e.stopImmediatePropagation();
          e.preventDefault();
          this.canvas && this.canvas.requestRenderAll();
        },
        onInput: function(e) {
          var fromPaste = this.fromPaste;
          this.fromPaste = false;
          e && e.stopPropagation();
          if (!this.isEditing) {
            return;
          }
          var nextText = this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText, charCount = this._text.length, nextCharCount = nextText.length, removedText, insertedText, charDiff = nextCharCount - charCount, selectionStart = this.selectionStart, selectionEnd = this.selectionEnd, selection = selectionStart !== selectionEnd, copiedStyle, removeFrom, removeTo;
          if (this.hiddenTextarea.value === "") {
            this.styles = {};
            this.updateFromTextArea();
            this.fire("changed");
            if (this.canvas) {
              this.canvas.fire("text:changed", { target: this });
              this.canvas.requestRenderAll();
            }
            return;
          }
          var textareaSelection = this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart, this.hiddenTextarea.selectionEnd, this.hiddenTextarea.value);
          var backDelete = selectionStart > textareaSelection.selectionStart;
          if (selection) {
            removedText = this._text.slice(selectionStart, selectionEnd);
            charDiff += selectionEnd - selectionStart;
          } else if (nextCharCount < charCount) {
            if (backDelete) {
              removedText = this._text.slice(selectionEnd + charDiff, selectionEnd);
            } else {
              removedText = this._text.slice(selectionStart, selectionStart - charDiff);
            }
          }
          insertedText = nextText.slice(textareaSelection.selectionEnd - charDiff, textareaSelection.selectionEnd);
          if (removedText && removedText.length) {
            if (insertedText.length) {
              copiedStyle = this.getSelectionStyles(selectionStart, selectionStart + 1, false);
              copiedStyle = insertedText.map(function() {
                return copiedStyle[0];
              });
            }
            if (selection) {
              removeFrom = selectionStart;
              removeTo = selectionEnd;
            } else if (backDelete) {
              removeFrom = selectionEnd - removedText.length;
              removeTo = selectionEnd;
            } else {
              removeFrom = selectionEnd;
              removeTo = selectionEnd + removedText.length;
            }
            this.removeStyleFromTo(removeFrom, removeTo);
          }
          if (insertedText.length) {
            if (fromPaste && insertedText.join("") === fabric4.copiedText && !fabric4.disableStyleCopyPaste) {
              copiedStyle = fabric4.copiedTextStyle;
            }
            this.insertNewStyleBlock(insertedText, selectionStart, copiedStyle);
          }
          this.updateFromTextArea();
          this.fire("changed");
          if (this.canvas) {
            this.canvas.fire("text:changed", { target: this });
            this.canvas.requestRenderAll();
          }
        },
        onCompositionStart: function() {
          this.inCompositionMode = true;
        },
        onCompositionEnd: function() {
          this.inCompositionMode = false;
        },
        onCompositionUpdate: function(e) {
          this.compositionStart = e.target.selectionStart;
          this.compositionEnd = e.target.selectionEnd;
          this.updateTextareaPosition();
        },
        copy: function() {
          if (this.selectionStart === this.selectionEnd) {
            return;
          }
          fabric4.copiedText = this.getSelectedText();
          if (!fabric4.disableStyleCopyPaste) {
            fabric4.copiedTextStyle = this.getSelectionStyles(this.selectionStart, this.selectionEnd, true);
          } else {
            fabric4.copiedTextStyle = null;
          }
          this._copyDone = true;
        },
        paste: function() {
          this.fromPaste = true;
        },
        _getClipboardData: function(e) {
          return e && e.clipboardData || fabric4.window.clipboardData;
        },
        _getWidthBeforeCursor: function(lineIndex, charIndex) {
          var widthBeforeCursor = this._getLineLeftOffset(lineIndex), bound;
          if (charIndex > 0) {
            bound = this.__charBounds[lineIndex][charIndex - 1];
            widthBeforeCursor += bound.left + bound.width;
          }
          return widthBeforeCursor;
        },
        getDownCursorOffset: function(e, isRight) {
          var selectionProp = this._getSelectionForOffset(e, isRight), cursorLocation = this.get2DCursorLocation(selectionProp), lineIndex = cursorLocation.lineIndex;
          if (lineIndex === this._textLines.length - 1 || e.metaKey || e.keyCode === 34) {
            return this._text.length - selectionProp;
          }
          var charIndex = cursorLocation.charIndex, widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex), indexOnOtherLine = this._getIndexOnLine(lineIndex + 1, widthBeforeCursor), textAfterCursor = this._textLines[lineIndex].slice(charIndex);
          return textAfterCursor.length + indexOnOtherLine + 1 + this.missingNewlineOffset(lineIndex);
        },
        _getSelectionForOffset: function(e, isRight) {
          if (e.shiftKey && this.selectionStart !== this.selectionEnd && isRight) {
            return this.selectionEnd;
          } else {
            return this.selectionStart;
          }
        },
        getUpCursorOffset: function(e, isRight) {
          var selectionProp = this._getSelectionForOffset(e, isRight), cursorLocation = this.get2DCursorLocation(selectionProp), lineIndex = cursorLocation.lineIndex;
          if (lineIndex === 0 || e.metaKey || e.keyCode === 33) {
            return -selectionProp;
          }
          var charIndex = cursorLocation.charIndex, widthBeforeCursor = this._getWidthBeforeCursor(lineIndex, charIndex), indexOnOtherLine = this._getIndexOnLine(lineIndex - 1, widthBeforeCursor), textBeforeCursor = this._textLines[lineIndex].slice(0, charIndex), missingNewlineOffset = this.missingNewlineOffset(lineIndex - 1);
          return -this._textLines[lineIndex - 1].length + indexOnOtherLine - textBeforeCursor.length + (1 - missingNewlineOffset);
        },
        _getIndexOnLine: function(lineIndex, width2) {
          var line2 = this._textLines[lineIndex], lineLeftOffset = this._getLineLeftOffset(lineIndex), widthOfCharsOnLine = lineLeftOffset, indexOnLine = 0, charWidth, foundMatch;
          for (var j = 0, jlen = line2.length; j < jlen; j++) {
            charWidth = this.__charBounds[lineIndex][j].width;
            widthOfCharsOnLine += charWidth;
            if (widthOfCharsOnLine > width2) {
              foundMatch = true;
              var leftEdge = widthOfCharsOnLine - charWidth, rightEdge = widthOfCharsOnLine, offsetFromLeftEdge = Math.abs(leftEdge - width2), offsetFromRightEdge = Math.abs(rightEdge - width2);
              indexOnLine = offsetFromRightEdge < offsetFromLeftEdge ? j : j - 1;
              break;
            }
          }
          if (!foundMatch) {
            indexOnLine = line2.length - 1;
          }
          return indexOnLine;
        },
        moveCursorDown: function(e) {
          if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
            return;
          }
          this._moveCursorUpOrDown("Down", e);
        },
        moveCursorUp: function(e) {
          if (this.selectionStart === 0 && this.selectionEnd === 0) {
            return;
          }
          this._moveCursorUpOrDown("Up", e);
        },
        _moveCursorUpOrDown: function(direction, e) {
          var action = "get" + direction + "CursorOffset", offset = this[action](e, this._selectionDirection === "right");
          if (e.shiftKey) {
            this.moveCursorWithShift(offset);
          } else {
            this.moveCursorWithoutShift(offset);
          }
          if (offset !== 0) {
            this.setSelectionInBoundaries();
            this.abortCursorAnimation();
            this._currentCursorOpacity = 1;
            this.initDelayedCursor();
            this._fireSelectionChanged();
            this._updateTextarea();
          }
        },
        moveCursorWithShift: function(offset) {
          var newSelection = this._selectionDirection === "left" ? this.selectionStart + offset : this.selectionEnd + offset;
          this.setSelectionStartEndWithShift(this.selectionStart, this.selectionEnd, newSelection);
          return offset !== 0;
        },
        moveCursorWithoutShift: function(offset) {
          if (offset < 0) {
            this.selectionStart += offset;
            this.selectionEnd = this.selectionStart;
          } else {
            this.selectionEnd += offset;
            this.selectionStart = this.selectionEnd;
          }
          return offset !== 0;
        },
        moveCursorLeft: function(e) {
          if (this.selectionStart === 0 && this.selectionEnd === 0) {
            return;
          }
          this._moveCursorLeftOrRight("Left", e);
        },
        _move: function(e, prop, direction) {
          var newValue;
          if (e.altKey) {
            newValue = this["findWordBoundary" + direction](this[prop]);
          } else if (e.metaKey || e.keyCode === 35 || e.keyCode === 36) {
            newValue = this["findLineBoundary" + direction](this[prop]);
          } else {
            this[prop] += direction === "Left" ? -1 : 1;
            return true;
          }
          if (typeof newValue !== void 0 && this[prop] !== newValue) {
            this[prop] = newValue;
            return true;
          }
        },
        _moveLeft: function(e, prop) {
          return this._move(e, prop, "Left");
        },
        _moveRight: function(e, prop) {
          return this._move(e, prop, "Right");
        },
        moveCursorLeftWithoutShift: function(e) {
          var change = true;
          this._selectionDirection = "left";
          if (this.selectionEnd === this.selectionStart && this.selectionStart !== 0) {
            change = this._moveLeft(e, "selectionStart");
          }
          this.selectionEnd = this.selectionStart;
          return change;
        },
        moveCursorLeftWithShift: function(e) {
          if (this._selectionDirection === "right" && this.selectionStart !== this.selectionEnd) {
            return this._moveLeft(e, "selectionEnd");
          } else if (this.selectionStart !== 0) {
            this._selectionDirection = "left";
            return this._moveLeft(e, "selectionStart");
          }
        },
        moveCursorRight: function(e) {
          if (this.selectionStart >= this._text.length && this.selectionEnd >= this._text.length) {
            return;
          }
          this._moveCursorLeftOrRight("Right", e);
        },
        _moveCursorLeftOrRight: function(direction, e) {
          var actionName = "moveCursor" + direction + "With";
          this._currentCursorOpacity = 1;
          if (e.shiftKey) {
            actionName += "Shift";
          } else {
            actionName += "outShift";
          }
          if (this[actionName](e)) {
            this.abortCursorAnimation();
            this.initDelayedCursor();
            this._fireSelectionChanged();
            this._updateTextarea();
          }
        },
        moveCursorRightWithShift: function(e) {
          if (this._selectionDirection === "left" && this.selectionStart !== this.selectionEnd) {
            return this._moveRight(e, "selectionStart");
          } else if (this.selectionEnd !== this._text.length) {
            this._selectionDirection = "right";
            return this._moveRight(e, "selectionEnd");
          }
        },
        moveCursorRightWithoutShift: function(e) {
          var changed = true;
          this._selectionDirection = "right";
          if (this.selectionStart === this.selectionEnd) {
            changed = this._moveRight(e, "selectionStart");
            this.selectionEnd = this.selectionStart;
          } else {
            this.selectionStart = this.selectionEnd;
          }
          return changed;
        },
        removeChars: function(start, end) {
          if (typeof end === "undefined") {
            end = start + 1;
          }
          this.removeStyleFromTo(start, end);
          this._text.splice(start, end - start);
          this.text = this._text.join("");
          this.set("dirty", true);
          if (this._shouldClearDimensionCache()) {
            this.initDimensions();
            this.setCoords();
          }
          this._removeExtraneousStyles();
        },
        insertChars: function(text, style3, start, end) {
          if (typeof end === "undefined") {
            end = start;
          }
          if (end > start) {
            this.removeStyleFromTo(start, end);
          }
          var graphemes = fabric4.util.string.graphemeSplit(text);
          this.insertNewStyleBlock(graphemes, start, style3);
          this._text = [].concat(this._text.slice(0, start), graphemes, this._text.slice(end));
          this.text = this._text.join("");
          this.set("dirty", true);
          if (this._shouldClearDimensionCache()) {
            this.initDimensions();
            this.setCoords();
          }
          this._removeExtraneousStyles();
        }
      });
      (function() {
        var toFixed = fabric4.util.toFixed, multipleSpacesRegex = /  +/g;
        fabric4.util.object.extend(fabric4.Text.prototype, {
          _toSVG: function() {
            var offsets = this._getSVGLeftTopOffsets(), textAndBg = this._getSVGTextAndBg(offsets.textTop, offsets.textLeft);
            return this._wrapSVGTextAndBg(textAndBg);
          },
          toSVG: function(reviver) {
            return this._createBaseSVGMarkup(this._toSVG(), { reviver, noStyle: true, withShadow: true });
          },
          _getSVGLeftTopOffsets: function() {
            return {
              textLeft: -this.width / 2,
              textTop: -this.height / 2,
              lineTop: this.getHeightOfLine(0)
            };
          },
          _wrapSVGTextAndBg: function(textAndBg) {
            var noShadow = true, textDecoration = this.getSvgTextDecoration(this);
            return [
              textAndBg.textBgRects.join(""),
              '		<text xml:space="preserve" ',
              this.fontFamily ? 'font-family="' + this.fontFamily.replace(/"/g, "'") + '" ' : "",
              this.fontSize ? 'font-size="' + this.fontSize + '" ' : "",
              this.fontStyle ? 'font-style="' + this.fontStyle + '" ' : "",
              this.fontWeight ? 'font-weight="' + this.fontWeight + '" ' : "",
              textDecoration ? 'text-decoration="' + textDecoration + '" ' : "",
              'style="',
              this.getSvgStyles(noShadow),
              '"',
              this.addPaintOrder(),
              " >",
              textAndBg.textSpans.join(""),
              "</text>\n"
            ];
          },
          _getSVGTextAndBg: function(textTopOffset, textLeftOffset) {
            var textSpans = [], textBgRects = [], height2 = textTopOffset, lineOffset;
            this._setSVGBg(textBgRects);
            for (var i = 0, len = this._textLines.length; i < len; i++) {
              lineOffset = this._getLineLeftOffset(i);
              if (this.textBackgroundColor || this.styleHas("textBackgroundColor", i)) {
                this._setSVGTextLineBg(textBgRects, i, textLeftOffset + lineOffset, height2);
              }
              this._setSVGTextLineText(textSpans, i, textLeftOffset + lineOffset, height2);
              height2 += this.getHeightOfLine(i);
            }
            return {
              textSpans,
              textBgRects
            };
          },
          _createTextCharSpan: function(_char, styleDecl, left2, top2) {
            var shouldUseWhitespace = _char !== _char.trim() || _char.match(multipleSpacesRegex), styleProps = this.getSvgSpanStyles(styleDecl, shouldUseWhitespace), fillStyles = styleProps ? 'style="' + styleProps + '"' : "", dy = styleDecl.deltaY, dySpan = "", NUM_FRACTION_DIGITS = fabric4.Object.NUM_FRACTION_DIGITS;
            if (dy) {
              dySpan = ' dy="' + toFixed(dy, NUM_FRACTION_DIGITS) + '" ';
            }
            return [
              '<tspan x="',
              toFixed(left2, NUM_FRACTION_DIGITS),
              '" y="',
              toFixed(top2, NUM_FRACTION_DIGITS),
              '" ',
              dySpan,
              fillStyles,
              ">",
              fabric4.util.string.escapeXml(_char),
              "</tspan>"
            ].join("");
          },
          _setSVGTextLineText: function(textSpans, lineIndex, textLeftOffset, textTopOffset) {
            var lineHeight2 = this.getHeightOfLine(lineIndex), isJustify = this.textAlign.indexOf("justify") !== -1, actualStyle, nextStyle, charsToRender = "", charBox, style3, boxWidth = 0, line2 = this._textLines[lineIndex], timeToRender;
            textTopOffset += lineHeight2 * (1 - this._fontSizeFraction) / this.lineHeight;
            for (var i = 0, len = line2.length - 1; i <= len; i++) {
              timeToRender = i === len || this.charSpacing;
              charsToRender += line2[i];
              charBox = this.__charBounds[lineIndex][i];
              if (boxWidth === 0) {
                textLeftOffset += charBox.kernedWidth - charBox.width;
                boxWidth += charBox.width;
              } else {
                boxWidth += charBox.kernedWidth;
              }
              if (isJustify && !timeToRender) {
                if (this._reSpaceAndTab.test(line2[i])) {
                  timeToRender = true;
                }
              }
              if (!timeToRender) {
                actualStyle = actualStyle || this.getCompleteStyleDeclaration(lineIndex, i);
                nextStyle = this.getCompleteStyleDeclaration(lineIndex, i + 1);
                timeToRender = this._hasStyleChangedForSvg(actualStyle, nextStyle);
              }
              if (timeToRender) {
                style3 = this._getStyleDeclaration(lineIndex, i) || {};
                textSpans.push(this._createTextCharSpan(charsToRender, style3, textLeftOffset, textTopOffset));
                charsToRender = "";
                actualStyle = nextStyle;
                textLeftOffset += boxWidth;
                boxWidth = 0;
              }
            }
          },
          _pushTextBgRect: function(textBgRects, color2, left2, top2, width2, height2) {
            var NUM_FRACTION_DIGITS = fabric4.Object.NUM_FRACTION_DIGITS;
            textBgRects.push("		<rect ", this._getFillAttributes(color2), ' x="', toFixed(left2, NUM_FRACTION_DIGITS), '" y="', toFixed(top2, NUM_FRACTION_DIGITS), '" width="', toFixed(width2, NUM_FRACTION_DIGITS), '" height="', toFixed(height2, NUM_FRACTION_DIGITS), '"></rect>\n');
          },
          _setSVGTextLineBg: function(textBgRects, i, leftOffset, textTopOffset) {
            var line2 = this._textLines[i], heightOfLine = this.getHeightOfLine(i) / this.lineHeight, boxWidth = 0, boxStart = 0, charBox, currentColor, lastColor = this.getValueOfPropertyAt(i, 0, "textBackgroundColor");
            for (var j = 0, jlen = line2.length; j < jlen; j++) {
              charBox = this.__charBounds[i][j];
              currentColor = this.getValueOfPropertyAt(i, j, "textBackgroundColor");
              if (currentColor !== lastColor) {
                lastColor && this._pushTextBgRect(textBgRects, lastColor, leftOffset + boxStart, textTopOffset, boxWidth, heightOfLine);
                boxStart = charBox.left;
                boxWidth = charBox.width;
                lastColor = currentColor;
              } else {
                boxWidth += charBox.kernedWidth;
              }
            }
            currentColor && this._pushTextBgRect(textBgRects, currentColor, leftOffset + boxStart, textTopOffset, boxWidth, heightOfLine);
          },
          _getFillAttributes: function(value) {
            var fillColor = value && typeof value === "string" ? new fabric4.Color(value) : "";
            if (!fillColor || !fillColor.getSource() || fillColor.getAlpha() === 1) {
              return 'fill="' + value + '"';
            }
            return 'opacity="' + fillColor.getAlpha() + '" fill="' + fillColor.setAlpha(1).toRgb() + '"';
          },
          _getSVGLineTopOffset: function(lineIndex) {
            var lineTopOffset = 0, lastHeight = 0;
            for (var j = 0; j < lineIndex; j++) {
              lineTopOffset += this.getHeightOfLine(j);
            }
            lastHeight = this.getHeightOfLine(j);
            return {
              lineTop: lineTopOffset,
              offset: (this._fontSizeMult - this._fontSizeFraction) * lastHeight / (this.lineHeight * this._fontSizeMult)
            };
          },
          getSvgStyles: function(skipShadow) {
            var svgStyle = fabric4.Object.prototype.getSvgStyles.call(this, skipShadow);
            return svgStyle + " white-space: pre;";
          }
        });
      })();
      (function(global2) {
        "use strict";
        var fabric5 = global2.fabric || (global2.fabric = {});
        fabric5.Textbox = fabric5.util.createClass(fabric5.IText, fabric5.Observable, {
          type: "textbox",
          minWidth: 20,
          dynamicMinWidth: 2,
          __cachedLines: null,
          lockScalingFlip: true,
          noScaleCache: false,
          _dimensionAffectingProps: fabric5.Text.prototype._dimensionAffectingProps.concat("width"),
          _wordJoiners: /[ \t\r]/,
          splitByGrapheme: false,
          initDimensions: function() {
            if (this.__skipDimension) {
              return;
            }
            this.isEditing && this.initDelayedCursor();
            this.clearContextTop();
            this._clearCache();
            this.dynamicMinWidth = 0;
            this._styleMap = this._generateStyleMap(this._splitText());
            if (this.dynamicMinWidth > this.width) {
              this._set("width", this.dynamicMinWidth);
            }
            if (this.textAlign.indexOf("justify") !== -1) {
              this.enlargeSpaces();
            }
            this.height = this.calcTextHeight();
            this.saveState({ propertySet: "_dimensionAffectingProps" });
          },
          _generateStyleMap: function(textInfo) {
            var realLineCount = 0, realLineCharCount = 0, charCount = 0, map = {};
            for (var i = 0; i < textInfo.graphemeLines.length; i++) {
              if (textInfo.graphemeText[charCount] === "\n" && i > 0) {
                realLineCharCount = 0;
                charCount++;
                realLineCount++;
              } else if (!this.splitByGrapheme && this._reSpaceAndTab.test(textInfo.graphemeText[charCount]) && i > 0) {
                realLineCharCount++;
                charCount++;
              }
              map[i] = { line: realLineCount, offset: realLineCharCount };
              charCount += textInfo.graphemeLines[i].length;
              realLineCharCount += textInfo.graphemeLines[i].length;
            }
            return map;
          },
          styleHas: function(property, lineIndex) {
            if (this._styleMap && !this.isWrapping) {
              var map = this._styleMap[lineIndex];
              if (map) {
                lineIndex = map.line;
              }
            }
            return fabric5.Text.prototype.styleHas.call(this, property, lineIndex);
          },
          isEmptyStyles: function(lineIndex) {
            if (!this.styles) {
              return true;
            }
            var offset = 0, nextLineIndex = lineIndex + 1, nextOffset, obj, shouldLimit = false, map = this._styleMap[lineIndex], mapNextLine = this._styleMap[lineIndex + 1];
            if (map) {
              lineIndex = map.line;
              offset = map.offset;
            }
            if (mapNextLine) {
              nextLineIndex = mapNextLine.line;
              shouldLimit = nextLineIndex === lineIndex;
              nextOffset = mapNextLine.offset;
            }
            obj = typeof lineIndex === "undefined" ? this.styles : { line: this.styles[lineIndex] };
            for (var p1 in obj) {
              for (var p2 in obj[p1]) {
                if (p2 >= offset && (!shouldLimit || p2 < nextOffset)) {
                  for (var p3 in obj[p1][p2]) {
                    return false;
                  }
                }
              }
            }
            return true;
          },
          _getStyleDeclaration: function(lineIndex, charIndex) {
            if (this._styleMap && !this.isWrapping) {
              var map = this._styleMap[lineIndex];
              if (!map) {
                return null;
              }
              lineIndex = map.line;
              charIndex = map.offset + charIndex;
            }
            return this.callSuper("_getStyleDeclaration", lineIndex, charIndex);
          },
          _setStyleDeclaration: function(lineIndex, charIndex, style3) {
            var map = this._styleMap[lineIndex];
            lineIndex = map.line;
            charIndex = map.offset + charIndex;
            this.styles[lineIndex][charIndex] = style3;
          },
          _deleteStyleDeclaration: function(lineIndex, charIndex) {
            var map = this._styleMap[lineIndex];
            lineIndex = map.line;
            charIndex = map.offset + charIndex;
            delete this.styles[lineIndex][charIndex];
          },
          _getLineStyle: function(lineIndex) {
            var map = this._styleMap[lineIndex];
            return !!this.styles[map.line];
          },
          _setLineStyle: function(lineIndex) {
            var map = this._styleMap[lineIndex];
            this.styles[map.line] = {};
          },
          _wrapText: function(lines, desiredWidth) {
            var wrapped = [], i;
            this.isWrapping = true;
            for (i = 0; i < lines.length; i++) {
              wrapped = wrapped.concat(this._wrapLine(lines[i], i, desiredWidth));
            }
            this.isWrapping = false;
            return wrapped;
          },
          _measureWord: function(word, lineIndex, charOffset) {
            var width2 = 0, prevGrapheme, skipLeft = true;
            charOffset = charOffset || 0;
            for (var i = 0, len = word.length; i < len; i++) {
              var box = this._getGraphemeBox(word[i], lineIndex, i + charOffset, prevGrapheme, skipLeft);
              width2 += box.kernedWidth;
              prevGrapheme = word[i];
            }
            return width2;
          },
          _wrapLine: function(_line, lineIndex, desiredWidth, reservedSpace) {
            var lineWidth = 0, splitByGrapheme = this.splitByGrapheme, graphemeLines = [], line2 = [], words = splitByGrapheme ? fabric5.util.string.graphemeSplit(_line) : _line.split(this._wordJoiners), word = "", offset = 0, infix = splitByGrapheme ? "" : " ", wordWidth = 0, infixWidth = 0, largestWordWidth = 0, lineJustStarted = true, additionalSpace = this._getWidthOfCharSpacing(), reservedSpace = reservedSpace || 0;
            if (words.length === 0) {
              words.push([]);
            }
            desiredWidth -= reservedSpace;
            for (var i = 0; i < words.length; i++) {
              word = splitByGrapheme ? words[i] : fabric5.util.string.graphemeSplit(words[i]);
              wordWidth = this._measureWord(word, lineIndex, offset);
              offset += word.length;
              lineWidth += infixWidth + wordWidth - additionalSpace;
              if (lineWidth > desiredWidth && !lineJustStarted) {
                graphemeLines.push(line2);
                line2 = [];
                lineWidth = wordWidth;
                lineJustStarted = true;
              } else {
                lineWidth += additionalSpace;
              }
              if (!lineJustStarted && !splitByGrapheme) {
                line2.push(infix);
              }
              line2 = line2.concat(word);
              infixWidth = splitByGrapheme ? 0 : this._measureWord([infix], lineIndex, offset);
              offset++;
              lineJustStarted = false;
              if (wordWidth > largestWordWidth) {
                largestWordWidth = wordWidth;
              }
            }
            i && graphemeLines.push(line2);
            if (largestWordWidth + reservedSpace > this.dynamicMinWidth) {
              this.dynamicMinWidth = largestWordWidth - additionalSpace + reservedSpace;
            }
            return graphemeLines;
          },
          isEndOfWrapping: function(lineIndex) {
            if (!this._styleMap[lineIndex + 1]) {
              return true;
            }
            if (this._styleMap[lineIndex + 1].line !== this._styleMap[lineIndex].line) {
              return true;
            }
            return false;
          },
          missingNewlineOffset: function(lineIndex) {
            if (this.splitByGrapheme) {
              return this.isEndOfWrapping(lineIndex) ? 1 : 0;
            }
            return 1;
          },
          _splitTextIntoLines: function(text) {
            var newText = fabric5.Text.prototype._splitTextIntoLines.call(this, text), graphemeLines = this._wrapText(newText.lines, this.width), lines = new Array(graphemeLines.length);
            for (var i = 0; i < graphemeLines.length; i++) {
              lines[i] = graphemeLines[i].join("");
            }
            newText.lines = lines;
            newText.graphemeLines = graphemeLines;
            return newText;
          },
          getMinWidth: function() {
            return Math.max(this.minWidth, this.dynamicMinWidth);
          },
          _removeExtraneousStyles: function() {
            var linesToKeep = {};
            for (var prop in this._styleMap) {
              if (this._textLines[prop]) {
                linesToKeep[this._styleMap[prop].line] = 1;
              }
            }
            for (var prop in this.styles) {
              if (!linesToKeep[prop]) {
                delete this.styles[prop];
              }
            }
          },
          toObject: function(propertiesToInclude) {
            return this.callSuper("toObject", ["minWidth", "splitByGrapheme"].concat(propertiesToInclude));
          }
        });
        fabric5.Textbox.fromObject = function(object, callback) {
          return fabric5.Object._fromObject("Textbox", object, callback, "text");
        };
      })(typeof exports !== "undefined" ? exports : exports);
      (function() {
        var controlsUtils = fabric4.controlsUtils, scaleSkewStyleHandler = controlsUtils.scaleSkewCursorStyleHandler, scaleStyleHandler = controlsUtils.scaleCursorStyleHandler, scalingEqually = controlsUtils.scalingEqually, scalingYOrSkewingX = controlsUtils.scalingYOrSkewingX, scalingXOrSkewingY = controlsUtils.scalingXOrSkewingY, scaleOrSkewActionName = controlsUtils.scaleOrSkewActionName, objectControls = fabric4.Object.prototype.controls;
        objectControls.ml = new fabric4.Control({
          x: -0.5,
          y: 0,
          cursorStyleHandler: scaleSkewStyleHandler,
          actionHandler: scalingXOrSkewingY,
          getActionName: scaleOrSkewActionName
        });
        objectControls.mr = new fabric4.Control({
          x: 0.5,
          y: 0,
          cursorStyleHandler: scaleSkewStyleHandler,
          actionHandler: scalingXOrSkewingY,
          getActionName: scaleOrSkewActionName
        });
        objectControls.mb = new fabric4.Control({
          x: 0,
          y: 0.5,
          cursorStyleHandler: scaleSkewStyleHandler,
          actionHandler: scalingYOrSkewingX,
          getActionName: scaleOrSkewActionName
        });
        objectControls.mt = new fabric4.Control({
          x: 0,
          y: -0.5,
          cursorStyleHandler: scaleSkewStyleHandler,
          actionHandler: scalingYOrSkewingX,
          getActionName: scaleOrSkewActionName
        });
        objectControls.tl = new fabric4.Control({
          x: -0.5,
          y: -0.5,
          cursorStyleHandler: scaleStyleHandler,
          actionHandler: scalingEqually
        });
        objectControls.tr = new fabric4.Control({
          x: 0.5,
          y: -0.5,
          cursorStyleHandler: scaleStyleHandler,
          actionHandler: scalingEqually
        });
        objectControls.bl = new fabric4.Control({
          x: -0.5,
          y: 0.5,
          cursorStyleHandler: scaleStyleHandler,
          actionHandler: scalingEqually
        });
        objectControls.br = new fabric4.Control({
          x: 0.5,
          y: 0.5,
          cursorStyleHandler: scaleStyleHandler,
          actionHandler: scalingEqually
        });
        objectControls.mtr = new fabric4.Control({
          x: 0,
          y: -0.5,
          actionHandler: controlsUtils.rotationWithSnapping,
          cursorStyleHandler: controlsUtils.rotationStyleHandler,
          offsetY: -40,
          withConnection: true,
          actionName: "rotate"
        });
        if (fabric4.Textbox) {
          var textBoxControls = fabric4.Textbox.prototype.controls = {};
          textBoxControls.mtr = objectControls.mtr;
          textBoxControls.tr = objectControls.tr;
          textBoxControls.br = objectControls.br;
          textBoxControls.tl = objectControls.tl;
          textBoxControls.bl = objectControls.bl;
          textBoxControls.mt = objectControls.mt;
          textBoxControls.mb = objectControls.mb;
          textBoxControls.mr = new fabric4.Control({
            x: 0.5,
            y: 0,
            actionHandler: controlsUtils.changeWidth,
            cursorStyleHandler: scaleSkewStyleHandler,
            actionName: "resizing"
          });
          textBoxControls.ml = new fabric4.Control({
            x: -0.5,
            y: 0,
            actionHandler: controlsUtils.changeWidth,
            cursorStyleHandler: scaleSkewStyleHandler,
            actionName: "resizing"
          });
        }
      })();
    }
  });

  // client/src/App.tsx
  var import_react17 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());

  // client/src/views/Home/index.tsx
  var import_react16 = __toESM(require_react());

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate2(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (true) {
        var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
      }
      if (this.isSpeedy) {
        var sheet2 = sheetForTag(tag);
        try {
          sheet2.insertRule(rule, sheet2.cssRules.length);
        } catch (e) {
          if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e);
          }
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush2() {
      this.tags.forEach(function(tag) {
        return tag.parentNode && tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
      if (true) {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();

  // node_modules/stylis/src/Enum.js
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";

  // node_modules/stylis/src/Utility.js
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3);
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index) {
    return value.charCodeAt(index) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }

  // node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index) {
    while (!token(peek()))
      next();
    return slice(index, position);
  }

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index = 0;
    var offset = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && characters2.charCodeAt(length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset:
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference = ruleset(characters2, root, parent, index, offset, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset === 0)
                  parse(characters2, root, reference, reference, props, rulesets, length2, points, children);
                else
                  switch (atrule) {
                    case 100:
                    case 109:
                    case 115:
                      parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index, offset, rules, points, type, props, children, length2) {
    var post = offset - 1;
    var rule = offset === 0 ? rules : [""];
    var size = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }

  // node_modules/stylis/src/Prefixer.js
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index, children, callback) {
    switch (element.type) {
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index, children, callback) || "";
      return output;
    };
  }
  function prefixer(element, index, children, callback) {
    if (element.length > -1) {
      if (!element.return)
        switch (element.type) {
          case DECLARATION:
            element.return = prefix(element.value, element.length);
            break;
          case KEYFRAMES:
            return serialize([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
          case RULESET:
            if (element.length)
              return combine(element.props, function(value) {
                switch (match(value, /(::plac\w+|:read-\w+)/)) {
                  case ":read-only":
                  case ":read-write":
                    return serialize([copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] })], callback);
                  case "::placeholder":
                    return serialize([
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }),
                      copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] })
                    ], callback);
                }
                return "";
              });
        }
    }
  }

  // node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js
  function memoize(fn) {
    var cache2 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache2[arg] === void 0)
        cache2[arg] = fn(arg);
      return cache2[arg];
    };
  }
  var emotion_memoize_browser_esm_default = memoize;

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var last = function last2(arr) {
    return arr.length ? arr[arr.length - 1] : null;
  };
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index] = 1;
      }
      if (token(character2)) {
        break;
      }
      next();
    }
    return slice(begin, position);
  };
  var toRules = function toRules2(parsed, points) {
    var index = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index] = 1;
          }
          parsed[index] += identifierWithPointTracking(position - 1, points, index);
          break;
        case 2:
          parsed[index] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index] = peek() === 58 ? "&\f" : "";
            points[index] = parsed[index].length;
            break;
          }
        default:
          parsed[index] += from(character2);
      }
    } while (character2 = next());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || element.length < 1) {
      return;
    }
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent)
        return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i = 0, k = 0; i < rules.length; i++) {
      for (var j = 0; j < parentRules.length; j++, k++) {
        element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element) {
    return !!element && element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache2) {
    return function(element, index, children) {
      if (element.type !== "rule")
        return;
      var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses && cache2.compat !== true) {
        var prevElement = index > 0 ? children[index - 1] : null;
        if (prevElement && isIgnoringComment(last(prevElement.children))) {
          return;
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index, children) {
    for (var i = index - 1; i >= 0; i--) {
      if (!isImportRule(children[i])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element, index, children) {
    if (!isImportRule(element)) {
      return;
    }
    if (element.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element);
    } else if (isPrependedWithRegularRules(index, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element);
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (!key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node2) {
        var dataEmotionAttribute = node2.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node2);
        node2.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    if (true) {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    {
      container = options.container || document.head;
      Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="' + key + ' "]'), function(node2) {
        var attrib = node2.getAttribute("data-emotion").split(" ");
        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }
        nodesToHydrate.push(node2);
      });
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (true) {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache2.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [stringify, true ? function(element) {
        if (!element.root) {
          if (element["return"]) {
            currentSheet.insert(element["return"]);
          } else if (element.value && element.type !== COMMENT) {
            currentSheet.insert(element.value + "{}");
          }
        }
      } : rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles4) {
        return serialize(compile(styles4), serializer);
      };
      _insert = function insert(selector, serialized, sheet2, shouldCache) {
        currentSheet = sheet2;
        if (serialized.map !== void 0) {
          currentSheet = {
            insert: function insert2(rule) {
              sheet2.insert(rule + serialized.map);
            }
          };
        }
        stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache2.inserted[serialized.name] = true;
        }
      };
    }
    var cache2 = {
      key,
      sheet: new StyleSheet({
        key,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache2.sheet.hydrate(nodesToHydrate);
    return cache2;
  };
  var emotion_cache_browser_esm_default = createCache;

  // node_modules/@emotion/hash/dist/hash.browser.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= k >>> 24;
      h = (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var hash_browser_esm_default = murmur2;

  // node_modules/@emotion/unitless/dist/unitless.browser.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_browser_esm_default = unitlessKeys;

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match2, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitless_browser_esm_default[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  if (true) {
    contentValuePattern = /(attr|counters?|url|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
    contentValues = ["normal", "none", "initial", "inherit", "unset"];
    oldProcessStyleValue = processStyleValue;
    msPattern = /^-ms-/;
    hyphenPattern = /-(.)/g;
    hyphenatedCache = {};
    processStyleValue = function processStyleValue3(key, value) {
      if (key === "content") {
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
          throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
        }
      }
      var processed = oldProcessStyleValue(key, value);
      if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
          return _char.toUpperCase();
        }) + "?");
      }
      return processed;
    };
  }
  var contentValuePattern;
  var contentValues;
  var oldProcessStyleValue;
  var msPattern;
  var hyphenPattern;
  var hyphenatedCache;
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles4 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles4 += interpolation.map;
          }
          return styles4;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
  var sourceMapPattern;
  if (true) {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  }
  var cursor;
  var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles4 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles4 += handleInterpolation(mergedProps, registered, strings);
    } else {
      if (strings[0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles4 += strings[0];
    }
    for (var i = 1; i < args.length; i++) {
      styles4 += handleInterpolation(mergedProps, registered, args[i]);
      if (stringMode) {
        if (strings[i] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles4 += strings[i];
      }
    }
    var sourceMap;
    if (true) {
      styles4 = styles4.replace(sourceMapPattern, function(match3) {
        sourceMap = match3;
        return "";
      });
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match2;
    while ((match2 = labelPattern.exec(styles4)) !== null) {
      identifierName += "-" + match2[1];
    }
    var name = hash_browser_esm_default(styles4) + identifierName;
    if (true) {
      return {
        name,
        styles: styles4,
        map: sourceMap,
        next: cursor,
        toString: function toString() {
          return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
      };
    }
    return {
      name,
      styles: styles4,
      next: cursor
    };
  };

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser = true;
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var insertStyles = function insertStyles2(cache2, serialized, isStringTag) {
    var className = cache2.key + "-" + serialized.name;
    if ((isStringTag === false || isBrowser === false) && cache2.registered[className] === void 0) {
      cache2.registered[className] = serialized.styles;
    }
    if (cache2.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        var maybeStyles = cache2.insert(serialized === current ? "." + className : "", current, cache2.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.esm.js
  function insertWithoutScoping(cache2, serialized) {
    if (cache2.inserted[serialized.name] === void 0) {
      return cache2.insert("", serialized, cache2.sheet, true);
    }
  }
  function merge(registered, css3, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css3(registeredStyles);
  }
  var createEmotion = function createEmotion2(options) {
    var cache2 = emotion_cache_browser_esm_default(options);
    cache2.sheet.speedy = function(value) {
      if (this.ctr !== 0) {
        throw new Error("speedy must be changed before any rules are inserted");
      }
      this.isSpeedy = value;
    };
    cache2.compat = true;
    var css3 = function css4() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache2.registered, void 0);
      insertStyles(cache2, serialized, false);
      return cache2.key + "-" + serialized.name;
    };
    var keyframes3 = function keyframes4() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var serialized = serializeStyles(args, cache2.registered);
      var animation = "animation-" + serialized.name;
      insertWithoutScoping(cache2, {
        name: serialized.name,
        styles: "@keyframes " + animation + "{" + serialized.styles + "}"
      });
      return animation;
    };
    var injectGlobal2 = function injectGlobal3() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      var serialized = serializeStyles(args, cache2.registered);
      insertWithoutScoping(cache2, serialized);
    };
    var cx2 = function cx3() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return merge(cache2.registered, css3, classnames(args));
    };
    return {
      css: css3,
      cx: cx2,
      injectGlobal: injectGlobal2,
      keyframes: keyframes3,
      hydrate: function hydrate2(ids) {
        ids.forEach(function(key) {
          cache2.inserted[key] = true;
        });
      },
      flush: function flush2() {
        cache2.registered = {};
        cache2.inserted = {};
        cache2.sheet.flush();
      },
      sheet: cache2.sheet,
      cache: cache2,
      getRegisteredStyles: getRegisteredStyles.bind(null, cache2.registered),
      merge: merge.bind(null, cache2.registered, css3)
    };
  };
  var classnames = function classnames2(args) {
    var cls = "";
    for (var i = 0; i < args.length; i++) {
      var arg = args[i];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            toAdd = "";
            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += " ");
                toAdd += k;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  var emotion_css_create_instance_esm_default = createEmotion;

  // node_modules/@emotion/css/dist/emotion-css.esm.js
  var _createEmotion = emotion_css_create_instance_esm_default({
    key: "css"
  });
  var flush = _createEmotion.flush;
  var hydrate = _createEmotion.hydrate;
  var cx = _createEmotion.cx;
  var merge2 = _createEmotion.merge;
  var getRegisteredStyles2 = _createEmotion.getRegisteredStyles;
  var injectGlobal = _createEmotion.injectGlobal;
  var keyframes = _createEmotion.keyframes;
  var css = _createEmotion.css;
  var sheet = _createEmotion.sheet;
  var cache = _createEmotion.cache;

  // client/src/components/Explorer/index.tsx
  var import_react14 = __toESM(require_react());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/@mui/material/TextField/TextField.js
  var React46 = __toESM(require_react());
  var import_prop_types36 = __toESM(require_prop_types());

  // node_modules/clsx/dist/clsx.m.js
  function toVal(mix) {
    var k, y, str = "";
    if (typeof mix === "string" || typeof mix === "number") {
      str += mix;
    } else if (typeof mix === "object") {
      if (Array.isArray(mix)) {
        for (k = 0; k < mix.length; k++) {
          if (mix[k]) {
            if (y = toVal(mix[k])) {
              str && (str += " ");
              str += y;
            }
          }
        }
      } else {
        for (k in mix) {
          if (mix[k]) {
            str && (str += " ");
            str += k;
          }
        }
      }
    }
    return str;
  }
  function clsx_m_default() {
    var i = 0, tmp, x, str = "";
    while (i < arguments.length) {
      if (tmp = arguments[i++]) {
        if (x = toVal(tmp)) {
          str && (str += " ");
          str += x;
        }
      }
    }
    return str;
  }

  // node_modules/@mui/base/utils/isHostComponent.js
  function isHostComponent(element) {
    return typeof element === "string";
  }
  var isHostComponent_default = isHostComponent;

  // node_modules/@mui/utils/esm/chainPropTypes.js
  function chainPropTypes(propType1, propType2) {
    if (false) {
      return () => null;
    }
    return function validate(...args) {
      return propType1(...args) || propType2(...args);
    };
  }

  // node_modules/@mui/utils/esm/deepmerge.js
  function isPlainObject(item) {
    return item !== null && typeof item === "object" && item.constructor === Object;
  }
  function deepmerge(target, source, options = {
    clone: true
  }) {
    const output = options.clone ? _extends({}, target) : target;
    if (isPlainObject(target) && isPlainObject(source)) {
      Object.keys(source).forEach((key) => {
        if (key === "__proto__") {
          return;
        }
        if (isPlainObject(source[key]) && key in target && isPlainObject(target[key])) {
          output[key] = deepmerge(target[key], source[key], options);
        } else {
          output[key] = source[key];
        }
      });
    }
    return output;
  }

  // node_modules/@mui/utils/esm/elementAcceptingRef.js
  var import_prop_types = __toESM(require_prop_types());
  function isClassComponent(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function acceptingRef(props, propName, componentName, location, propFullName) {
    const element = props[propName];
    const safePropName = propFullName || propName;
    if (element == null || typeof window === "undefined") {
      return null;
    }
    let warningHint;
    const elementType = element.type;
    if (typeof elementType === "function" && !isClassComponent(elementType)) {
      warningHint = "Did you accidentally use a plain function component for an element instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementAcceptingRef = chainPropTypes(import_prop_types.default.element, acceptingRef);
  elementAcceptingRef.isRequired = chainPropTypes(import_prop_types.default.element.isRequired, acceptingRef);
  var elementAcceptingRef_default = elementAcceptingRef;

  // node_modules/@mui/utils/esm/elementTypeAcceptingRef.js
  var import_prop_types2 = __toESM(require_prop_types());
  function isClassComponent2(elementType) {
    const {
      prototype = {}
    } = elementType;
    return Boolean(prototype.isReactComponent);
  }
  function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null || typeof window === "undefined") {
      return null;
    }
    let warningHint;
    if (typeof propValue === "function" && !isClassComponent2(propValue)) {
      warningHint = "Did you accidentally provide a plain function component instead?";
    }
    if (warningHint !== void 0) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
    }
    return null;
  }
  var elementTypeAcceptingRef_default = chainPropTypes(import_prop_types2.default.elementType, elementTypeAcceptingRef);

  // node_modules/@mui/utils/esm/exactProp.js
  var specialProperty = "exact-prop: \u200B";
  function exactProp(propTypes) {
    if (false) {
      return propTypes;
    }
    return _extends({}, propTypes, {
      [specialProperty]: (props) => {
        const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
        if (unsupportedProps.length > 0) {
          return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
        }
        return null;
      }
    });
  }

  // node_modules/@mui/utils/esm/getDisplayName.js
  var import_react_is = __toESM(require_react_is2());
  var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
  function getFunctionName(fn) {
    const match2 = `${fn}`.match(fnNameMatchRegex);
    const name = match2 && match2[1];
    return name || "";
  }
  function getFunctionComponentName(Component, fallback = "") {
    return Component.displayName || Component.name || getFunctionName(Component) || fallback;
  }
  function getWrappedName(outerType, innerType, wrapperName) {
    const functionName = getFunctionComponentName(innerType);
    return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
  }
  function getDisplayName(Component) {
    if (Component == null) {
      return void 0;
    }
    if (typeof Component === "string") {
      return Component;
    }
    if (typeof Component === "function") {
      return getFunctionComponentName(Component, "Component");
    }
    if (typeof Component === "object") {
      switch (Component.$$typeof) {
        case import_react_is.ForwardRef:
          return getWrappedName(Component, Component.render, "ForwardRef");
        case import_react_is.Memo:
          return getWrappedName(Component, Component.type, "memo");
        default:
          return void 0;
      }
    }
    return void 0;
  }

  // node_modules/@mui/utils/esm/HTMLElementType.js
  function HTMLElementType(props, propName, componentName, location, propFullName) {
    if (false) {
      return null;
    }
    const propValue = props[propName];
    const safePropName = propFullName || propName;
    if (propValue == null) {
      return null;
    }
    if (propValue && propValue.nodeType !== 1) {
      return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
    }
    return null;
  }

  // node_modules/@mui/utils/esm/refType.js
  var import_prop_types3 = __toESM(require_prop_types());
  var refType = import_prop_types3.default.oneOfType([import_prop_types3.default.func, import_prop_types3.default.object]);
  var refType_default = refType;

  // node_modules/@mui/utils/esm/capitalize.js
  function capitalize(string) {
    if (typeof string !== "string") {
      throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : formatMuiErrorMessage(7));
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  }

  // node_modules/@mui/utils/esm/createChainedFunction.js
  function createChainedFunction(...funcs) {
    return funcs.reduce((acc, func) => {
      if (func == null) {
        return acc;
      }
      return function chainedFunction(...args) {
        acc.apply(this, args);
        func.apply(this, args);
      };
    }, () => {
    });
  }

  // node_modules/@mui/utils/esm/debounce.js
  function debounce(func, wait = 166) {
    let timeout2;
    function debounced(...args) {
      const later = () => {
        func.apply(this, args);
      };
      clearTimeout(timeout2);
      timeout2 = setTimeout(later, wait);
    }
    debounced.clear = () => {
      clearTimeout(timeout2);
    };
    return debounced;
  }

  // node_modules/@mui/utils/esm/isMuiElement.js
  var React = __toESM(require_react());
  function isMuiElement(element, muiNames) {
    return /* @__PURE__ */ React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
  }

  // node_modules/@mui/utils/esm/ownerDocument.js
  function ownerDocument(node2) {
    return node2 && node2.ownerDocument || document;
  }

  // node_modules/@mui/utils/esm/ownerWindow.js
  function ownerWindow(node2) {
    const doc = ownerDocument(node2);
    return doc.defaultView || window;
  }

  // node_modules/@mui/utils/esm/setRef.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }

  // node_modules/@mui/utils/esm/useEnhancedEffect.js
  var React2 = __toESM(require_react());
  var useEnhancedEffect = typeof window !== "undefined" ? React2.useLayoutEffect : React2.useEffect;
  var useEnhancedEffect_default = useEnhancedEffect;

  // node_modules/@mui/utils/esm/useId.js
  var React3 = __toESM(require_react());
  var globalId = 0;
  function useId(idOverride) {
    const [defaultId, setDefaultId] = React3.useState(idOverride);
    const id = idOverride || defaultId;
    React3.useEffect(() => {
      if (defaultId == null) {
        globalId += 1;
        setDefaultId(`mui-${globalId}`);
      }
    }, [defaultId]);
    return id;
  }

  // node_modules/@mui/utils/esm/useControlled.js
  var React4 = __toESM(require_react());
  function useControlled({
    controlled,
    default: defaultProp,
    name,
    state = "value"
  }) {
    const {
      current: isControlled
    } = React4.useRef(controlled !== void 0);
    const [valueState, setValue] = React4.useState(defaultProp);
    const value = isControlled ? controlled : valueState;
    if (true) {
      React4.useEffect(() => {
        if (isControlled !== (controlled !== void 0)) {
          console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
        }
      }, [state, name, controlled]);
      const {
        current: defaultValue
      } = React4.useRef(defaultProp);
      React4.useEffect(() => {
        if (!isControlled && defaultValue !== defaultProp) {
          console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
        }
      }, [JSON.stringify(defaultProp)]);
    }
    const setValueIfUncontrolled = React4.useCallback((newValue) => {
      if (!isControlled) {
        setValue(newValue);
      }
    }, []);
    return [value, setValueIfUncontrolled];
  }

  // node_modules/@mui/utils/esm/useEventCallback.js
  var React5 = __toESM(require_react());
  function useEventCallback(fn) {
    const ref = React5.useRef(fn);
    useEnhancedEffect_default(() => {
      ref.current = fn;
    });
    return React5.useCallback((...args) => (0, ref.current)(...args), []);
  }

  // node_modules/@mui/utils/esm/useForkRef.js
  var React6 = __toESM(require_react());
  function useForkRef(refA, refB) {
    return React6.useMemo(() => {
      if (refA == null && refB == null) {
        return null;
      }
      return (refValue) => {
        setRef(refA, refValue);
        setRef(refB, refValue);
      };
    }, [refA, refB]);
  }

  // node_modules/@mui/utils/esm/getScrollbarSize.js
  function getScrollbarSize(doc) {
    const documentWidth = doc.documentElement.clientWidth;
    return Math.abs(window.innerWidth - documentWidth);
  }

  // node_modules/@mui/utils/esm/integerPropType.js
  function getTypeByValue(value) {
    const valueType = typeof value;
    switch (valueType) {
      case "number":
        if (Number.isNaN(value)) {
          return "NaN";
        }
        if (!Number.isFinite(value)) {
          return "Infinity";
        }
        if (value !== Math.floor(value)) {
          return "float";
        }
        return "number";
      case "object":
        if (value === null) {
          return "null";
        }
        return value.constructor.name;
      default:
        return valueType;
    }
  }
  function ponyfillIsInteger(x) {
    return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
  }
  var isInteger = Number.isInteger || ponyfillIsInteger;
  function requiredInteger(props, propName, componentName, location) {
    const propValue = props[propName];
    if (propValue == null || !isInteger(propValue)) {
      const propType = getTypeByValue(propValue);
      return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
    }
    return null;
  }
  function validator(props, propName, ...other) {
    const propValue = props[propName];
    if (propValue === void 0) {
      return null;
    }
    return requiredInteger(props, propName, ...other);
  }
  function validatorNoop() {
    return null;
  }
  validator.isRequired = requiredInteger;
  validatorNoop.isRequired = validatorNoop;
  var integerPropType_default = false ? validatorNoop : validator;

  // node_modules/@mui/utils/esm/resolveProps.js
  function resolveProps(defaultProps, props) {
    const output = _extends({}, props);
    Object.keys(defaultProps).forEach((propName) => {
      if (output[propName] === void 0) {
        output[propName] = defaultProps[propName];
      }
    });
    return output;
  }

  // node_modules/@mui/base/BackdropUnstyled/BackdropUnstyled.js
  var React7 = __toESM(require_react());
  var import_prop_types4 = __toESM(require_prop_types());

  // node_modules/@mui/base/composeClasses/composeClasses.js
  function composeClasses(slots, getUtilityClass, classes) {
    const output = {};
    Object.keys(slots).forEach((slot) => {
      output[slot] = slots[slot].reduce((acc, key) => {
        if (key) {
          if (classes && classes[key]) {
            acc.push(classes[key]);
          }
          acc.push(getUtilityClass(key));
        }
        return acc;
      }, []).join(" ");
    });
    return output;
  }

  // node_modules/@mui/base/generateUtilityClass/ClassNameGenerator.js
  var defaultGenerator = (componentName) => componentName;
  var createClassNameGenerator = () => {
    let generate = defaultGenerator;
    return {
      configure(generator) {
        generate = generator;
      },
      generate(componentName) {
        return generate(componentName);
      },
      reset() {
        generate = defaultGenerator;
      }
    };
  };
  var ClassNameGenerator = createClassNameGenerator();
  var ClassNameGenerator_default = ClassNameGenerator;

  // node_modules/@mui/base/generateUtilityClass/generateUtilityClass.js
  var globalStateClassesMapping = {
    active: "Mui-active",
    checked: "Mui-checked",
    completed: "Mui-completed",
    disabled: "Mui-disabled",
    error: "Mui-error",
    expanded: "Mui-expanded",
    focused: "Mui-focused",
    focusVisible: "Mui-focusVisible",
    required: "Mui-required",
    selected: "Mui-selected"
  };
  function generateUtilityClass(componentName, slot) {
    const globalStateClass = globalStateClassesMapping[slot];
    return globalStateClass || `${ClassNameGenerator_default.generate(componentName)}-${slot}`;
  }

  // node_modules/@mui/base/generateUtilityClasses/generateUtilityClasses.js
  function generateUtilityClasses(componentName, slots) {
    const result = {};
    slots.forEach((slot) => {
      result[slot] = generateUtilityClass(componentName, slot);
    });
    return result;
  }

  // node_modules/@mui/base/BackdropUnstyled/backdropUnstyledClasses.js
  function getBackdropUtilityClass(slot) {
    return generateUtilityClass("MuiBackdrop", slot);
  }
  var backdropUnstyledClasses = generateUtilityClasses("MuiBackdrop", ["root", "invisible"]);

  // node_modules/@mui/base/BackdropUnstyled/BackdropUnstyled.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var _excluded = ["classes", "className", "invisible", "component", "components", "componentsProps", "theme"];
  var useUtilityClasses = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return composeClasses(slots, getBackdropUtilityClass, classes);
  };
  var BackdropUnstyled = /* @__PURE__ */ React7.forwardRef(function BackdropUnstyled2(props, ref) {
    const {
      classes: classesProp,
      className,
      invisible = false,
      component = "div",
      components = {},
      componentsProps = {},
      theme
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
    const ownerState = _extends({}, props, {
      classes: classesProp,
      invisible
    });
    const classes = useUtilityClasses(ownerState);
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {};
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Root, _extends({
      "aria-hidden": true
    }, rootProps, !isHostComponent_default(Root) && {
      as: component,
      ownerState: _extends({}, ownerState, rootProps.ownerState),
      theme
    }, {
      ref
    }, other, {
      className: clsx_m_default(classes.root, rootProps.className, className)
    }));
  });
  true ? BackdropUnstyled.propTypes = {
    children: import_prop_types4.default.node,
    classes: import_prop_types4.default.object,
    className: import_prop_types4.default.string,
    component: import_prop_types4.default.elementType,
    components: import_prop_types4.default.shape({
      Root: import_prop_types4.default.elementType
    }),
    componentsProps: import_prop_types4.default.shape({
      root: import_prop_types4.default.object
    }),
    invisible: import_prop_types4.default.bool
  } : void 0;
  var BackdropUnstyled_default = BackdropUnstyled;

  // node_modules/@mui/base/ModalUnstyled/ModalUnstyled.js
  var React10 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());

  // node_modules/@mui/base/Portal/Portal.js
  var React8 = __toESM(require_react());
  var ReactDOM = __toESM(require_react_dom());
  var import_prop_types5 = __toESM(require_prop_types());
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  var Portal = /* @__PURE__ */ React8.forwardRef(function Portal2(props, ref) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React8.useState(null);
    const handleRef = useForkRef(/* @__PURE__ */ React8.isValidElement(children) ? children.ref : null, ref);
    useEnhancedEffect_default(() => {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    useEnhancedEffect_default(() => {
      if (mountNode && !disablePortal) {
        setRef(ref, mountNode);
        return () => {
          setRef(ref, null);
        };
      }
      return void 0;
    }, [ref, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React8.isValidElement(children)) {
        return /* @__PURE__ */ React8.cloneElement(children, {
          ref: handleRef
        });
      }
      return children;
    }
    return mountNode ? /* @__PURE__ */ ReactDOM.createPortal(children, mountNode) : mountNode;
  });
  true ? Portal.propTypes = {
    children: import_prop_types5.default.node,
    container: import_prop_types5.default.oneOfType([HTMLElementType, import_prop_types5.default.func]),
    disablePortal: import_prop_types5.default.bool
  } : void 0;
  if (true) {
    Portal["propTypes"] = exactProp(Portal.propTypes);
  }
  var Portal_default = Portal;

  // node_modules/@mui/base/ModalUnstyled/ModalManager.js
  function isOverflowing(container) {
    const doc = ownerDocument(container);
    if (doc.body === container) {
      return ownerWindow(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt(ownerWindow(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude = [], show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    const blacklistTagNames = ["TEMPLATE", "SCRIPT", "STYLE"];
    [].forEach.call(container.children, (element) => {
      if (blacklist.indexOf(element) === -1 && blacklistTagNames.indexOf(element.tagName) === -1) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index) => {
      if (callback(item)) {
        idx = index;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = getScrollbarSize(ownerDocument(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = ownerDocument(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      const parent = container.parentElement;
      const containerWindow = ownerWindow(container);
      const scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el,
        property
      }) => {
        if (value) {
          el.style.setProperty(property, value);
        } else {
          el.style.removeProperty(property);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = class {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, true);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  };

  // node_modules/@mui/base/Unstable_TrapFocus/Unstable_TrapFocus.js
  var React9 = __toESM(require_react());
  var import_prop_types6 = __toESM(require_prop_types());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex"), 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function Unstable_TrapFocus(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React9.useRef();
    const sentinelStart = React9.useRef(null);
    const sentinelEnd = React9.useRef(null);
    const nodeToRestore = React9.useRef(null);
    const reactFocusEventTarget = React9.useRef(null);
    const activated = React9.useRef(false);
    const rootRef = React9.useRef(null);
    const handleRef = useForkRef(children.ref, rootRef);
    const lastKeydown = React9.useRef(null);
    React9.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React9.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", -1);
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React9.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = ownerDocument(rootRef.current);
      const contain = (nativeEvent) => {
        const {
          current: rootElement
        } = rootRef;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (!rootElement.contains(doc.activeElement)) {
          if (nativeEvent && reactFocusEventTarget.current !== nativeEvent.target || doc.activeElement !== reactFocusEventTarget.current) {
            reactFocusEventTarget.current = null;
          } else if (reactFocusEventTarget.current !== null) {
            return;
          }
          if (!activated.current) {
            return;
          }
          let tabbable = [];
          if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
            tabbable = getTabbable(rootRef.current);
          }
          if (tabbable.length > 0) {
            var _lastKeydown$current, _lastKeydown$current2;
            const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
            const focusNext = tabbable[0];
            const focusPrevious = tabbable[tabbable.length - 1];
            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          } else {
            rootElement.focus();
          }
        }
      };
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          sentinelEnd.current.focus();
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement.tagName === "BODY") {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(React9.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-test": "sentinelStart"
      }), /* @__PURE__ */ React9.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", {
        tabIndex: 0,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-test": "sentinelEnd"
      })]
    });
  }
  true ? Unstable_TrapFocus.propTypes = {
    children: elementAcceptingRef_default,
    disableAutoFocus: import_prop_types6.default.bool,
    disableEnforceFocus: import_prop_types6.default.bool,
    disableRestoreFocus: import_prop_types6.default.bool,
    getTabbable: import_prop_types6.default.func,
    isEnabled: import_prop_types6.default.func,
    open: import_prop_types6.default.bool.isRequired
  } : void 0;
  if (true) {
    Unstable_TrapFocus["propTypes"] = exactProp(Unstable_TrapFocus.propTypes);
  }
  var Unstable_TrapFocus_default = Unstable_TrapFocus;

  // node_modules/@mui/base/ModalUnstyled/modalUnstyledClasses.js
  function getModalUtilityClass(slot) {
    return generateUtilityClass("MuiModal", slot);
  }
  var modalUnstyledClasses = generateUtilityClasses("MuiModal", ["root", "hidden"]);

  // node_modules/@mui/base/ModalUnstyled/ModalUnstyled.js
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var _excluded2 = ["BackdropComponent", "BackdropProps", "children", "classes", "className", "closeAfterTransition", "component", "components", "componentsProps", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onKeyDown", "open", "theme", "onTransitionEnter", "onTransitionExited"];
  var useUtilityClasses2 = (ownerState) => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"]
    };
    return composeClasses(slots, getModalUtilityClass, classes);
  };
  function getContainer2(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(props) {
    return props.children ? props.children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager();
  var ModalUnstyled = /* @__PURE__ */ React10.forwardRef(function ModalUnstyled2(props, ref) {
    const {
      BackdropComponent,
      BackdropProps,
      children,
      classes: classesProp,
      className,
      closeAfterTransition = false,
      component = "div",
      components = {},
      componentsProps = {},
      container,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      manager = defaultManager,
      onBackdropClick,
      onClose,
      onKeyDown,
      open,
      theme,
      onTransitionEnter,
      onTransitionExited
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
    const [exited, setExited] = React10.useState(true);
    const modal = React10.useRef({});
    const mountNodeRef = React10.useRef(null);
    const modalRef = React10.useRef(null);
    const handleRef = useForkRef(modalRef, ref);
    const hasTransition = getHasTransition(props);
    const getDoc = () => ownerDocument(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mountNode = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      modalRef.current.scrollTop = 0;
    };
    const handleOpen = useEventCallback(() => {
      const resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React10.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = useEventCallback((node2) => {
      mountNodeRef.current = node2;
      if (!node2) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else {
        ariaHidden(modalRef.current, true);
      }
    });
    const handleClose = React10.useCallback(() => {
      manager.remove(getModal());
    }, [manager]);
    React10.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React10.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const ownerState = _extends({}, props, {
      classes: classesProp,
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      exited,
      hideBackdrop,
      keepMounted
    });
    const classes = useUtilityClasses2(ownerState);
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    const handleEnter = () => {
      setExited(false);
      if (onTransitionEnter) {
        onTransitionEnter();
      }
    };
    const handleExited = () => {
      setExited(true);
      if (onTransitionExited) {
        onTransitionExited();
      }
      if (closeAfterTransition) {
        handleClose();
      }
    };
    const handleBackdropClick = (event) => {
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const handleKeyDown = (event) => {
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.key !== "Escape" || !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
      childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
    }
    const Root = components.Root || component;
    const rootProps = componentsProps.root || {};
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Portal_default, {
      ref: handlePortalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(Root, _extends({
        role: "presentation"
      }, rootProps, !isHostComponent_default(Root) && {
        as: component,
        ownerState: _extends({}, ownerState, rootProps.ownerState),
        theme
      }, other, {
        ref: handleRef,
        onKeyDown: handleKeyDown,
        className: clsx_m_default(classes.root, rootProps.className, className),
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(BackdropComponent, _extends({
          open,
          onClick: handleBackdropClick
        }, BackdropProps)) : null, /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(Unstable_TrapFocus_default, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React10.cloneElement(children, childProps)
        })]
      }))
    });
  });
  true ? ModalUnstyled.propTypes = {
    BackdropComponent: import_prop_types7.default.elementType,
    BackdropProps: import_prop_types7.default.object,
    children: elementAcceptingRef_default.isRequired,
    classes: import_prop_types7.default.object,
    className: import_prop_types7.default.string,
    closeAfterTransition: import_prop_types7.default.bool,
    component: import_prop_types7.default.elementType,
    components: import_prop_types7.default.shape({
      Root: import_prop_types7.default.elementType
    }),
    componentsProps: import_prop_types7.default.shape({
      root: import_prop_types7.default.object
    }),
    container: import_prop_types7.default.oneOfType([HTMLElementType, import_prop_types7.default.func]),
    disableAutoFocus: import_prop_types7.default.bool,
    disableEnforceFocus: import_prop_types7.default.bool,
    disableEscapeKeyDown: import_prop_types7.default.bool,
    disablePortal: import_prop_types7.default.bool,
    disableRestoreFocus: import_prop_types7.default.bool,
    disableScrollLock: import_prop_types7.default.bool,
    hideBackdrop: import_prop_types7.default.bool,
    keepMounted: import_prop_types7.default.bool,
    onBackdropClick: import_prop_types7.default.func,
    onClose: import_prop_types7.default.func,
    onKeyDown: import_prop_types7.default.func,
    open: import_prop_types7.default.bool.isRequired
  } : void 0;
  var ModalUnstyled_default = ModalUnstyled;

  // node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js
  var React11 = __toESM(require_react());
  var import_prop_types8 = __toESM(require_prop_types());
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var _excluded3 = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue(computedStyle, property) {
    return parseInt(computedStyle[property], 10) || 0;
  }
  var styles = {
    shadow: {
      visibility: "hidden",
      position: "absolute",
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      transform: "translateZ(0)"
    }
  };
  var TextareaAutosize = /* @__PURE__ */ React11.forwardRef(function TextareaAutosize2(props, ref) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style: style3,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
    const {
      current: isControlled
    } = React11.useRef(value != null);
    const inputRef = React11.useRef(null);
    const handleRef = useForkRef(ref, inputRef);
    const shadowRef = React11.useRef(null);
    const renders = React11.useRef(0);
    const [state, setState] = React11.useState({});
    const syncHeight = React11.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = ownerWindow(input);
      const computedStyle = containerWindow.getComputedStyle(input);
      if (computedStyle.width === "0px") {
        return;
      }
      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      const boxSizing2 = computedStyle["box-sizing"];
      const padding2 = getStyleValue(computedStyle, "padding-bottom") + getStyleValue(computedStyle, "padding-top");
      const border2 = getStyleValue(computedStyle, "border-bottom-width") + getStyleValue(computedStyle, "border-top-width");
      const innerHeight = inputShallow.scrollHeight;
      inputShallow.value = "x";
      const singleRowHeight = inputShallow.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing2 === "border-box" ? padding2 + border2 : 0);
      const overflow2 = Math.abs(outerHeight - innerHeight) <= 1;
      setState((prevState) => {
        if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow2)) {
          renders.current += 1;
          return {
            overflow: overflow2,
            outerHeightStyle
          };
        }
        if (true) {
          if (renders.current === 20) {
            console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
          }
        }
        return prevState;
      });
    }, [maxRows, minRows, props.placeholder]);
    React11.useEffect(() => {
      const handleResize = debounce(() => {
        renders.current = 0;
        syncHeight();
      });
      const containerWindow = ownerWindow(inputRef.current);
      containerWindow.addEventListener("resize", handleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(handleResize);
        resizeObserver.observe(inputRef.current);
      }
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [syncHeight]);
    useEnhancedEffect_default(() => {
      syncHeight();
    });
    React11.useEffect(() => {
      renders.current = 0;
    }, [value]);
    const handleChange = (event) => {
      renders.current = 0;
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(React11.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime6.jsx)("textarea", _extends({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: _extends({
          height: state.outerHeightStyle,
          overflow: state.overflow ? "hidden" : null
        }, style3)
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends({}, styles.shadow, style3, {
          padding: 0
        })
      })]
    });
  });
  true ? TextareaAutosize.propTypes = {
    className: import_prop_types8.default.string,
    maxRows: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    minRows: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    onChange: import_prop_types8.default.func,
    placeholder: import_prop_types8.default.string,
    style: import_prop_types8.default.object,
    value: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string), import_prop_types8.default.number, import_prop_types8.default.string])
  } : void 0;
  var TextareaAutosize_default = TextareaAutosize;

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var import_react5 = __toESM(require_react());

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.browser.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  });
  var emotion_is_prop_valid_browser_esm_default = isPropValid;

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var import_react3 = __toESM(require_react());

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var import_react2 = __toESM(require_react());

  // node_modules/@emotion/react/dist/emotion-element-699e6908.browser.esm.js
  var import_react = __toESM(require_react());
  var hasOwnProperty = {}.hasOwnProperty;
  var EmotionCacheContext = /* @__PURE__ */ (0, import_react.createContext)(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ emotion_cache_browser_esm_default({
    key: "css"
  }) : null);
  if (true) {
    EmotionCacheContext.displayName = "EmotionCacheContext";
  }
  var CacheProvider = EmotionCacheContext.Provider;
  var withEmotionCache = function withEmotionCache2(func) {
    return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
      var cache2 = (0, import_react.useContext)(EmotionCacheContext);
      return func(props, cache2, ref);
    });
  };
  var ThemeContext = /* @__PURE__ */ (0, import_react.createContext)({});
  if (true) {
    ThemeContext.displayName = "EmotionThemeContext";
  }
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
  var Noop = function Noop2() {
    return null;
  };
  var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache2, ref) {
    var cssProp = props.css;
    if (typeof cssProp === "string" && cache2.registered[cssProp] !== void 0) {
      cssProp = cache2.registered[cssProp];
    }
    var type = props[typePropName];
    var registeredStyles = [cssProp];
    var className = "";
    if (typeof props.className === "string") {
      className = getRegisteredStyles(cache2.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, (0, import_react.useContext)(ThemeContext));
    if (serialized.name.indexOf("-") === -1) {
      var labelFromStack = props[labelPropName];
      if (labelFromStack) {
        serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
      }
    }
    var rules = insertStyles(cache2, serialized, typeof type === "string");
    className += cache2.key + "-" + serialized.name;
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
        newProps[key] = props[key];
      }
    }
    newProps.ref = ref;
    newProps.className = className;
    var ele = /* @__PURE__ */ (0, import_react.createElement)(type, newProps);
    var possiblyStyleElement = /* @__PURE__ */ (0, import_react.createElement)(Noop, null);
    return /* @__PURE__ */ (0, import_react.createElement)(import_react.Fragment, null, possiblyStyleElement, ele);
  });
  if (true) {
    Emotion.displayName = "EmotionCssPropInternal";
  }

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  var pkg = {
    name: "@emotion/react",
    version: "11.7.1",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
      "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
      "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    types: "types/index.d.ts",
    files: [
      "src",
      "dist",
      "jsx-runtime",
      "jsx-dev-runtime",
      "_isolated-hnrs",
      "types/*.d.ts",
      "macro.js",
      "macro.d.ts",
      "macro.js.flow"
    ],
    sideEffects: false,
    author: "mitchellhamilton <mitchell@mitchellhamilton.me>",
    license: "MIT",
    scripts: {
      "test:typescript": "dtslint types"
    },
    dependencies: {
      "@babel/runtime": "^7.13.10",
      "@emotion/cache": "^11.7.1",
      "@emotion/serialize": "^1.0.2",
      "@emotion/sheet": "^1.1.0",
      "@emotion/utils": "^1.0.0",
      "@emotion/weak-memoize": "^0.2.5",
      "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
      "@babel/core": "^7.0.0",
      react: ">=16.8.0"
    },
    peerDependenciesMeta: {
      "@babel/core": {
        optional: true
      },
      "@types/react": {
        optional: true
      }
    },
    devDependencies: {
      "@babel/core": "^7.13.10",
      "@emotion/css": "11.7.1",
      "@emotion/css-prettifier": "1.0.1",
      "@emotion/server": "11.4.0",
      "@emotion/styled": "11.6.0",
      "@types/react": "^16.9.11",
      dtslint: "^0.3.0",
      "html-tag-names": "^1.1.2",
      react: "16.14.0",
      "svg-tag-names": "^1.1.1"
    },
    repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
    publishConfig: {
      access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
      entrypoints: [
        "./index.js",
        "./jsx-runtime.js",
        "./jsx-dev-runtime.js",
        "./_isolated-hnrs.js"
      ],
      umdName: "emotionReact"
    }
  };
  var warnedAboutCssPropForGlobal = false;
  var Global = /* @__PURE__ */ withEmotionCache(function(props, cache2) {
    if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
      console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
      warnedAboutCssPropForGlobal = true;
    }
    var styles4 = props.styles;
    var serialized = serializeStyles([styles4], void 0, (0, import_react2.useContext)(ThemeContext));
    var sheetRef = (0, import_react2.useRef)();
    (0, import_react2.useLayoutEffect)(function() {
      var key = cache2.key + "-global";
      var sheet2 = new StyleSheet({
        key,
        nonce: cache2.sheet.nonce,
        container: cache2.sheet.container,
        speedy: cache2.sheet.isSpeedy
      });
      var rehydrating = false;
      var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
      if (cache2.sheet.tags.length) {
        sheet2.before = cache2.sheet.tags[0];
      }
      if (node2 !== null) {
        rehydrating = true;
        node2.setAttribute("data-emotion", key);
        sheet2.hydrate([node2]);
      }
      sheetRef.current = [sheet2, rehydrating];
      return function() {
        sheet2.flush();
      };
    }, [cache2]);
    (0, import_react2.useLayoutEffect)(function() {
      var sheetRefCurrent = sheetRef.current;
      var sheet2 = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
      if (rehydrating) {
        sheetRefCurrent[1] = false;
        return;
      }
      if (serialized.next !== void 0) {
        insertStyles(cache2, serialized.next, true);
      }
      if (sheet2.tags.length) {
        var element = sheet2.tags[sheet2.tags.length - 1].nextElementSibling;
        sheet2.before = element;
        sheet2.flush();
      }
      cache2.insert("", serialized, sheet2, false);
    }, [cache2, serialized.name]);
    return null;
  });
  if (true) {
    Global.displayName = "EmotionGlobal";
  }
  var classnames3 = function classnames4(args) {
    var len = args.length;
    var i = 0;
    var cls = "";
    for (; i < len; i++) {
      var arg = args[i];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames4(arg);
          } else {
            if (arg.styles !== void 0 && arg.name !== void 0) {
              console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
            }
            toAdd = "";
            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += " ");
                toAdd += k;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  function merge3(registered, css3, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css3(registeredStyles);
  }
  var Noop3 = function Noop4() {
    return null;
  };
  var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache2) {
    var hasRendered = false;
    var css3 = function css4() {
      if (hasRendered && true) {
        throw new Error("css can only be used during render");
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache2.registered);
      {
        insertStyles(cache2, serialized, false);
      }
      return cache2.key + "-" + serialized.name;
    };
    var cx2 = function cx3() {
      if (hasRendered && true) {
        throw new Error("cx can only be used during render");
      }
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return merge3(cache2.registered, css3, classnames3(args));
    };
    var content = {
      css: css3,
      cx: cx2,
      theme: (0, import_react2.useContext)(ThemeContext)
    };
    var ele = props.children(content);
    hasRendered = true;
    var possiblyStyleElement = /* @__PURE__ */ (0, import_react2.createElement)(Noop3, null);
    return /* @__PURE__ */ (0, import_react2.createElement)(import_react2.Fragment, null, possiblyStyleElement, ele);
  });
  if (true) {
    ClassNames.displayName = "EmotionClassNames";
  }
  if (true) {
    isBrowser2 = true;
    isJest = typeof jest !== "undefined";
    if (isBrowser2 && !isJest) {
      globalContext = typeof globalThis !== "undefined" ? globalThis : isBrowser2 ? window : global;
      globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
      if (globalContext[globalKey]) {
        console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
      }
      globalContext[globalKey] = true;
    }
  }
  var isBrowser2;
  var isJest;
  var globalContext;
  var globalKey;

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var testOmitPropsOnStringTag = emotion_is_prop_valid_browser_esm_default;
  var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
    return key !== "theme";
  };
  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
    return typeof tag === "string" && tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };
  var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
    var shouldForwardProp2;
    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
        return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp2 !== "function" && isReal) {
      shouldForwardProp2 = tag.__emotion_forwardProp;
    }
    return shouldForwardProp2;
  };
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var Noop5 = function Noop6() {
    return null;
  };
  var createStyled = function createStyled2(tag, options) {
    if (true) {
      if (tag === void 0) {
        throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
      }
    }
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== void 0) {
      identifierName = options.label;
      targetClassName = options.target;
    }
    var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
      var args = arguments;
      var styles4 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
      if (identifierName !== void 0) {
        styles4.push("label:" + identifierName + ";");
      }
      if (args[0] == null || args[0].raw === void 0) {
        styles4.push.apply(styles4, args);
      } else {
        if (args[0][0] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
        }
        styles4.push(args[0][0]);
        var len = args.length;
        var i = 1;
        for (; i < len; i++) {
          if (args[0][i] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
          }
          styles4.push(args[i], args[0][i]);
        }
      }
      var Styled = withEmotionCache(function(props, cache2, ref) {
        var finalTag = shouldUseAs && props.as || baseTag;
        var className = "";
        var classInterpolations = [];
        var mergedProps = props;
        if (props.theme == null) {
          mergedProps = {};
          for (var key in props) {
            mergedProps[key] = props[key];
          }
          mergedProps.theme = (0, import_react3.useContext)(ThemeContext);
        }
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache2.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(styles4.concat(classInterpolations), cache2.registered, mergedProps);
        var rules = insertStyles(cache2, serialized, typeof finalTag === "string");
        className += cache2.key + "-" + serialized.name;
        if (targetClassName !== void 0) {
          className += " " + targetClassName;
        }
        var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
        var newProps = {};
        for (var _key in props) {
          if (shouldUseAs && _key === "as")
            continue;
          if (finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }
        newProps.className = className;
        newProps.ref = ref;
        var ele = /* @__PURE__ */ (0, import_react3.createElement)(finalTag, newProps);
        var possiblyStyleElement = /* @__PURE__ */ (0, import_react3.createElement)(Noop5, null);
        return /* @__PURE__ */ (0, import_react3.createElement)(import_react3.Fragment, null, possiblyStyleElement, ele);
      });
      Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
      Styled.defaultProps = tag.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles4;
      Styled.__emotion_forwardProp = shouldForwardProp2;
      Object.defineProperty(Styled, "toString", {
        value: function value() {
          if (targetClassName === void 0 && true) {
            return "NO_COMPONENT_SELECTOR";
          }
          return "." + targetClassName;
        }
      });
      Styled.withComponent = function(nextTag, nextOptions) {
        return createStyled2(nextTag, _extends({}, options, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        })).apply(void 0, styles4);
      };
      return Styled;
    };
  };
  var emotion_styled_base_browser_esm_default = createStyled;

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  var newStyled = emotion_styled_base_browser_esm_default.bind();
  tags.forEach(function(tagName) {
    newStyled[tagName] = newStyled(tagName);
  });
  var emotion_styled_browser_esm_default = newStyled;

  // node_modules/@mui/styled-engine/GlobalStyles/GlobalStyles.js
  var React12 = __toESM(require_react());
  var import_prop_types9 = __toESM(require_prop_types());
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  function isEmpty(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0;
  }
  function GlobalStyles(props) {
    const {
      styles: styles4,
      defaultTheme: defaultTheme2 = {}
    } = props;
    const globalStyles = typeof styles4 === "function" ? (themeInput) => styles4(isEmpty(themeInput) ? defaultTheme2 : themeInput) : styles4;
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Global, {
      styles: globalStyles
    });
  }
  true ? GlobalStyles.propTypes = {
    defaultTheme: import_prop_types9.default.object,
    styles: import_prop_types9.default.oneOfType([import_prop_types9.default.string, import_prop_types9.default.object, import_prop_types9.default.func])
  } : void 0;

  // node_modules/@mui/styled-engine/index.js
  function styled(tag, options) {
    const stylesFactory = emotion_styled_browser_esm_default(tag, options);
    if (true) {
      return (...styles4) => {
        const component = typeof tag === "string" ? `"${tag}"` : "component";
        if (styles4.length === 0) {
          console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
        } else if (styles4.some((style3) => style3 === void 0)) {
          console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
        }
        return stylesFactory(...styles4);
      };
    }
    return stylesFactory;
  }

  // node_modules/@mui/system/esm/responsivePropType.js
  var import_prop_types10 = __toESM(require_prop_types());
  var responsivePropType = true ? import_prop_types10.default.oneOfType([import_prop_types10.default.number, import_prop_types10.default.string, import_prop_types10.default.object, import_prop_types10.default.array]) : {};
  var responsivePropType_default = responsivePropType;

  // node_modules/@mui/system/esm/merge.js
  function merge4(acc, item) {
    if (!item) {
      return acc;
    }
    return deepmerge(acc, item, {
      clone: false
    });
  }
  var merge_default = merge4;

  // node_modules/@mui/system/esm/breakpoints.js
  var values = {
    xs: 0,
    sm: 600,
    md: 900,
    lg: 1200,
    xl: 1536
  };
  var defaultBreakpoints = {
    keys: ["xs", "sm", "md", "lg", "xl"],
    up: (key) => `@media (min-width:${values[key]}px)`
  };
  function handleBreakpoints(props, propValue, styleFromPropValue) {
    const theme = props.theme || {};
    if (Array.isArray(propValue)) {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return propValue.reduce((acc, item, index) => {
        acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
        return acc;
      }, {});
    }
    if (typeof propValue === "object") {
      const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
      return Object.keys(propValue).reduce((acc, breakpoint) => {
        if (Object.keys(themeBreakpoints.values || values).indexOf(breakpoint) !== -1) {
          const mediaKey = themeBreakpoints.up(breakpoint);
          acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
        } else {
          const cssKey = breakpoint;
          acc[cssKey] = propValue[cssKey];
        }
        return acc;
      }, {});
    }
    const output = styleFromPropValue(propValue);
    return output;
  }
  function createEmptyBreakpointObject(breakpointsInput = {}) {
    var _breakpointsInput$key;
    const breakpointsInOrder = breakpointsInput == null ? void 0 : (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
      const breakpointStyleKey = breakpointsInput.up(key);
      acc[breakpointStyleKey] = {};
      return acc;
    }, {});
    return breakpointsInOrder || {};
  }
  function removeUnusedBreakpoints(breakpointKeys, style3) {
    return breakpointKeys.reduce((acc, key) => {
      const breakpointOutput = acc[key];
      const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
      if (isBreakpointUnused) {
        delete acc[key];
      }
      return acc;
    }, style3);
  }

  // node_modules/@mui/system/esm/style.js
  function getPath(obj, path) {
    if (!path || typeof path !== "string") {
      return null;
    }
    return path.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
  }
  function getValue(themeMapping, transform2, propValueFinal, userValue = propValueFinal) {
    let value;
    if (typeof themeMapping === "function") {
      value = themeMapping(propValueFinal);
    } else if (Array.isArray(themeMapping)) {
      value = themeMapping[propValueFinal] || userValue;
    } else {
      value = getPath(themeMapping, propValueFinal) || userValue;
    }
    if (transform2) {
      value = transform2(value);
    }
    return value;
  }
  function style(options) {
    const {
      prop,
      cssProperty = options.prop,
      themeKey,
      transform: transform2
    } = options;
    const fn = (props) => {
      if (props[prop] == null) {
        return null;
      }
      const propValue = props[prop];
      const theme = props.theme;
      const themeMapping = getPath(theme, themeKey) || {};
      const styleFromPropValue = (propValueFinal) => {
        let value = getValue(themeMapping, transform2, propValueFinal);
        if (propValueFinal === value && typeof propValueFinal === "string") {
          value = getValue(themeMapping, transform2, `${prop}${propValueFinal === "default" ? "" : capitalize(propValueFinal)}`, propValueFinal);
        }
        if (cssProperty === false) {
          return value;
        }
        return {
          [cssProperty]: value
        };
      };
      return handleBreakpoints(props, propValue, styleFromPropValue);
    };
    fn.propTypes = true ? {
      [prop]: responsivePropType_default
    } : {};
    fn.filterProps = [prop];
    return fn;
  }
  var style_default = style;

  // node_modules/@mui/system/esm/compose.js
  function compose(...styles4) {
    const handlers = styles4.reduce((acc, style3) => {
      style3.filterProps.forEach((prop) => {
        acc[prop] = style3;
      });
      return acc;
    }, {});
    const fn = (props) => {
      return Object.keys(props).reduce((acc, prop) => {
        if (handlers[prop]) {
          return merge_default(acc, handlers[prop](props));
        }
        return acc;
      }, {});
    };
    fn.propTypes = true ? styles4.reduce((acc, style3) => Object.assign(acc, style3.propTypes), {}) : {};
    fn.filterProps = styles4.reduce((acc, style3) => acc.concat(style3.filterProps), []);
    return fn;
  }
  var compose_default = compose;

  // node_modules/@mui/system/esm/memoize.js
  function memoize2(fn) {
    const cache2 = {};
    return (arg) => {
      if (cache2[arg] === void 0) {
        cache2[arg] = fn(arg);
      }
      return cache2[arg];
    };
  }

  // node_modules/@mui/system/esm/spacing.js
  var properties = {
    m: "margin",
    p: "padding"
  };
  var directions = {
    t: "Top",
    r: "Right",
    b: "Bottom",
    l: "Left",
    x: ["Left", "Right"],
    y: ["Top", "Bottom"]
  };
  var aliases = {
    marginX: "mx",
    marginY: "my",
    paddingX: "px",
    paddingY: "py"
  };
  var getCssProperties = memoize2((prop) => {
    if (prop.length > 2) {
      if (aliases[prop]) {
        prop = aliases[prop];
      } else {
        return [prop];
      }
    }
    const [a, b] = prop.split("");
    const property = properties[a];
    const direction = directions[b] || "";
    return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
  });
  var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
  var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
  var spacingKeys = [...marginKeys, ...paddingKeys];
  function createUnaryUnit(theme, themeKey, defaultValue, propName) {
    const themeSpacing = getPath(theme, themeKey) || defaultValue;
    if (typeof themeSpacing === "number") {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (typeof abs2 !== "number") {
            console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
          }
        }
        return themeSpacing * abs2;
      };
    }
    if (Array.isArray(themeSpacing)) {
      return (abs2) => {
        if (typeof abs2 === "string") {
          return abs2;
        }
        if (true) {
          if (!Number.isInteger(abs2)) {
            console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
          } else if (abs2 > themeSpacing.length - 1) {
            console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
          }
        }
        return themeSpacing[abs2];
      };
    }
    if (typeof themeSpacing === "function") {
      return themeSpacing;
    }
    if (true) {
      console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
    }
    return () => void 0;
  }
  function createUnarySpacing(theme) {
    return createUnaryUnit(theme, "spacing", 8, "spacing");
  }
  function getValue2(transformer, propValue) {
    if (typeof propValue === "string" || propValue == null) {
      return propValue;
    }
    const abs2 = Math.abs(propValue);
    const transformed = transformer(abs2);
    if (propValue >= 0) {
      return transformed;
    }
    if (typeof transformed === "number") {
      return -transformed;
    }
    return `-${transformed}`;
  }
  function getStyleFromPropValue(cssProperties, transformer) {
    return (propValue) => cssProperties.reduce((acc, cssProperty) => {
      acc[cssProperty] = getValue2(transformer, propValue);
      return acc;
    }, {});
  }
  function resolveCssProperty(props, keys, prop, transformer) {
    if (keys.indexOf(prop) === -1) {
      return null;
    }
    const cssProperties = getCssProperties(prop);
    const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
    const propValue = props[prop];
    return handleBreakpoints(props, propValue, styleFromPropValue);
  }
  function style2(props, keys) {
    const transformer = createUnarySpacing(props.theme);
    return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(merge_default, {});
  }
  function margin(props) {
    return style2(props, marginKeys);
  }
  margin.propTypes = true ? marginKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  margin.filterProps = marginKeys;
  function padding(props) {
    return style2(props, paddingKeys);
  }
  padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  padding.filterProps = paddingKeys;
  function spacing(props) {
    return style2(props, spacingKeys);
  }
  spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
    obj[key] = responsivePropType_default;
    return obj;
  }, {}) : {};
  spacing.filterProps = spacingKeys;
  var spacing_default = spacing;

  // node_modules/@mui/system/esm/borders.js
  function getBorder(value) {
    if (typeof value !== "number") {
      return value;
    }
    return `${value}px solid`;
  }
  var border = style_default({
    prop: "border",
    themeKey: "borders",
    transform: getBorder
  });
  var borderTop = style_default({
    prop: "borderTop",
    themeKey: "borders",
    transform: getBorder
  });
  var borderRight = style_default({
    prop: "borderRight",
    themeKey: "borders",
    transform: getBorder
  });
  var borderBottom = style_default({
    prop: "borderBottom",
    themeKey: "borders",
    transform: getBorder
  });
  var borderLeft = style_default({
    prop: "borderLeft",
    themeKey: "borders",
    transform: getBorder
  });
  var borderColor = style_default({
    prop: "borderColor",
    themeKey: "palette"
  });
  var borderTopColor = style_default({
    prop: "borderTopColor",
    themeKey: "palette"
  });
  var borderRightColor = style_default({
    prop: "borderRightColor",
    themeKey: "palette"
  });
  var borderBottomColor = style_default({
    prop: "borderBottomColor",
    themeKey: "palette"
  });
  var borderLeftColor = style_default({
    prop: "borderLeftColor",
    themeKey: "palette"
  });
  var borderRadius = (props) => {
    if (props.borderRadius !== void 0 && props.borderRadius !== null) {
      const transformer = createUnaryUnit(props.theme, "shape.borderRadius", 4, "borderRadius");
      const styleFromPropValue = (propValue) => ({
        borderRadius: getValue2(transformer, propValue)
      });
      return handleBreakpoints(props, props.borderRadius, styleFromPropValue);
    }
    return null;
  };
  borderRadius.propTypes = true ? {
    borderRadius: responsivePropType_default
  } : {};
  borderRadius.filterProps = ["borderRadius"];
  var borders = compose_default(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
  var borders_default = borders;

  // node_modules/@mui/system/esm/display.js
  var displayPrint = style_default({
    prop: "displayPrint",
    cssProperty: false,
    transform: (value) => ({
      "@media print": {
        display: value
      }
    })
  });
  var displayRaw = style_default({
    prop: "display"
  });
  var overflow = style_default({
    prop: "overflow"
  });
  var textOverflow = style_default({
    prop: "textOverflow"
  });
  var visibility = style_default({
    prop: "visibility"
  });
  var whiteSpace = style_default({
    prop: "whiteSpace"
  });
  var display_default = compose_default(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

  // node_modules/@mui/system/esm/flexbox.js
  var flexBasis = style_default({
    prop: "flexBasis"
  });
  var flexDirection = style_default({
    prop: "flexDirection"
  });
  var flexWrap = style_default({
    prop: "flexWrap"
  });
  var justifyContent = style_default({
    prop: "justifyContent"
  });
  var alignItems = style_default({
    prop: "alignItems"
  });
  var alignContent = style_default({
    prop: "alignContent"
  });
  var order = style_default({
    prop: "order"
  });
  var flex = style_default({
    prop: "flex"
  });
  var flexGrow = style_default({
    prop: "flexGrow"
  });
  var flexShrink = style_default({
    prop: "flexShrink"
  });
  var alignSelf = style_default({
    prop: "alignSelf"
  });
  var justifyItems = style_default({
    prop: "justifyItems"
  });
  var justifySelf = style_default({
    prop: "justifySelf"
  });
  var flexbox = compose_default(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
  var flexbox_default = flexbox;

  // node_modules/@mui/system/esm/grid.js
  var gap = (props) => {
    if (props.gap !== void 0 && props.gap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "gap");
      const styleFromPropValue = (propValue) => ({
        gap: getValue2(transformer, propValue)
      });
      return handleBreakpoints(props, props.gap, styleFromPropValue);
    }
    return null;
  };
  gap.propTypes = true ? {
    gap: responsivePropType_default
  } : {};
  gap.filterProps = ["gap"];
  var columnGap = (props) => {
    if (props.columnGap !== void 0 && props.columnGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "columnGap");
      const styleFromPropValue = (propValue) => ({
        columnGap: getValue2(transformer, propValue)
      });
      return handleBreakpoints(props, props.columnGap, styleFromPropValue);
    }
    return null;
  };
  columnGap.propTypes = true ? {
    columnGap: responsivePropType_default
  } : {};
  columnGap.filterProps = ["columnGap"];
  var rowGap = (props) => {
    if (props.rowGap !== void 0 && props.rowGap !== null) {
      const transformer = createUnaryUnit(props.theme, "spacing", 8, "rowGap");
      const styleFromPropValue = (propValue) => ({
        rowGap: getValue2(transformer, propValue)
      });
      return handleBreakpoints(props, props.rowGap, styleFromPropValue);
    }
    return null;
  };
  rowGap.propTypes = true ? {
    rowGap: responsivePropType_default
  } : {};
  rowGap.filterProps = ["rowGap"];
  var gridColumn = style_default({
    prop: "gridColumn"
  });
  var gridRow = style_default({
    prop: "gridRow"
  });
  var gridAutoFlow = style_default({
    prop: "gridAutoFlow"
  });
  var gridAutoColumns = style_default({
    prop: "gridAutoColumns"
  });
  var gridAutoRows = style_default({
    prop: "gridAutoRows"
  });
  var gridTemplateColumns = style_default({
    prop: "gridTemplateColumns"
  });
  var gridTemplateRows = style_default({
    prop: "gridTemplateRows"
  });
  var gridTemplateAreas = style_default({
    prop: "gridTemplateAreas"
  });
  var gridArea = style_default({
    prop: "gridArea"
  });
  var grid = compose_default(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
  var grid_default = grid;

  // node_modules/@mui/system/esm/palette.js
  var color = style_default({
    prop: "color",
    themeKey: "palette"
  });
  var bgcolor = style_default({
    prop: "bgcolor",
    cssProperty: "backgroundColor",
    themeKey: "palette"
  });
  var backgroundColor = style_default({
    prop: "backgroundColor",
    themeKey: "palette"
  });
  var palette = compose_default(color, bgcolor, backgroundColor);
  var palette_default = palette;

  // node_modules/@mui/system/esm/positions.js
  var position2 = style_default({
    prop: "position"
  });
  var zIndex = style_default({
    prop: "zIndex",
    themeKey: "zIndex"
  });
  var top = style_default({
    prop: "top"
  });
  var right = style_default({
    prop: "right"
  });
  var bottom = style_default({
    prop: "bottom"
  });
  var left = style_default({
    prop: "left"
  });
  var positions_default = compose_default(position2, zIndex, top, right, bottom, left);

  // node_modules/@mui/system/esm/shadows.js
  var boxShadow = style_default({
    prop: "boxShadow",
    themeKey: "shadows"
  });
  var shadows_default = boxShadow;

  // node_modules/@mui/system/esm/sizing.js
  function transform(value) {
    return value <= 1 && value !== 0 ? `${value * 100}%` : value;
  }
  var width = style_default({
    prop: "width",
    transform
  });
  var maxWidth = (props) => {
    if (props.maxWidth !== void 0 && props.maxWidth !== null) {
      const styleFromPropValue = (propValue) => {
        var _props$theme, _props$theme$breakpoi, _props$theme$breakpoi2;
        const breakpoint = ((_props$theme = props.theme) == null ? void 0 : (_props$theme$breakpoi = _props$theme.breakpoints) == null ? void 0 : (_props$theme$breakpoi2 = _props$theme$breakpoi.values) == null ? void 0 : _props$theme$breakpoi2[propValue]) || values[propValue];
        return {
          maxWidth: breakpoint || transform(propValue)
        };
      };
      return handleBreakpoints(props, props.maxWidth, styleFromPropValue);
    }
    return null;
  };
  maxWidth.filterProps = ["maxWidth"];
  var minWidth = style_default({
    prop: "minWidth",
    transform
  });
  var height = style_default({
    prop: "height",
    transform
  });
  var maxHeight = style_default({
    prop: "maxHeight",
    transform
  });
  var minHeight = style_default({
    prop: "minHeight",
    transform
  });
  var sizeWidth = style_default({
    prop: "size",
    cssProperty: "width",
    transform
  });
  var sizeHeight = style_default({
    prop: "size",
    cssProperty: "height",
    transform
  });
  var boxSizing = style_default({
    prop: "boxSizing"
  });
  var sizing = compose_default(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
  var sizing_default = sizing;

  // node_modules/@mui/system/esm/typography.js
  var fontFamily = style_default({
    prop: "fontFamily",
    themeKey: "typography"
  });
  var fontSize = style_default({
    prop: "fontSize",
    themeKey: "typography"
  });
  var fontStyle = style_default({
    prop: "fontStyle",
    themeKey: "typography"
  });
  var fontWeight = style_default({
    prop: "fontWeight",
    themeKey: "typography"
  });
  var letterSpacing = style_default({
    prop: "letterSpacing"
  });
  var lineHeight = style_default({
    prop: "lineHeight"
  });
  var textAlign = style_default({
    prop: "textAlign"
  });
  var typographyVariant = style_default({
    prop: "typography",
    cssProperty: false,
    themeKey: "typography"
  });
  var typography = compose_default(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);
  var typography_default = typography;

  // node_modules/@mui/system/esm/getThemeValue.js
  var filterPropsMapping = {
    borders: borders_default.filterProps,
    display: display_default.filterProps,
    flexbox: flexbox_default.filterProps,
    grid: grid_default.filterProps,
    positions: positions_default.filterProps,
    palette: palette_default.filterProps,
    shadows: shadows_default.filterProps,
    sizing: sizing_default.filterProps,
    spacing: spacing_default.filterProps,
    typography: typography_default.filterProps
  };
  var styleFunctionMapping = {
    borders: borders_default,
    display: display_default,
    flexbox: flexbox_default,
    grid: grid_default,
    positions: positions_default,
    palette: palette_default,
    shadows: shadows_default,
    sizing: sizing_default,
    spacing: spacing_default,
    typography: typography_default
  };
  var propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
    filterPropsMapping[styleFnName].forEach((propName) => {
      acc[propName] = styleFunctionMapping[styleFnName];
    });
    return acc;
  }, {});
  function getThemeValue(prop, value, theme) {
    const inputProps = {
      [prop]: value,
      theme
    };
    const styleFunction = propToStyleFunction[prop];
    return styleFunction ? styleFunction(inputProps) : {
      [prop]: value
    };
  }
  var getThemeValue_default = getThemeValue;

  // node_modules/@mui/system/esm/styleFunctionSx/styleFunctionSx.js
  function objectsHaveSameKeys(...objects) {
    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
    const union = new Set(allKeys);
    return objects.every((object) => union.size === Object.keys(object).length);
  }
  function callIfFn(maybeFn, arg) {
    return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
  }
  function styleFunctionSx(props) {
    const {
      sx,
      theme = {}
    } = props || {};
    if (!sx) {
      return null;
    }
    function traverse(sxInput) {
      let sxObject = sxInput;
      if (typeof sxInput === "function") {
        sxObject = sxInput(theme);
      } else if (typeof sxInput !== "object") {
        return sxInput;
      }
      const emptyBreakpoints = createEmptyBreakpointObject(theme.breakpoints);
      const breakpointsKeys = Object.keys(emptyBreakpoints);
      let css3 = emptyBreakpoints;
      Object.keys(sxObject).forEach((styleKey) => {
        const value = callIfFn(sxObject[styleKey], theme);
        if (value !== null && value !== void 0) {
          if (typeof value === "object") {
            if (propToStyleFunction[styleKey]) {
              css3 = merge_default(css3, getThemeValue_default(styleKey, value, theme));
            } else {
              const breakpointsValues = handleBreakpoints({
                theme
              }, value, (x) => ({
                [styleKey]: x
              }));
              if (objectsHaveSameKeys(breakpointsValues, value)) {
                css3[styleKey] = styleFunctionSx({
                  sx: value,
                  theme
                });
              } else {
                css3 = merge_default(css3, breakpointsValues);
              }
            }
          } else {
            css3 = merge_default(css3, getThemeValue_default(styleKey, value, theme));
          }
        }
      });
      return removeUnusedBreakpoints(breakpointsKeys, css3);
    }
    return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
  }
  styleFunctionSx.filterProps = ["sx"];
  var styleFunctionSx_default = styleFunctionSx;

  // node_modules/@mui/system/esm/createTheme/createBreakpoints.js
  var _excluded4 = ["values", "unit", "step"];
  function createBreakpoints(breakpoints) {
    const {
      values: values2 = {
        xs: 0,
        sm: 600,
        md: 900,
        lg: 1200,
        xl: 1536
      },
      unit = "px",
      step = 5
    } = breakpoints, other = _objectWithoutPropertiesLoose(breakpoints, _excluded4);
    const keys = Object.keys(values2);
    function up(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (min-width:${value}${unit})`;
    }
    function down(key) {
      const value = typeof values2[key] === "number" ? values2[key] : key;
      return `@media (max-width:${value - step / 100}${unit})`;
    }
    function between(start, end) {
      const endIndex = keys.indexOf(end);
      return `@media (min-width:${typeof values2[start] === "number" ? values2[start] : start}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys[endIndex]] === "number" ? values2[keys[endIndex]] : end) - step / 100}${unit})`;
    }
    function only(key) {
      if (keys.indexOf(key) + 1 < keys.length) {
        return between(key, keys[keys.indexOf(key) + 1]);
      }
      return up(key);
    }
    function not(key) {
      const keyIndex = keys.indexOf(key);
      if (keyIndex === 0) {
        return up(keys[1]);
      }
      if (keyIndex === keys.length - 1) {
        return down(keys[keyIndex]);
      }
      return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
    }
    return _extends({
      keys,
      values: values2,
      up,
      down,
      between,
      only,
      not,
      unit
    }, other);
  }

  // node_modules/@mui/system/esm/createTheme/shape.js
  var shape = {
    borderRadius: 4
  };
  var shape_default = shape;

  // node_modules/@mui/system/esm/createTheme/createSpacing.js
  function createSpacing(spacingInput = 8) {
    if (spacingInput.mui) {
      return spacingInput;
    }
    const transform2 = createUnarySpacing({
      spacing: spacingInput
    });
    const spacing2 = (...argsInput) => {
      if (true) {
        if (!(argsInput.length <= 4)) {
          console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
        }
      }
      const args = argsInput.length === 0 ? [1] : argsInput;
      return args.map((argument) => {
        const output = transform2(argument);
        return typeof output === "number" ? `${output}px` : output;
      }).join(" ");
    };
    spacing2.mui = true;
    return spacing2;
  }

  // node_modules/@mui/system/esm/createTheme/createTheme.js
  var _excluded5 = ["breakpoints", "palette", "spacing", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      breakpoints: breakpointsInput = {},
      palette: paletteInput = {},
      spacing: spacingInput,
      shape: shapeInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded5);
    const breakpoints = createBreakpoints(breakpointsInput);
    const spacing2 = createSpacing(spacingInput);
    let muiTheme = deepmerge({
      breakpoints,
      direction: "ltr",
      components: {},
      palette: _extends({
        mode: "light"
      }, paletteInput),
      spacing: spacing2,
      shape: _extends({}, shape_default, shapeInput)
    }, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    return muiTheme;
  }
  var createTheme_default = createTheme;

  // node_modules/@mui/private-theming/useTheme/ThemeContext.js
  var React13 = __toESM(require_react());
  var ThemeContext2 = /* @__PURE__ */ React13.createContext(null);
  if (true) {
    ThemeContext2.displayName = "ThemeContext";
  }
  var ThemeContext_default = ThemeContext2;

  // node_modules/@mui/private-theming/useTheme/useTheme.js
  var React14 = __toESM(require_react());
  function useTheme2() {
    const theme = React14.useContext(ThemeContext_default);
    if (true) {
      React14.useDebugValue(theme);
    }
    return theme;
  }

  // node_modules/@mui/system/esm/useThemeWithoutDefault.js
  function isObjectEmpty(obj) {
    return Object.keys(obj).length === 0;
  }
  function useTheme3(defaultTheme2 = null) {
    const contextTheme = useTheme2();
    return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme2 : contextTheme;
  }
  var useThemeWithoutDefault_default = useTheme3;

  // node_modules/@mui/system/esm/useTheme.js
  var systemDefaultTheme = createTheme_default();
  function useTheme4(defaultTheme2 = systemDefaultTheme) {
    return useThemeWithoutDefault_default(defaultTheme2);
  }
  var useTheme_default = useTheme4;

  // node_modules/@mui/system/esm/propsToClassKey.js
  var _excluded6 = ["variant"];
  function isEmpty2(string) {
    return string.length === 0;
  }
  function propsToClassKey(props) {
    const {
      variant
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded6);
    let classKey = variant || "";
    Object.keys(other).sort().forEach((key) => {
      if (key === "color") {
        classKey += isEmpty2(classKey) ? props[key] : capitalize(props[key]);
      } else {
        classKey += `${isEmpty2(classKey) ? key : capitalize(key)}${capitalize(props[key].toString())}`;
      }
    });
    return classKey;
  }

  // node_modules/@mui/system/esm/createStyled.js
  var _excluded7 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
  var _excluded22 = ["theme"];
  var _excluded32 = ["theme"];
  function isEmpty3(obj) {
    return Object.keys(obj).length === 0;
  }
  var getStyleOverrides = (name, theme) => {
    if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
      return theme.components[name].styleOverrides;
    }
    return null;
  };
  var getVariantStyles = (name, theme) => {
    let variants = [];
    if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
      variants = theme.components[name].variants;
    }
    const variantsStyles = {};
    variants.forEach((definition) => {
      const key = propsToClassKey(definition.props);
      variantsStyles[key] = definition.style;
    });
    return variantsStyles;
  };
  var variantsResolver = (props, styles4, theme, name) => {
    var _theme$components, _theme$components$nam;
    const {
      ownerState = {}
    } = props;
    const variantsStyles = [];
    const themeVariants = theme == null ? void 0 : (_theme$components = theme.components) == null ? void 0 : (_theme$components$nam = _theme$components[name]) == null ? void 0 : _theme$components$nam.variants;
    if (themeVariants) {
      themeVariants.forEach((themeVariant) => {
        let isMatch = true;
        Object.keys(themeVariant.props).forEach((key) => {
          if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
            isMatch = false;
          }
        });
        if (isMatch) {
          variantsStyles.push(styles4[propsToClassKey(themeVariant.props)]);
        }
      });
    }
    return variantsStyles;
  };
  function shouldForwardProp(prop) {
    return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
  }
  var systemDefaultTheme2 = createTheme_default();
  var lowercaseFirstLetter = (string) => {
    return string.charAt(0).toLowerCase() + string.slice(1);
  };
  function createStyled3(input = {}) {
    const {
      defaultTheme: defaultTheme2 = systemDefaultTheme2,
      rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp,
      slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp
    } = input;
    return (tag, inputOptions = {}) => {
      const {
        name: componentName,
        slot: componentSlot,
        skipVariantsResolver: inputSkipVariantsResolver,
        skipSx: inputSkipSx,
        overridesResolver
      } = inputOptions, options = _objectWithoutPropertiesLoose(inputOptions, _excluded7);
      const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : componentSlot && componentSlot !== "Root" || false;
      const skipSx = inputSkipSx || false;
      let label;
      if (true) {
        if (componentName) {
          label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
        }
      }
      let shouldForwardPropOption = shouldForwardProp;
      if (componentSlot === "Root") {
        shouldForwardPropOption = rootShouldForwardProp2;
      } else if (componentSlot) {
        shouldForwardPropOption = slotShouldForwardProp2;
      }
      const defaultStyledResolver = styled(tag, _extends({
        shouldForwardProp: shouldForwardPropOption,
        label
      }, options));
      const muiStyledResolver = (styleArg, ...expressions) => {
        const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
          return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? (_ref) => {
            let {
              theme: themeInput
            } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded22);
            return stylesArg(_extends({
              theme: isEmpty3(themeInput) ? defaultTheme2 : themeInput
            }, other));
          } : stylesArg;
        }) : [];
        let transformedStyleArg = styleArg;
        if (componentName && overridesResolver) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = isEmpty3(props.theme) ? defaultTheme2 : props.theme;
            const styleOverrides = getStyleOverrides(componentName, theme);
            if (styleOverrides) {
              return overridesResolver(props, styleOverrides);
            }
            return null;
          });
        }
        if (componentName && !skipVariantsResolver) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = isEmpty3(props.theme) ? defaultTheme2 : props.theme;
            return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
          });
        }
        if (!skipSx) {
          expressionsWithDefaultTheme.push((props) => {
            const theme = isEmpty3(props.theme) ? defaultTheme2 : props.theme;
            return styleFunctionSx_default(_extends({}, props, {
              theme
            }));
          });
        }
        const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
        if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
          const placeholders = new Array(numOfCustomFnsApplied).fill("");
          transformedStyleArg = [...styleArg, ...placeholders];
          transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
        } else if (typeof styleArg === "function") {
          transformedStyleArg = (_ref2) => {
            let {
              theme: themeInput
            } = _ref2, other = _objectWithoutPropertiesLoose(_ref2, _excluded32);
            return styleArg(_extends({
              theme: isEmpty3(themeInput) ? defaultTheme2 : themeInput
            }, other));
          };
        }
        const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
        if (true) {
          let displayName;
          if (componentName) {
            displayName = `${componentName}${componentSlot || ""}`;
          }
          if (displayName === void 0) {
            displayName = `Styled(${getDisplayName(tag)})`;
          }
          Component.displayName = displayName;
        }
        return Component;
      };
      return muiStyledResolver;
    };
  }

  // node_modules/@mui/system/esm/useThemeProps/getThemeProps.js
  function getThemeProps(params) {
    const {
      theme,
      name,
      props
    } = params;
    if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
      return props;
    }
    return resolveProps(theme.components[name].defaultProps, props);
  }

  // node_modules/@mui/system/esm/useThemeProps/useThemeProps.js
  function useThemeProps({
    props,
    name,
    defaultTheme: defaultTheme2
  }) {
    const theme = useTheme_default(defaultTheme2);
    const mergedProps = getThemeProps({
      theme,
      name,
      props
    });
    return mergedProps;
  }

  // node_modules/@mui/system/esm/colorManipulator.js
  function clamp(value, min = 0, max = 1) {
    if (true) {
      if (value < min || value > max) {
        console.error(`MUI: The value provided ${value} is out of range [${min}, ${max}].`);
      }
    }
    return Math.min(Math.max(min, value), max);
  }
  function hexToRgb(color2) {
    color2 = color2.substr(1);
    const re = new RegExp(`.{1,${color2.length >= 6 ? 2 : 1}}`, "g");
    let colors = color2.match(re);
    if (colors && colors[0].length === 1) {
      colors = colors.map((n) => n + n);
    }
    return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index) => {
      return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
    }).join(", ")})` : "";
  }
  function decomposeColor(color2) {
    if (color2.type) {
      return color2;
    }
    if (color2.charAt(0) === "#") {
      return decomposeColor(hexToRgb(color2));
    }
    const marker = color2.indexOf("(");
    const type = color2.substring(0, marker);
    if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
      throw new Error(true ? `MUI: Unsupported \`${color2}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : formatMuiErrorMessage(9, color2));
    }
    let values2 = color2.substring(marker + 1, color2.length - 1);
    let colorSpace;
    if (type === "color") {
      values2 = values2.split(" ");
      colorSpace = values2.shift();
      if (values2.length === 4 && values2[3].charAt(0) === "/") {
        values2[3] = values2[3].substr(1);
      }
      if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
        throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : formatMuiErrorMessage(10, colorSpace));
      }
    } else {
      values2 = values2.split(",");
    }
    values2 = values2.map((value) => parseFloat(value));
    return {
      type,
      values: values2,
      colorSpace
    };
  }
  function recomposeColor(color2) {
    const {
      type,
      colorSpace
    } = color2;
    let {
      values: values2
    } = color2;
    if (type.indexOf("rgb") !== -1) {
      values2 = values2.map((n, i) => i < 3 ? parseInt(n, 10) : n);
    } else if (type.indexOf("hsl") !== -1) {
      values2[1] = `${values2[1]}%`;
      values2[2] = `${values2[2]}%`;
    }
    if (type.indexOf("color") !== -1) {
      values2 = `${colorSpace} ${values2.join(" ")}`;
    } else {
      values2 = `${values2.join(", ")}`;
    }
    return `${type}(${values2})`;
  }
  function hslToRgb(color2) {
    color2 = decomposeColor(color2);
    const {
      values: values2
    } = color2;
    const h = values2[0];
    const s = values2[1] / 100;
    const l = values2[2] / 100;
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    let type = "rgb";
    const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
    if (color2.type === "hsla") {
      type += "a";
      rgb.push(values2[3]);
    }
    return recomposeColor({
      type,
      values: rgb
    });
  }
  function getLuminance(color2) {
    color2 = decomposeColor(color2);
    let rgb = color2.type === "hsl" ? decomposeColor(hslToRgb(color2)).values : color2.values;
    rgb = rgb.map((val) => {
      if (color2.type !== "color") {
        val /= 255;
      }
      return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
    });
    return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
  }
  function getContrastRatio(foreground, background) {
    const lumA = getLuminance(foreground);
    const lumB = getLuminance(background);
    return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
  }
  function alpha(color2, value) {
    color2 = decomposeColor(color2);
    value = clamp(value);
    if (color2.type === "rgb" || color2.type === "hsl") {
      color2.type += "a";
    }
    if (color2.type === "color") {
      color2.values[3] = `/${value}`;
    } else {
      color2.values[3] = value;
    }
    return recomposeColor(color2);
  }
  function darken(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] *= 1 - coefficient;
    } else if (color2.type.indexOf("rgb") !== -1 || color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] *= 1 - coefficient;
      }
    }
    return recomposeColor(color2);
  }
  function lighten(color2, coefficient) {
    color2 = decomposeColor(color2);
    coefficient = clamp(coefficient);
    if (color2.type.indexOf("hsl") !== -1) {
      color2.values[2] += (100 - color2.values[2]) * coefficient;
    } else if (color2.type.indexOf("rgb") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (255 - color2.values[i]) * coefficient;
      }
    } else if (color2.type.indexOf("color") !== -1) {
      for (let i = 0; i < 3; i += 1) {
        color2.values[i] += (1 - color2.values[i]) * coefficient;
      }
    }
    return recomposeColor(color2);
  }

  // node_modules/@mui/material/styles/createMixins.js
  function createMixins(breakpoints, spacing2, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [`${breakpoints.up("xs")} and (orientation: landscape)`]: {
          minHeight: 48
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  // node_modules/@mui/material/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@mui/material/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@mui/material/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // node_modules/@mui/material/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@mui/material/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@mui/material/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@mui/material/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // node_modules/@mui/material/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@mui/material/styles/createPalette.js
  var _excluded8 = ["mode", "contrastThreshold", "tonalOffset"];
  var light = {
    text: {
      primary: "rgba(0, 0, 0, 0.87)",
      secondary: "rgba(0, 0, 0, 0.6)",
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    divider: "rgba(0, 0, 0, 0.12)",
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    action: {
      active: "rgba(0, 0, 0, 0.54)",
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      disabled: "rgba(0, 0, 0, 0.26)",
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = lighten(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = darken(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette2) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette2, other = _objectWithoutPropertiesLoose(palette2, _excluded8);
    const primary = palette2.primary || getDefaultPrimary(mode);
    const secondary = palette2.secondary || getDefaultSecondary(mode);
    const error = palette2.error || getDefaultError(mode);
    const info = palette2.info || getDefaultInfo(mode);
    const success = palette2.success || getDefaultSuccess(mode);
    const warning = palette2.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = getContrastRatio(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color: color2,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color2 = _extends({}, color2);
      if (!color2.main && color2[mainShade]) {
        color2.main = color2[mainShade];
      }
      if (!color2.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : formatMuiErrorMessage(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color2.main !== "string") {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color2.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : formatMuiErrorMessage(12, name ? ` (${name})` : "", JSON.stringify(color2.main)));
      }
      addLightOrDark(color2, "light", lightShade, tonalOffset);
      addLightOrDark(color2, "dark", darkShade, tonalOffset);
      if (!color2.contrastText) {
        color2.contrastText = getContrastText(color2.main);
      }
      return color2;
    };
    const modes = {
      dark,
      light
    };
    if (true) {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = deepmerge(_extends({
      common: common_default,
      mode,
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      error: augmentColor({
        color: error,
        name: "error"
      }),
      warning: augmentColor({
        color: warning,
        name: "warning"
      }),
      info: augmentColor({
        color: info,
        name: "info"
      }),
      success: augmentColor({
        color: success,
        name: "success"
      }),
      grey: grey_default,
      contrastThreshold,
      getContrastText,
      augmentColor,
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  // node_modules/@mui/material/styles/createTypography.js
  var _excluded9 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette2, typography2) {
    const _ref = typeof typography2 === "function" ? typography2(palette2) : typography2, {
      fontFamily: fontFamily2 = defaultFontFamily,
      fontSize: fontSize2 = 14,
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      htmlFontSize = 16,
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded9);
    if (true) {
      if (typeof fontSize2 !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize2 / 14;
    const pxToRem = pxToRem2 || ((size) => `${size / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight2, size, lineHeight2, letterSpacing2, casing) => _extends({
      fontFamily: fontFamily2,
      fontWeight: fontWeight2,
      fontSize: pxToRem(size),
      lineHeight: lineHeight2
    }, fontFamily2 === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing2 / size)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
    };
    return deepmerge(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily: fontFamily2,
      fontSize: fontSize2,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
    });
  }

  // node_modules/@mui/material/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px) {
    return [`${px[0]}px ${px[1]}px ${px[2]}px ${px[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px[4]}px ${px[5]}px ${px[6]}px ${px[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px[8]}px ${px[9]}px ${px[10]}px ${px[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default2 = shadows;

  // node_modules/@mui/material/styles/createTransitions.js
  var _excluded10 = ["duration", "easing", "delay"];
  var easing = {
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    standard: 300,
    complex: 375,
    enteringScreen: 225,
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height2) {
    if (!height2) {
      return 0;
    }
    const constant = height2 / 36;
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded10);
      if (true) {
        const isString = (value) => typeof value === "string";
        const isNumber = (value) => !isNaN(parseFloat(value));
        if (!isString(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber(durationOption) && !isString(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber(delay) && !isString(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // node_modules/@mui/material/styles/zIndex.js
  var zIndex2 = {
    mobileStepper: 1e3,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex2;

  // node_modules/@mui/material/styles/createTheme.js
  var _excluded11 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme2(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded11);
    const palette2 = createPalette(paletteInput);
    const systemTheme = createTheme_default(options);
    let muiTheme = deepmerge(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, systemTheme.spacing, mixinsInput),
      palette: palette2,
      shadows: shadows_default2.slice(),
      typography: createTypography(palette2, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex_default)
    });
    muiTheme = deepmerge(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => deepmerge(acc, argument), muiTheme);
    if (true) {
      const stateClasses = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = generateUtilityClass("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    return muiTheme;
  }
  var createTheme_default2 = createTheme2;

  // node_modules/@mui/material/styles/defaultTheme.js
  var defaultTheme = createTheme_default2();
  var defaultTheme_default = defaultTheme;

  // node_modules/@mui/material/styles/styled.js
  var rootShouldForwardProp = (prop) => shouldForwardProp(prop) && prop !== "classes";
  var slotShouldForwardProp = shouldForwardProp;
  var styled2 = createStyled3({
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp
  });
  var styled_default = styled2;

  // node_modules/@mui/material/styles/useThemeProps.js
  function useThemeProps2({
    props,
    name
  }) {
    return useThemeProps({
      props,
      name,
      defaultTheme: defaultTheme_default
    });
  }

  // node_modules/@mui/material/Input/Input.js
  var React19 = __toESM(require_react());
  var import_prop_types13 = __toESM(require_prop_types());

  // node_modules/@mui/material/InputBase/InputBase.js
  var React18 = __toESM(require_react());
  var import_prop_types12 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormControl/formControlState.js
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/FormControl/FormControlContext.js
  var React15 = __toESM(require_react());
  var FormControlContext = /* @__PURE__ */ React15.createContext();
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }
  var FormControlContext_default = FormControlContext;

  // node_modules/@mui/material/FormControl/useFormControl.js
  var React16 = __toESM(require_react());
  function useFormControl() {
    return React16.useContext(FormControlContext_default);
  }

  // node_modules/@mui/material/utils/capitalize.js
  var capitalize_default = capitalize;

  // node_modules/@mui/material/utils/useForkRef.js
  var useForkRef_default = useForkRef;

  // node_modules/@mui/material/utils/useEnhancedEffect.js
  var useEnhancedEffect_default2 = useEnhancedEffect_default;

  // node_modules/@mui/material/GlobalStyles/GlobalStyles.js
  var React17 = __toESM(require_react());
  var import_prop_types11 = __toESM(require_prop_types());
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  function GlobalStyles2(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(GlobalStyles, _extends({}, props, {
      defaultTheme: defaultTheme_default
    }));
  }
  true ? GlobalStyles2.propTypes = {
    styles: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.number, import_prop_types11.default.object, import_prop_types11.default.shape({
      __emotion_styles: import_prop_types11.default.any.isRequired
    }), import_prop_types11.default.string, import_prop_types11.default.bool])
  } : void 0;
  var GlobalStyles_default = GlobalStyles2;

  // node_modules/@mui/material/InputBase/utils.js
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue(obj.value) && obj.value !== "" || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@mui/material/InputBase/inputBaseClasses.js
  function getInputBaseUtilityClass(slot) {
    return generateUtilityClass("MuiInputBase", slot);
  }
  var inputBaseClasses = generateUtilityClasses("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  var inputBaseClasses_default = inputBaseClasses;

  // node_modules/@mui/material/InputBase/InputBase.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var _excluded12 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "startAdornment", "type", "value"];
  var rootOverridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.root, ownerState.formControl && styles4.formControl, ownerState.startAdornment && styles4.adornedStart, ownerState.endAdornment && styles4.adornedEnd, ownerState.error && styles4.error, ownerState.size === "small" && styles4.sizeSmall, ownerState.multiline && styles4.multiline, ownerState.color && styles4[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles4.fullWidth, ownerState.hiddenLabel && styles4.hiddenLabel];
  };
  var inputOverridesResolver = (props, styles4) => {
    const {
      ownerState
    } = props;
    return [styles4.input, ownerState.size === "small" && styles4.inputSizeSmall, ownerState.multiline && styles4.inputMultiline, ownerState.type === "search" && styles4.inputTypeSearch, ownerState.startAdornment && styles4.inputAdornedStart, ownerState.endAdornment && styles4.inputAdornedEnd, ownerState.hiddenLabel && styles4.inputHiddenLabel];
  };
  var useUtilityClasses3 = (ownerState) => {
    const {
      classes,
      color: color2,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      size,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size === "small" && "sizeSmall", multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd"]
    };
    return composeClasses(slots, getInputBaseUtilityClass, classes);
  };
  var InputBaseRoot = styled_default("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    color: theme.palette.text.primary,
    lineHeight: "1.4375em",
    boxSizing: "border-box",
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses_default.disabled}`]: {
      color: theme.palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  var InputBaseComponent = styled_default("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const placeholder = {
      color: "currentColor",
      opacity: light2 ? 0.42 : 0.5,
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    };
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      margin: 0,
      WebkitTapHighlightColor: "transparent",
      display: "block",
      minWidth: 0,
      width: "100%",
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      "&:-ms-input-placeholder": placeholder,
      "&::-ms-input-placeholder": placeholder,
      "&:focus": {
        outline: 0
      },
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        WebkitAppearance: "none"
      },
      [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        "&:-ms-input-placeholder": placeholderHidden,
        "&::-ms-input-placeholder": placeholderHidden,
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        "&:focus:-ms-input-placeholder": placeholderVisible,
        "&:focus::-ms-input-placeholder": placeholderVisible
      },
      [`&.${inputBaseClasses_default.disabled}`]: {
        opacity: 1,
        WebkitTextFillColor: theme.palette.text.disabled
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      MozAppearance: "textfield"
    });
  });
  var inputGlobalStyles = /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(GlobalStyles_default, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  var InputBase = /* @__PURE__ */ React18.forwardRef(function InputBase2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick: onClick2,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React18.useRef(value != null);
    const inputRef = React18.useRef();
    const handleInputRefWarning = React18.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputPropsRefProp = useForkRef_default(inputPropsProp.ref, handleInputRefWarning);
    const handleInputRefProp = useForkRef_default(inputRefProp, handleInputPropsRefProp);
    const handleInputRef = useForkRef_default(inputRef, handleInputRefProp);
    const [focused, setFocused] = React18.useState(false);
    const muiFormControl = useFormControl();
    if (true) {
      React18.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React18.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React18.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect_default2(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : formatMuiErrorMessage(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React18.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick2) {
        onClick2(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (true) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends({
          type: void 0,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize_default;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React18.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes = useUtilityClasses3(ownerState);
    const Root = components.Root || InputBaseRoot;
    const rootProps = componentsProps.root || {};
    const Input3 = components.Input || InputBaseComponent;
    inputProps = _extends({}, inputProps, componentsProps.input);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(React18.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(Root, _extends({}, rootProps, !isHostComponent_default(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx_m_default(classes.root, rootProps.className, className),
        children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(FormControlContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Input3, _extends({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent_default(Input3) && {
            as: InputComponent,
            ownerState: _extends({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx_m_default(classes.input, inputProps.className),
            onBlur: handleBlur,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  true ? InputBase.propTypes = {
    "aria-describedby": import_prop_types12.default.string,
    autoComplete: import_prop_types12.default.string,
    autoFocus: import_prop_types12.default.bool,
    classes: import_prop_types12.default.object,
    className: import_prop_types12.default.string,
    color: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types12.default.string]),
    components: import_prop_types12.default.shape({
      Input: import_prop_types12.default.elementType,
      Root: import_prop_types12.default.elementType
    }),
    componentsProps: import_prop_types12.default.shape({
      input: import_prop_types12.default.object,
      root: import_prop_types12.default.object
    }),
    defaultValue: import_prop_types12.default.any,
    disabled: import_prop_types12.default.bool,
    disableInjectingGlobalStyles: import_prop_types12.default.bool,
    endAdornment: import_prop_types12.default.node,
    error: import_prop_types12.default.bool,
    fullWidth: import_prop_types12.default.bool,
    id: import_prop_types12.default.string,
    inputComponent: elementTypeAcceptingRef_default,
    inputProps: import_prop_types12.default.object,
    inputRef: refType_default,
    margin: import_prop_types12.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    minRows: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    multiline: import_prop_types12.default.bool,
    name: import_prop_types12.default.string,
    onBlur: import_prop_types12.default.func,
    onChange: import_prop_types12.default.func,
    onClick: import_prop_types12.default.func,
    onFocus: import_prop_types12.default.func,
    onKeyDown: import_prop_types12.default.func,
    onKeyUp: import_prop_types12.default.func,
    placeholder: import_prop_types12.default.string,
    readOnly: import_prop_types12.default.bool,
    renderSuffix: import_prop_types12.default.func,
    required: import_prop_types12.default.bool,
    rows: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
    size: import_prop_types12.default.oneOfType([import_prop_types12.default.oneOf(["medium", "small"]), import_prop_types12.default.string]),
    startAdornment: import_prop_types12.default.node,
    sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object]),
    type: import_prop_types12.default.string,
    value: import_prop_types12.default.any
  } : void 0;
  var InputBase_default = InputBase;

  // node_modules/@mui/material/Input/inputClasses.js
  function getInputUtilityClass(slot) {
    return generateUtilityClass("MuiInput", slot);
  }
  var inputClasses = generateUtilityClasses("MuiInput", ["root", "formControl", "focused", "disabled", "colorSecondary", "underline", "error", "sizeSmall", "multiline", "fullWidth", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch"]);
  var inputClasses_default = inputClasses;

  // node_modules/@mui/material/Input/Input.js
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var _excluded13 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "type"];
  var useUtilityClasses4 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles4), !ownerState.disableUnderline && styles4.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    return _extends({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${theme.palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
      },
      [`&.${inputClasses_default.focused}:after`]: {
        transform: "scaleX(1)"
      },
      [`&.${inputClasses_default.error}:after`]: {
        borderBottomColor: theme.palette.error.main,
        transform: "scaleX(1)"
      },
      "&:before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
      },
      [`&:hover:not(.${inputClasses_default.disabled}):before`]: {
        borderBottom: `2px solid ${theme.palette.text.primary}`,
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  var InputInput = styled_default(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  var Input = /* @__PURE__ */ React19.forwardRef(function Input2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
    const classes = useUtilityClasses4(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = componentsPropsProp ? deepmerge(componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(InputBase_default, _extends({
      components: _extends({
        Root: InputRoot,
        Input: InputInput
      }, components),
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? Input.propTypes = {
    autoComplete: import_prop_types13.default.string,
    autoFocus: import_prop_types13.default.bool,
    classes: import_prop_types13.default.object,
    color: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["primary", "secondary"]), import_prop_types13.default.string]),
    components: import_prop_types13.default.shape({
      Input: import_prop_types13.default.elementType,
      Root: import_prop_types13.default.elementType
    }),
    componentsProps: import_prop_types13.default.shape({
      input: import_prop_types13.default.object,
      root: import_prop_types13.default.object
    }),
    defaultValue: import_prop_types13.default.any,
    disabled: import_prop_types13.default.bool,
    disableUnderline: import_prop_types13.default.bool,
    endAdornment: import_prop_types13.default.node,
    error: import_prop_types13.default.bool,
    fullWidth: import_prop_types13.default.bool,
    id: import_prop_types13.default.string,
    inputComponent: import_prop_types13.default.elementType,
    inputProps: import_prop_types13.default.object,
    inputRef: refType_default,
    margin: import_prop_types13.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    minRows: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    multiline: import_prop_types13.default.bool,
    name: import_prop_types13.default.string,
    onChange: import_prop_types13.default.func,
    placeholder: import_prop_types13.default.string,
    readOnly: import_prop_types13.default.bool,
    required: import_prop_types13.default.bool,
    rows: import_prop_types13.default.oneOfType([import_prop_types13.default.number, import_prop_types13.default.string]),
    startAdornment: import_prop_types13.default.node,
    sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
    type: import_prop_types13.default.string,
    value: import_prop_types13.default.any
  } : void 0;
  Input.muiName = "Input";
  var Input_default = Input;

  // node_modules/@mui/material/FilledInput/FilledInput.js
  var React20 = __toESM(require_react());
  var import_prop_types14 = __toESM(require_prop_types());

  // node_modules/@mui/material/FilledInput/filledInputClasses.js
  function getFilledInputUtilityClass(slot) {
    return generateUtilityClass("MuiFilledInput", slot);
  }
  var filledInputClasses = generateUtilityClasses("MuiFilledInput", ["root", "colorSecondary", "underline", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "hiddenLabel", "input", "inputSizeSmall", "inputHiddenLabel", "inputMultiline", "inputAdornedStart", "inputAdornedEnd"]);
  var filledInputClasses_default = filledInputClasses;

  // node_modules/@mui/material/FilledInput/FilledInput.js
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var _excluded14 = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "type"];
  var useUtilityClasses5 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getFilledInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var FilledInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles4), !ownerState.disableUnderline && styles4.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor2 = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    return _extends({
      position: "relative",
      backgroundColor: backgroundColor2,
      borderTopLeftRadius: theme.shape.borderRadius,
      borderTopRightRadius: theme.shape.borderRadius,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)",
        "@media (hover: none)": {
          backgroundColor: backgroundColor2
        }
      },
      [`&.${filledInputClasses_default.focused}`]: {
        backgroundColor: backgroundColor2
      },
      [`&.${filledInputClasses_default.disabled}`]: {
        backgroundColor: light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)"
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${theme.palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
      },
      [`&.${filledInputClasses_default.focused}:after`]: {
        transform: "scaleX(1)"
      },
      [`&.${filledInputClasses_default.error}:after`]: {
        borderBottomColor: theme.palette.error.main,
        transform: "scaleX(1)"
      },
      "&:before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
      },
      [`&:hover:not(.${filledInputClasses_default.disabled}):before`]: {
        borderBottom: `1px solid ${theme.palette.text.primary}`
      },
      [`&.${filledInputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }));
  });
  var FilledInputInput = styled_default(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12,
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }));
  var FilledInput = /* @__PURE__ */ React20.forwardRef(function FilledInput2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
    const ownerState = _extends({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes = useUtilityClasses5(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = componentsPropsProp ? deepmerge(componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(InputBase_default, _extends({
      components: _extends({
        Root: FilledInputRoot,
        Input: FilledInputInput
      }, components),
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? FilledInput.propTypes = {
    autoComplete: import_prop_types14.default.string,
    autoFocus: import_prop_types14.default.bool,
    classes: import_prop_types14.default.object,
    color: import_prop_types14.default.oneOfType([import_prop_types14.default.oneOf(["primary", "secondary"]), import_prop_types14.default.string]),
    components: import_prop_types14.default.shape({
      Input: import_prop_types14.default.elementType,
      Root: import_prop_types14.default.elementType
    }),
    componentsProps: import_prop_types14.default.shape({
      input: import_prop_types14.default.object,
      root: import_prop_types14.default.object
    }),
    defaultValue: import_prop_types14.default.any,
    disabled: import_prop_types14.default.bool,
    disableUnderline: import_prop_types14.default.bool,
    endAdornment: import_prop_types14.default.node,
    error: import_prop_types14.default.bool,
    fullWidth: import_prop_types14.default.bool,
    hiddenLabel: import_prop_types14.default.bool,
    id: import_prop_types14.default.string,
    inputComponent: import_prop_types14.default.elementType,
    inputProps: import_prop_types14.default.object,
    inputRef: refType_default,
    margin: import_prop_types14.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    minRows: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    multiline: import_prop_types14.default.bool,
    name: import_prop_types14.default.string,
    onChange: import_prop_types14.default.func,
    placeholder: import_prop_types14.default.string,
    readOnly: import_prop_types14.default.bool,
    required: import_prop_types14.default.bool,
    rows: import_prop_types14.default.oneOfType([import_prop_types14.default.number, import_prop_types14.default.string]),
    startAdornment: import_prop_types14.default.node,
    sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object]),
    type: import_prop_types14.default.string,
    value: import_prop_types14.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = FilledInput;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var React22 = __toESM(require_react());
  var import_prop_types16 = __toESM(require_prop_types());

  // node_modules/@mui/material/OutlinedInput/NotchedOutline.js
  var React21 = __toESM(require_react());
  var import_prop_types15 = __toESM(require_prop_types());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var _excluded15 = ["children", "classes", "className", "label", "notched"];
  var NotchedOutlineRoot = styled_default("fieldset")({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  var NotchedOutlineLegend = styled_default("legend", {
    skipSx: true
  })(({
    ownerState,
    theme
  }) => _extends({
    float: "unset"
  }, ownerState.label === void 0 && {
    padding: 0,
    lineHeight: "11px",
    transition: theme.transitions.create("width", {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.label !== void 0 && _extends({
    display: "block",
    width: "auto",
    padding: 0,
    height: 11,
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme.transitions.create("max-width", {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme.transitions.create("max-width", {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
    const ownerState = _extends({}, props, {
      notched,
      label
    });
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(NotchedOutlineRoot, _extends({
      "aria-hidden": true,
      className,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(NotchedOutlineLegend, {
        ownerState,
        children: label ? /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("span", {
          children: label
        }) : /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("span", {
          className: "notranslate",
          dangerouslySetInnerHTML: {
            __html: "&#8203;"
          }
        })
      })
    }));
  }
  true ? NotchedOutline.propTypes = {
    children: import_prop_types15.default.node,
    classes: import_prop_types15.default.object,
    className: import_prop_types15.default.string,
    label: import_prop_types15.default.node,
    notched: import_prop_types15.default.bool.isRequired,
    style: import_prop_types15.default.object
  } : void 0;

  // node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
  function getOutlinedInputUtilityClass(slot) {
    return generateUtilityClass("MuiOutlinedInput", slot);
  }
  var outlinedInputClasses = generateUtilityClasses("MuiOutlinedInput", ["root", "colorSecondary", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "notchedOutline", "input", "inputSizeSmall", "inputMultiline", "inputAdornedStart", "inputAdornedEnd"]);
  var outlinedInputClasses_default = outlinedInputClasses;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var _excluded16 = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "type"];
  var useUtilityClasses6 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = composeClasses(slots, getOutlinedInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var OutlinedInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor2 = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends({
      position: "relative",
      borderRadius: theme.shape.borderRadius,
      [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: theme.palette.text.primary
      },
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
          borderColor: borderColor2
        }
      },
      [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: theme.palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses_default.error} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: theme.palette.error.main
      },
      [`&.${outlinedInputClasses_default.disabled} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: theme.palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  var NotchedOutlineRoot2 = styled_default(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles4) => styles4.notchedOutline
  })(({
    theme
  }) => ({
    borderColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"
  }));
  var OutlinedInputInput = styled_default(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    padding: "16.5px 14px",
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  var OutlinedInput = /* @__PURE__ */ React22.forwardRef(function OutlinedInput2(inProps, ref) {
    var _React$Fragment;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
    const classes = useUtilityClasses6(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["required"]
    });
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(InputBase_default, _extends({
      components: _extends({
        Root: OutlinedInputRoot,
        Input: OutlinedInputInput
      }, components),
      renderSuffix: (state) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(NotchedOutlineRoot2, {
        className: classes.notchedOutline,
        label: label && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(React22.Fragment, {
          children: [label, "\xA0", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends({}, classes, {
        notchedOutline: null
      })
    }));
  });
  true ? OutlinedInput.propTypes = {
    autoComplete: import_prop_types16.default.string,
    autoFocus: import_prop_types16.default.bool,
    classes: import_prop_types16.default.object,
    color: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["primary", "secondary"]), import_prop_types16.default.string]),
    components: import_prop_types16.default.shape({
      Input: import_prop_types16.default.elementType,
      Root: import_prop_types16.default.elementType
    }),
    defaultValue: import_prop_types16.default.any,
    disabled: import_prop_types16.default.bool,
    endAdornment: import_prop_types16.default.node,
    error: import_prop_types16.default.bool,
    fullWidth: import_prop_types16.default.bool,
    id: import_prop_types16.default.string,
    inputComponent: import_prop_types16.default.elementType,
    inputProps: import_prop_types16.default.object,
    inputRef: refType_default,
    label: import_prop_types16.default.node,
    margin: import_prop_types16.default.oneOf(["dense", "none"]),
    maxRows: import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.string]),
    minRows: import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.string]),
    multiline: import_prop_types16.default.bool,
    name: import_prop_types16.default.string,
    notched: import_prop_types16.default.bool,
    onChange: import_prop_types16.default.func,
    placeholder: import_prop_types16.default.string,
    readOnly: import_prop_types16.default.bool,
    required: import_prop_types16.default.bool,
    rows: import_prop_types16.default.oneOfType([import_prop_types16.default.number, import_prop_types16.default.string]),
    startAdornment: import_prop_types16.default.node,
    sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object]),
    type: import_prop_types16.default.string,
    value: import_prop_types16.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = OutlinedInput;

  // node_modules/@mui/material/InputLabel/InputLabel.js
  var React24 = __toESM(require_react());
  var import_prop_types18 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormLabel/FormLabel.js
  var React23 = __toESM(require_react());
  var import_prop_types17 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormLabel/formLabelClasses.js
  function getFormLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiFormLabel", slot);
  }
  var formLabelClasses = generateUtilityClasses("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  var formLabelClasses_default = formLabelClasses;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var _excluded17 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  var useUtilityClasses7 = (ownerState) => {
    const {
      classes,
      color: color2,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color2)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return composeClasses(slots, getFormLabelUtilityClasses, classes);
  };
  var FormLabelRoot = styled_default("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles4) => {
      return _extends({}, styles4.root, ownerState.color === "secondary" && styles4.colorSecondary, ownerState.filled && styles4.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: theme.palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses_default.focused}`]: {
      color: theme.palette[ownerState.color].main
    },
    [`&.${formLabelClasses_default.disabled}`]: {
      color: theme.palette.text.disabled
    },
    [`&.${formLabelClasses_default.error}`]: {
      color: theme.palette.error.main
    }
  }));
  var AsteriskComponent = styled_default("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles4) => styles4.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: theme.palette.error.main
    }
  }));
  var FormLabel = /* @__PURE__ */ React23.forwardRef(function FormLabel2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses7(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(FormLabelRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(AsteriskComponent, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: ["\u2009", "*"]
      })]
    }));
  });
  true ? FormLabel.propTypes = {
    children: import_prop_types17.default.node,
    classes: import_prop_types17.default.object,
    className: import_prop_types17.default.string,
    color: import_prop_types17.default.oneOfType([import_prop_types17.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types17.default.string]),
    component: import_prop_types17.default.elementType,
    disabled: import_prop_types17.default.bool,
    error: import_prop_types17.default.bool,
    filled: import_prop_types17.default.bool,
    focused: import_prop_types17.default.bool,
    required: import_prop_types17.default.bool,
    sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object])
  } : void 0;
  var FormLabel_default = FormLabel;

  // node_modules/@mui/material/InputLabel/inputLabelClasses.js
  function getInputLabelUtilityClasses(slot) {
    return generateUtilityClass("MuiInputLabel", slot);
  }
  var inputLabelClasses = generateUtilityClasses("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);

  // node_modules/@mui/material/InputLabel/InputLabel.js
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var _excluded18 = ["disableAnimation", "margin", "shrink", "variant"];
  var useUtilityClasses8 = (ownerState) => {
    const {
      classes,
      formControl,
      size,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size === "small" && "sizeSmall", variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = composeClasses(slots, getInputLabelUtilityClasses, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputLabelRoot = styled_default(FormLabel_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses_default.asterisk}`]: styles4.asterisk
      }, styles4.root, ownerState.formControl && styles4.formControl, ownerState.size === "small" && styles4.sizeSmall, ownerState.shrink && styles4.shrink, !ownerState.disableAnimation && styles4.animated, styles4[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(["color", "transform", "max-width"], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends({
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends({
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    maxWidth: "calc(133% - 24px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  var InputLabel = /* @__PURE__ */ React24.forwardRef(function InputLabel2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required"]
    });
    const ownerState = _extends({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required
    });
    const classes = useUtilityClasses8(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(InputLabelRoot, _extends({
      "data-shrink": shrink,
      ownerState,
      ref
    }, other, {
      classes
    }));
  });
  true ? InputLabel.propTypes = {
    children: import_prop_types18.default.node,
    classes: import_prop_types18.default.object,
    color: import_prop_types18.default.oneOfType([import_prop_types18.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types18.default.string]),
    disableAnimation: import_prop_types18.default.bool,
    disabled: import_prop_types18.default.bool,
    error: import_prop_types18.default.bool,
    focused: import_prop_types18.default.bool,
    margin: import_prop_types18.default.oneOf(["dense"]),
    required: import_prop_types18.default.bool,
    shrink: import_prop_types18.default.bool,
    sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object]),
    variant: import_prop_types18.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = InputLabel;

  // node_modules/@mui/material/FormControl/FormControl.js
  var React25 = __toESM(require_react());
  var import_prop_types19 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/isMuiElement.js
  var isMuiElement_default = isMuiElement;

  // node_modules/@mui/material/FormControl/formControlClasses.js
  function getFormControlUtilityClasses(slot) {
    return generateUtilityClass("MuiFormControl", slot);
  }
  var formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);

  // node_modules/@mui/material/FormControl/FormControl.js
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var _excluded19 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  var useUtilityClasses9 = (ownerState) => {
    const {
      classes,
      margin: margin2,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin2 !== "none" && `margin${capitalize_default(margin2)}`, fullWidth && "fullWidth"]
    };
    return composeClasses(slots, getFormControlUtilityClasses, classes);
  };
  var FormControlRoot = styled_default("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles4) => {
      return _extends({}, styles4.root, styles4[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles4.fullWidth);
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  var FormControl = /* @__PURE__ */ React25.forwardRef(function FormControl2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color: color2 = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin: margin2 = "none",
      required = false,
      size = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin: margin2,
      required,
      size,
      variant
    });
    const classes = useUtilityClasses9(ownerState);
    const [adornedStart, setAdornedStart] = React25.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React25.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React25.useState(() => {
      let initialFilled = false;
      if (children) {
        React25.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React25.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (true) {
      const registeredInput = React25.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const onFilled = React25.useCallback(() => {
      setFilled(true);
    }, []);
    const onEmpty = React25.useCallback(() => {
      setFilled(false);
    }, []);
    const childContext = {
      adornedStart,
      setAdornedStart,
      color: color2,
      disabled,
      error,
      filled,
      focused,
      fullWidth,
      hiddenLabel,
      size,
      onBlur: () => {
        setFocused(false);
      },
      onEmpty,
      onFilled,
      onFocus: () => {
        setFocused(true);
      },
      registerEffect,
      required,
      variant
    };
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(FormControlContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(FormControlRoot, _extends({
        as: component,
        ownerState,
        className: clsx_m_default(classes.root, className),
        ref
      }, other, {
        children
      }))
    });
  });
  true ? FormControl.propTypes = {
    children: import_prop_types19.default.node,
    classes: import_prop_types19.default.object,
    className: import_prop_types19.default.string,
    color: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types19.default.string]),
    component: import_prop_types19.default.elementType,
    disabled: import_prop_types19.default.bool,
    error: import_prop_types19.default.bool,
    focused: import_prop_types19.default.bool,
    fullWidth: import_prop_types19.default.bool,
    hiddenLabel: import_prop_types19.default.bool,
    margin: import_prop_types19.default.oneOf(["dense", "none", "normal"]),
    required: import_prop_types19.default.bool,
    size: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["medium", "small"]), import_prop_types19.default.string]),
    sx: import_prop_types19.default.oneOfType([import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object, import_prop_types19.default.bool])), import_prop_types19.default.func, import_prop_types19.default.object]),
    variant: import_prop_types19.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = FormControl;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  var React26 = __toESM(require_react());
  var import_prop_types20 = __toESM(require_prop_types());

  // node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
  function getFormHelperTextUtilityClasses(slot) {
    return generateUtilityClass("MuiFormHelperText", slot);
  }
  var formHelperTextClasses = generateUtilityClasses("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  var formHelperTextClasses_default = formHelperTextClasses;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var _excluded20 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  var useUtilityClasses10 = (ownerState) => {
    const {
      classes,
      contained,
      size,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size && `size${capitalize_default(size)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return composeClasses(slots, getFormHelperTextUtilityClasses, classes);
  };
  var FormHelperTextRoot = styled_default("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.size && styles4[`size${capitalize_default(ownerState.size)}`], ownerState.contained && styles4.contained, ownerState.filled && styles4.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: theme.palette.text.secondary
  }, theme.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses_default.disabled}`]: {
      color: theme.palette.text.disabled
    },
    [`&.${formHelperTextClasses_default.error}`]: {
      color: theme.palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  var FormHelperText = /* @__PURE__ */ React26.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses10(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(FormHelperTextRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other, {
      children: children === " " ? /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("span", {
        className: "notranslate",
        dangerouslySetInnerHTML: {
          __html: "&#8203;"
        }
      }) : children
    }));
  });
  true ? FormHelperText.propTypes = {
    children: import_prop_types20.default.node,
    classes: import_prop_types20.default.object,
    className: import_prop_types20.default.string,
    component: import_prop_types20.default.elementType,
    disabled: import_prop_types20.default.bool,
    error: import_prop_types20.default.bool,
    filled: import_prop_types20.default.bool,
    focused: import_prop_types20.default.bool,
    margin: import_prop_types20.default.oneOf(["dense"]),
    required: import_prop_types20.default.bool,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    variant: import_prop_types20.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormHelperText_default = FormHelperText;

  // node_modules/@mui/material/Select/Select.js
  var React45 = __toESM(require_react());
  var import_prop_types35 = __toESM(require_prop_types());

  // node_modules/@mui/material/Select/SelectInput.js
  var React41 = __toESM(require_react());
  var import_react_is4 = __toESM(require_react_is3());
  var import_prop_types33 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/ownerDocument.js
  var ownerDocument_default = ownerDocument;

  // node_modules/@mui/material/Menu/Menu.js
  var React39 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is3());
  var import_prop_types31 = __toESM(require_prop_types());

  // node_modules/@mui/material/MenuList/MenuList.js
  var React29 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is3());
  var import_prop_types22 = __toESM(require_prop_types());

  // node_modules/@mui/material/List/List.js
  var React28 = __toESM(require_react());
  var import_prop_types21 = __toESM(require_prop_types());

  // node_modules/@mui/material/List/ListContext.js
  var React27 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React27.createContext({});
  if (true) {
    ListContext.displayName = "ListContext";
  }
  var ListContext_default = ListContext;

  // node_modules/@mui/material/List/listClasses.js
  function getListUtilityClass(slot) {
    return generateUtilityClass("MuiList", slot);
  }
  var listClasses = generateUtilityClasses("MuiList", ["root", "padding", "dense", "subheader"]);

  // node_modules/@mui/material/List/List.js
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var _excluded21 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  var useUtilityClasses11 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return composeClasses(slots, getListUtilityClass, classes);
  };
  var ListRoot = styled_default("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.disablePadding && styles4.padding, ownerState.dense && styles4.dense, ownerState.subheader && styles4.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  var List = /* @__PURE__ */ React28.forwardRef(function List2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
    const context = React28.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses11(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ListContext_default.Provider, {
      value: context,
      children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(ListRoot, _extends({
        as: component,
        className: clsx_m_default(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  true ? List.propTypes = {
    children: import_prop_types21.default.node,
    classes: import_prop_types21.default.object,
    className: import_prop_types21.default.string,
    component: import_prop_types21.default.elementType,
    dense: import_prop_types21.default.bool,
    disablePadding: import_prop_types21.default.bool,
    subheader: import_prop_types21.default.node,
    sx: import_prop_types21.default.oneOfType([import_prop_types21.default.arrayOf(import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object, import_prop_types21.default.bool])), import_prop_types21.default.func, import_prop_types21.default.object])
  } : void 0;
  var List_default = List;

  // node_modules/@mui/material/utils/getScrollbarSize.js
  var getScrollbarSize_default = getScrollbarSize;

  // node_modules/@mui/material/MenuList/MenuList.js
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var _excluded23 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  var MenuList = /* @__PURE__ */ React29.forwardRef(function MenuList2(props, ref) {
    const {
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded23);
    const listRef = React29.useRef(null);
    const textCriteriaRef = React29.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect_default2(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React29.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, theme) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize_default(ownerDocument_default(containerElement))}px`;
          listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument_default(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef_default(listRef, ref);
    let activeItemIndex = -1;
    React29.Children.forEach(children, (child, index) => {
      if (!/* @__PURE__ */ React29.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is2.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    const items = React29.Children.map(children, (child, index) => {
      if (index === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React29.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  true ? MenuList.propTypes = {
    autoFocus: import_prop_types22.default.bool,
    autoFocusItem: import_prop_types22.default.bool,
    children: import_prop_types22.default.node,
    className: import_prop_types22.default.string,
    disabledItemsFocusable: import_prop_types22.default.bool,
    disableListWrap: import_prop_types22.default.bool,
    onKeyDown: import_prop_types22.default.func,
    variant: import_prop_types22.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // node_modules/@mui/material/Paper/Paper.js
  var React31 = __toESM(require_react());
  var import_prop_types23 = __toESM(require_prop_types());

  // node_modules/@mui/material/styles/useTheme.js
  var React30 = __toESM(require_react());
  function useTheme5() {
    const theme = useTheme_default(defaultTheme_default);
    if (true) {
      React30.useDebugValue(theme);
    }
    return theme;
  }

  // node_modules/@mui/material/Paper/paperClasses.js
  function getPaperUtilityClass(slot) {
    return generateUtilityClass("MuiPaper", slot);
  }
  var paperClasses = generateUtilityClasses("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);

  // node_modules/@mui/material/Paper/Paper.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var _excluded24 = ["className", "component", "elevation", "square", "variant"];
  var getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  var useUtilityClasses12 = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return composeClasses(slots, getPaperUtilityClass, classes);
  };
  var PaperRoot = styled_default("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, styles4[ownerState.variant], !ownerState.square && styles4.rounded, ownerState.variant === "elevation" && styles4[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    backgroundColor: theme.palette.background.paper,
    color: theme.palette.text.primary,
    transition: theme.transitions.create("box-shadow")
  }, !ownerState.square && {
    borderRadius: theme.shape.borderRadius
  }, ownerState.variant === "outlined" && {
    border: `1px solid ${theme.palette.divider}`
  }, ownerState.variant === "elevation" && _extends({
    boxShadow: theme.shadows[ownerState.elevation]
  }, theme.palette.mode === "dark" && {
    backgroundImage: `linear-gradient(${alpha("#fff", getOverlayAlpha(ownerState.elevation))}, ${alpha("#fff", getOverlayAlpha(ownerState.elevation))})`
  })));
  var Paper = /* @__PURE__ */ React31.forwardRef(function Paper2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses12(ownerState);
    if (true) {
      const theme = useTheme5();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(PaperRoot, _extends({
      as: component,
      ownerState,
      className: clsx_m_default(classes.root, className),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    children: import_prop_types23.default.node,
    classes: import_prop_types23.default.object,
    className: import_prop_types23.default.string,
    component: import_prop_types23.default.elementType,
    elevation: chainPropTypes(integerPropType_default, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    square: import_prop_types23.default.bool,
    sx: import_prop_types23.default.oneOfType([import_prop_types23.default.arrayOf(import_prop_types23.default.oneOfType([import_prop_types23.default.func, import_prop_types23.default.object, import_prop_types23.default.bool])), import_prop_types23.default.func, import_prop_types23.default.object]),
    variant: import_prop_types23.default.oneOfType([import_prop_types23.default.oneOf(["elevation", "outlined"]), import_prop_types23.default.string])
  } : void 0;
  var Paper_default = Paper;

  // node_modules/@mui/material/Popover/Popover.js
  var React38 = __toESM(require_react());
  var import_prop_types30 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/debounce.js
  var debounce_default = debounce;

  // node_modules/@mui/material/utils/ownerWindow.js
  var ownerWindow_default = ownerWindow;

  // node_modules/@mui/material/Grow/Grow.js
  var React34 = __toESM(require_react());
  var import_prop_types26 = __toESM(require_prop_types());

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types25 = __toESM(require_prop_types());
  var import_react8 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types24 = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types24.default.oneOfType([import_prop_types24.default.number, import_prop_types24.default.shape({
    enter: import_prop_types24.default.number,
    exit: import_prop_types24.default.number,
    appear: import_prop_types24.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types24.default.oneOfType([import_prop_types24.default.string, import_prop_types24.default.shape({
    enter: import_prop_types24.default.string,
    exit: import_prop_types24.default.string,
    active: import_prop_types24.default.string
  }), import_prop_types24.default.shape({
    enter: import_prop_types24.default.string,
    enterDone: import_prop_types24.default.string,
    enterActive: import_prop_types24.default.string,
    exit: import_prop_types24.default.string,
    exitDone: import_prop_types24.default.string,
    exitActive: import_prop_types24.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react7 = __toESM(require_react());
  var TransitionGroupContext_default = import_react7.default.createContext(null);

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return /* @__PURE__ */ import_react8.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children === "function" ? children(status, childProps) : import_react8.default.cloneElement(import_react8.default.Children.only(children), childProps));
    };
    return Transition2;
  }(import_react8.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    nodeRef: import_prop_types25.default.shape({
      current: typeof Element === "undefined" ? import_prop_types25.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types25.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    children: import_prop_types25.default.oneOfType([import_prop_types25.default.func.isRequired, import_prop_types25.default.element.isRequired]).isRequired,
    in: import_prop_types25.default.bool,
    mountOnEnter: import_prop_types25.default.bool,
    unmountOnExit: import_prop_types25.default.bool,
    appear: import_prop_types25.default.bool,
    enter: import_prop_types25.default.bool,
    exit: import_prop_types25.default.bool,
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    addEndListener: import_prop_types25.default.func,
    onEnter: import_prop_types25.default.func,
    onEntering: import_prop_types25.default.func,
    onEntered: import_prop_types25.default.func,
    onExit: import_prop_types25.default.func,
    onExiting: import_prop_types25.default.func,
    onExited: import_prop_types25.default.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/@mui/material/transitions/utils.js
  var reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout: timeout2,
      easing: easing2,
      style: style3 = {}
    } = props;
    return {
      duration: (_style$transitionDura = style3.transitionDuration) != null ? _style$transitionDura : typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
      easing: (_style$transitionTimi = style3.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style3.transitionDelay
    };
  }

  // node_modules/@mui/material/Grow/Grow.js
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var _excluded25 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale(value) {
    return `scale(${value}, ${value ** 2})`;
  }
  var styles2 = {
    entering: {
      opacity: 1,
      transform: getScale(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var Grow = /* @__PURE__ */ React34.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style3,
      timeout: timeout2 = "auto",
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
    const timer = React34.useRef();
    const autoTimeout = React34.useRef();
    const theme = useTheme5();
    const nodeRef = React34.useRef(null);
    const foreignRef = useForkRef_default(children.ref, ref);
    const handleRef = useForkRef_default(nodeRef, foreignRef);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: duration2 * 0.666,
        delay: delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = "0";
      node2.style.transform = getScale(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.current = setTimeout(next2, autoTimeout.current || 0);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    React34.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2 === "auto" ? null : timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React34.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            transform: getScale(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles2[state], style3, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Grow.propTypes = {
    addEndListener: import_prop_types26.default.func,
    appear: import_prop_types26.default.bool,
    children: elementAcceptingRef_default.isRequired,
    easing: import_prop_types26.default.oneOfType([import_prop_types26.default.shape({
      enter: import_prop_types26.default.string,
      exit: import_prop_types26.default.string
    }), import_prop_types26.default.string]),
    in: import_prop_types26.default.bool,
    onEnter: import_prop_types26.default.func,
    onEntered: import_prop_types26.default.func,
    onEntering: import_prop_types26.default.func,
    onExit: import_prop_types26.default.func,
    onExited: import_prop_types26.default.func,
    onExiting: import_prop_types26.default.func,
    style: import_prop_types26.default.object,
    timeout: import_prop_types26.default.oneOfType([import_prop_types26.default.oneOf(["auto"]), import_prop_types26.default.number, import_prop_types26.default.shape({
      appear: import_prop_types26.default.number,
      enter: import_prop_types26.default.number,
      exit: import_prop_types26.default.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  var Grow_default = Grow;

  // node_modules/@mui/material/Modal/Modal.js
  var React37 = __toESM(require_react());
  var import_prop_types29 = __toESM(require_prop_types());

  // node_modules/@mui/material/Backdrop/Backdrop.js
  var React36 = __toESM(require_react());
  var import_prop_types28 = __toESM(require_prop_types());

  // node_modules/@mui/material/Fade/Fade.js
  var React35 = __toESM(require_react());
  var import_prop_types27 = __toESM(require_prop_types());
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var _excluded26 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles3 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var defaultTimeout = {
    enter: duration.enteringScreen,
    exit: duration.leavingScreen
  };
  var Fade = /* @__PURE__ */ React35.forwardRef(function Fade2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style: style3,
      timeout: timeout2 = defaultTimeout,
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded26);
    const theme = useTheme5();
    const enableStrictModeCompat = true;
    const nodeRef = React35.useRef(null);
    const foreignRef = useForkRef_default(children.ref, ref);
    const handleRef = useForkRef_default(nodeRef, foreignRef);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style: style3,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React35.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles3[state], style3, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Fade.propTypes = {
    addEndListener: import_prop_types27.default.func,
    appear: import_prop_types27.default.bool,
    children: elementAcceptingRef_default.isRequired,
    easing: import_prop_types27.default.oneOfType([import_prop_types27.default.shape({
      enter: import_prop_types27.default.string,
      exit: import_prop_types27.default.string
    }), import_prop_types27.default.string]),
    in: import_prop_types27.default.bool,
    onEnter: import_prop_types27.default.func,
    onEntered: import_prop_types27.default.func,
    onEntering: import_prop_types27.default.func,
    onExit: import_prop_types27.default.func,
    onExited: import_prop_types27.default.func,
    onExiting: import_prop_types27.default.func,
    style: import_prop_types27.default.object,
    timeout: import_prop_types27.default.oneOfType([import_prop_types27.default.number, import_prop_types27.default.shape({
      appear: import_prop_types27.default.number,
      enter: import_prop_types27.default.number,
      exit: import_prop_types27.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // node_modules/@mui/material/Backdrop/Backdrop.js
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var _excluded27 = ["children", "components", "componentsProps", "className", "invisible", "open", "transitionDuration", "TransitionComponent"];
  var extendUtilityClasses = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  var BackdropRoot = styled_default("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.invisible && styles4.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  var Backdrop = /* @__PURE__ */ React36.forwardRef(function Backdrop2(inProps, ref) {
    var _componentsProps$root;
    const props = useThemeProps2({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      components = {},
      componentsProps = {},
      className,
      invisible = false,
      open,
      transitionDuration,
      TransitionComponent = Fade_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded27);
    const ownerState = _extends({}, props, {
      invisible
    });
    const classes = extendUtilityClasses(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(BackdropUnstyled_default, {
        className,
        invisible,
        components: _extends({
          Root: BackdropRoot
        }, components),
        componentsProps: {
          root: _extends({}, componentsProps.root, (!components.Root || !isHostComponent_default(components.Root)) && {
            ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
          })
        },
        classes,
        ref,
        children
      })
    }));
  });
  true ? Backdrop.propTypes = {
    children: import_prop_types28.default.node,
    classes: import_prop_types28.default.object,
    className: import_prop_types28.default.string,
    components: import_prop_types28.default.shape({
      Root: import_prop_types28.default.elementType
    }),
    componentsProps: import_prop_types28.default.shape({
      root: import_prop_types28.default.object
    }),
    invisible: import_prop_types28.default.bool,
    open: import_prop_types28.default.bool.isRequired,
    sx: import_prop_types28.default.oneOfType([import_prop_types28.default.arrayOf(import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object, import_prop_types28.default.bool])), import_prop_types28.default.func, import_prop_types28.default.object]),
    transitionDuration: import_prop_types28.default.oneOfType([import_prop_types28.default.number, import_prop_types28.default.shape({
      appear: import_prop_types28.default.number,
      enter: import_prop_types28.default.number,
      exit: import_prop_types28.default.number
    })])
  } : void 0;
  var Backdrop_default = Backdrop;

  // node_modules/@mui/material/Modal/Modal.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var _excluded28 = ["BackdropComponent", "closeAfterTransition", "children", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted"];
  var extendUtilityClasses2 = (ownerState) => {
    return ownerState.classes;
  };
  var ModalRoot = styled_default("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.open && ownerState.exited && styles4.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "fixed",
    zIndex: theme.zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  var ModalBackdrop = styled_default(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles4) => {
      return styles4.backdrop;
    }
  })({
    zIndex: -1
  });
  var Modal = /* @__PURE__ */ React37.forwardRef(function Modal2(inProps, ref) {
    var _componentsProps$root;
    const props = useThemeProps2({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      closeAfterTransition = false,
      children,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
    const [exited, setExited] = React37.useState(true);
    const commonProps = {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    };
    const ownerState = _extends({}, props, commonProps, {
      exited
    });
    const classes = extendUtilityClasses2(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ModalUnstyled_default, _extends({
      components: _extends({
        Root: ModalRoot
      }, components),
      componentsProps: {
        root: _extends({}, componentsProps.root, (!components.Root || !isHostComponent_default(components.Root)) && {
          ownerState: _extends({}, (_componentsProps$root = componentsProps.root) == null ? void 0 : _componentsProps$root.ownerState)
        })
      },
      BackdropComponent,
      onTransitionEnter: () => setExited(false),
      onTransitionExited: () => setExited(true),
      ref
    }, other, {
      classes
    }, commonProps, {
      children
    }));
  });
  true ? Modal.propTypes = {
    BackdropComponent: import_prop_types29.default.elementType,
    BackdropProps: import_prop_types29.default.object,
    children: elementAcceptingRef_default.isRequired,
    classes: import_prop_types29.default.object,
    closeAfterTransition: import_prop_types29.default.bool,
    components: import_prop_types29.default.shape({
      Root: import_prop_types29.default.elementType
    }),
    componentsProps: import_prop_types29.default.shape({
      root: import_prop_types29.default.object
    }),
    container: import_prop_types29.default.oneOfType([HTMLElementType, import_prop_types29.default.func]),
    disableAutoFocus: import_prop_types29.default.bool,
    disableEnforceFocus: import_prop_types29.default.bool,
    disableEscapeKeyDown: import_prop_types29.default.bool,
    disablePortal: import_prop_types29.default.bool,
    disableRestoreFocus: import_prop_types29.default.bool,
    disableScrollLock: import_prop_types29.default.bool,
    hideBackdrop: import_prop_types29.default.bool,
    keepMounted: import_prop_types29.default.bool,
    onBackdropClick: import_prop_types29.default.func,
    onClose: import_prop_types29.default.func,
    open: import_prop_types29.default.bool.isRequired,
    sx: import_prop_types29.default.oneOfType([import_prop_types29.default.arrayOf(import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object, import_prop_types29.default.bool])), import_prop_types29.default.func, import_prop_types29.default.object])
  } : void 0;
  var Modal_default = Modal;

  // node_modules/@mui/material/Popover/popoverClasses.js
  function getPopoverUtilityClass(slot) {
    return generateUtilityClass("MuiPopover", slot);
  }
  var popoverClasses = generateUtilityClasses("MuiPopover", ["root", "paper"]);

  // node_modules/@mui/material/Popover/Popover.js
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var _excluded29 = ["onEntering"];
  var _excluded210 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"];
  function getOffsetTop(rect, vertical) {
    let offset = 0;
    if (typeof vertical === "number") {
      offset = vertical;
    } else if (vertical === "center") {
      offset = rect.height / 2;
    } else if (vertical === "bottom") {
      offset = rect.height;
    }
    return offset;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset = 0;
    if (typeof horizontal === "number") {
      offset = horizontal;
    } else if (horizontal === "center") {
      offset = rect.width / 2;
    } else if (horizontal === "right") {
      offset = rect.width;
    }
    return offset;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useUtilityClasses13 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return composeClasses(slots, getPopoverUtilityClass, classes);
  };
  var PopoverRoot = styled_default(Modal_default, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var PopoverPaper = styled_default(Paper_default, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    outline: 0
  });
  var Popover = /* @__PURE__ */ React38.forwardRef(function Popover2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps = {},
      transformOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded29), other = _objectWithoutPropertiesLoose(props, _excluded210);
    const paperRef = React38.useRef();
    const handlePaperRef = useForkRef_default(paperRef, PaperProps.ref);
    const ownerState = _extends({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      PaperProps,
      transformOrigin,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes = useUtilityClasses13(ownerState);
    const getAnchorOffset = React38.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument_default(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        const box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React38.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    const getPositioningStyle = React38.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top2 = anchorOffset.top - elemTransformOrigin.vertical;
      let left2 = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom2 = top2 + elemRect.height;
      const right2 = left2 + elemRect.width;
      const containerWindow = ownerWindow_default(resolveAnchorEl(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (top2 < marginThreshold) {
        const diff = top2 - marginThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (bottom2 > heightThreshold) {
        const diff = bottom2 - heightThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (left2 < marginThreshold) {
        const diff = left2 - marginThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right2 > widthThreshold) {
        const diff = right2 - widthThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top2)}px`,
        left: `${Math.round(left2)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const setPositioningStyles = React38.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
    }, [getPositioningStyle]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    React38.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React38.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React38.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow_default(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument_default(resolveAnchorEl(anchorEl)).body : void 0);
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(PopoverRoot, _extends({
      BackdropProps: {
        invisible: true
      },
      className: clsx_m_default(classes.root, className),
      container,
      open,
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        onEntering: handleEntering,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(PopoverPaper, _extends({
          elevation
        }, PaperProps, {
          ref: handlePaperRef,
          className: clsx_m_default(classes.paper, PaperProps.className),
          children
        }))
      }))
    }));
  });
  true ? Popover.propTypes = {
    action: refType_default,
    anchorEl: chainPropTypes(import_prop_types30.default.oneOfType([HTMLElementType, import_prop_types30.default.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    anchorOrigin: import_prop_types30.default.shape({
      horizontal: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["center", "left", "right"]), import_prop_types30.default.number]).isRequired,
      vertical: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["bottom", "center", "top"]), import_prop_types30.default.number]).isRequired
    }),
    anchorPosition: import_prop_types30.default.shape({
      left: import_prop_types30.default.number.isRequired,
      top: import_prop_types30.default.number.isRequired
    }),
    anchorReference: import_prop_types30.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    children: import_prop_types30.default.node,
    classes: import_prop_types30.default.object,
    className: import_prop_types30.default.string,
    container: import_prop_types30.default.oneOfType([HTMLElementType, import_prop_types30.default.func]),
    elevation: integerPropType_default,
    marginThreshold: import_prop_types30.default.number,
    onClose: import_prop_types30.default.func,
    open: import_prop_types30.default.bool.isRequired,
    PaperProps: import_prop_types30.default.shape({
      component: elementTypeAcceptingRef_default
    }),
    sx: import_prop_types30.default.oneOfType([import_prop_types30.default.arrayOf(import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object, import_prop_types30.default.bool])), import_prop_types30.default.func, import_prop_types30.default.object]),
    transformOrigin: import_prop_types30.default.shape({
      horizontal: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["center", "left", "right"]), import_prop_types30.default.number]).isRequired,
      vertical: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["bottom", "center", "top"]), import_prop_types30.default.number]).isRequired
    }),
    TransitionComponent: import_prop_types30.default.elementType,
    transitionDuration: import_prop_types30.default.oneOfType([import_prop_types30.default.oneOf(["auto"]), import_prop_types30.default.number, import_prop_types30.default.shape({
      appear: import_prop_types30.default.number,
      enter: import_prop_types30.default.number,
      exit: import_prop_types30.default.number
    })]),
    TransitionProps: import_prop_types30.default.object
  } : void 0;
  var Popover_default = Popover;

  // node_modules/@mui/material/Menu/menuClasses.js
  function getMenuUtilityClass(slot) {
    return generateUtilityClass("MuiMenu", slot);
  }
  var menuClasses = generateUtilityClasses("MuiMenu", ["root", "paper", "list"]);

  // node_modules/@mui/material/Menu/Menu.js
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var _excluded30 = ["onEntering"];
  var _excluded211 = ["autoFocus", "children", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant"];
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var useUtilityClasses14 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return composeClasses(slots, getMenuUtilityClass, classes);
  };
  var MenuRoot = styled_default(Popover_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var MenuPaper = styled_default(Paper_default, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles4) => styles4.paper
  })({
    maxHeight: "calc(100% - 96px)",
    WebkitOverflowScrolling: "touch"
  });
  var MenuMenuList = styled_default(MenuList_default, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles4) => styles4.list
  })({
    outline: 0
  });
  var Menu = /* @__PURE__ */ React39.forwardRef(function Menu2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu"
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded30), other = _objectWithoutPropertiesLoose(props, _excluded211);
    const theme = useTheme5();
    const isRtl = theme.direction === "rtl";
    const ownerState = _extends({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes = useUtilityClasses14(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React39.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React39.Children.map(children, (child, index) => {
      if (!/* @__PURE__ */ React39.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is3.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index;
        }
      }
    });
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(MenuRoot, _extends({
      classes: PopoverClasses,
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      PaperProps: _extends({
        component: MenuPaper
      }, PaperProps, {
        classes: _extends({}, PaperProps.classes, {
          root: classes.paper
        })
      }),
      className: classes.root,
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(MenuMenuList, _extends({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx_m_default(classes.list, MenuListProps.className),
        children
      }))
    }));
  });
  true ? Menu.propTypes = {
    anchorEl: import_prop_types31.default.oneOfType([HTMLElementType, import_prop_types31.default.func]),
    autoFocus: import_prop_types31.default.bool,
    children: import_prop_types31.default.node,
    classes: import_prop_types31.default.object,
    disableAutoFocusItem: import_prop_types31.default.bool,
    MenuListProps: import_prop_types31.default.object,
    onClose: import_prop_types31.default.func,
    open: import_prop_types31.default.bool.isRequired,
    PaperProps: import_prop_types31.default.object,
    PopoverClasses: import_prop_types31.default.object,
    sx: import_prop_types31.default.oneOfType([import_prop_types31.default.arrayOf(import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object, import_prop_types31.default.bool])), import_prop_types31.default.func, import_prop_types31.default.object]),
    transitionDuration: import_prop_types31.default.oneOfType([import_prop_types31.default.oneOf(["auto"]), import_prop_types31.default.number, import_prop_types31.default.shape({
      appear: import_prop_types31.default.number,
      enter: import_prop_types31.default.number,
      exit: import_prop_types31.default.number
    })]),
    TransitionProps: import_prop_types31.default.object,
    variant: import_prop_types31.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = Menu;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var React40 = __toESM(require_react());
  var import_prop_types32 = __toESM(require_prop_types());

  // node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
  function getNativeSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiNativeSelect", slot);
  }
  var nativeSelectClasses = generateUtilityClasses("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput"]);
  var nativeSelectClasses_default = nativeSelectClasses;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var _excluded31 = ["className", "disabled", "IconComponent", "inputRef", "variant"];
  var useUtilityClasses15 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return composeClasses(slots, getNativeSelectUtilityClasses, classes);
  };
  var nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends({
    MozAppearance: "none",
    WebkitAppearance: "none",
    userSelect: "none",
    borderRadius: 0,
    cursor: "pointer",
    "&:focus": {
      backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)",
      borderRadius: 0
    },
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses_default.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: theme.palette.background.paper
    },
    "&&&": {
      paddingRight: 24,
      minWidth: 16
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: theme.shape.borderRadius,
    "&:focus": {
      borderRadius: theme.shape.borderRadius
    },
    "&&&": {
      paddingRight: 32
    }
  });
  var NativeSelectSelect = styled_default("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp,
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.select, styles4[ownerState.variant], {
        [`&.${nativeSelectClasses_default.multiple}`]: styles4.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  var nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends({
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    pointerEvents: "none",
    color: theme.palette.action.active,
    [`&.${nativeSelectClasses_default.disabled}`]: {
      color: theme.palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  var NativeSelectIcon = styled_default("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.icon, ownerState.variant && styles4[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles4.iconOpen];
    }
  })(nativeSelectIconStyles);
  var NativeSelectInput = /* @__PURE__ */ React40.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
    const ownerState = _extends({}, props, {
      disabled,
      variant
    });
    const classes = useUtilityClasses15(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(React40.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime31.jsx)(NativeSelectSelect, _extends({
        ownerState,
        className: clsx_m_default(classes.select, className),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  true ? NativeSelectInput.propTypes = {
    children: import_prop_types32.default.node,
    classes: import_prop_types32.default.object,
    className: import_prop_types32.default.string,
    disabled: import_prop_types32.default.bool,
    IconComponent: import_prop_types32.default.elementType.isRequired,
    inputRef: refType_default,
    multiple: import_prop_types32.default.bool,
    name: import_prop_types32.default.string,
    onChange: import_prop_types32.default.func,
    value: import_prop_types32.default.any,
    variant: import_prop_types32.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // node_modules/@mui/material/utils/useControlled.js
  var useControlled_default = useControlled;

  // node_modules/@mui/material/Select/selectClasses.js
  function getSelectUtilityClasses(slot) {
    return generateUtilityClass("MuiSelect", slot);
  }
  var selectClasses = generateUtilityClasses("MuiSelect", ["select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput"]);
  var selectClasses_default = selectClasses;

  // node_modules/@mui/material/Select/SelectInput.js
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var _excluded33 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  var SelectSelect = styled_default("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [
        {
          [`&.${selectClasses_default.select}`]: styles4.select
        },
        {
          [`&.${selectClasses_default.select}`]: styles4[ownerState.variant]
        },
        {
          [`&.${selectClasses_default.multiple}`]: styles4.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    [`&.${selectClasses_default.select}`]: {
      height: "auto",
      minHeight: "1.4375em",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  var SelectIcon = styled_default("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.icon, ownerState.variant && styles4[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles4.iconOpen];
    }
  })(nativeSelectIconStyles);
  var SelectNativeInput = styled_default("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles4) => styles4.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty4(display) {
    return display == null || typeof display === "string" && !display.trim();
  }
  var useUtilityClasses16 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return composeClasses(slots, getSelectUtilityClasses, classes);
  };
  var SelectInput = /* @__PURE__ */ React41.forwardRef(function SelectInput2(props, ref) {
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultValue,
      disabled,
      displayEmpty,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const inputRef = React41.useRef(null);
    const displayRef = React41.useRef(null);
    const [displayNode, setDisplayNode] = React41.useState(null);
    const {
      current: isOpenControlled
    } = React41.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React41.useState();
    const [openState, setOpenState] = React41.useState(false);
    const handleRef = useForkRef_default(ref, inputRefProp);
    const handleDisplayRef = React41.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    React41.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React41.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React41.useEffect(() => {
      const label = ownerDocument_default(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update(true, event);
    };
    const handleClose = (event) => {
      update(false, event);
    };
    const childrenArray = React41.Children.toArray(children);
    const handleChange = (event) => {
      const index = childrenArray.map((child2) => child2.props.value).indexOf(event.target.value);
      if (index === -1) {
        return;
      }
      const child = childrenArray[index];
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update(false, event);
      }
    };
    const handleKeyDown = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update(true, event);
        }
      }
    };
    const open = displayNode !== null && (isOpenControlled ? openProp : openState);
    const handleBlur = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child) => {
      if (!/* @__PURE__ */ React41.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is4.isFragment)(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? `MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` : formatMuiErrorMessage(2));
        }
        selected = value.some((v) => areEqualValues(v, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React41.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        "data-value": child.props.value
      });
    });
    if (true) {
      React41.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values2 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values2.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display = null;
        } else {
          display = displayMultiple.reduce((output, child, index) => {
            output.push(child);
            if (index < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = displayNode.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = _extends({}, props, {
      variant,
      value,
      open
    });
    const classes = useUtilityClasses16(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(React41.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SelectSelect, _extends({
        ref: handleDisplayRef,
        tabIndex,
        role: "button",
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx_m_default(classes.select, className, SelectDisplayProps.className),
        id: buttonId,
        children: isEmpty4(display) ? /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", {
          className: "notranslate",
          dangerouslySetInnerHTML: {
            __html: "&#8203;"
          }
        }) : display
      })), /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SelectNativeInput, _extends({
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        ownerState
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(Menu_default, _extends({
        id: `menu-${name || ""}`,
        anchorEl: displayNode,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends({
          "aria-labelledby": labelId,
          role: "listbox",
          disableListWrap: true
        }, MenuProps.MenuListProps),
        PaperProps: _extends({}, MenuProps.PaperProps, {
          style: _extends({
            minWidth: menuMinWidth
          }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
        }),
        children: items
      }))]
    });
  });
  true ? SelectInput.propTypes = {
    "aria-describedby": import_prop_types33.default.string,
    "aria-label": import_prop_types33.default.string,
    autoFocus: import_prop_types33.default.bool,
    autoWidth: import_prop_types33.default.bool,
    children: import_prop_types33.default.node,
    classes: import_prop_types33.default.object,
    className: import_prop_types33.default.string,
    defaultValue: import_prop_types33.default.any,
    disabled: import_prop_types33.default.bool,
    displayEmpty: import_prop_types33.default.bool,
    IconComponent: import_prop_types33.default.elementType.isRequired,
    inputRef: refType_default,
    labelId: import_prop_types33.default.string,
    MenuProps: import_prop_types33.default.object,
    multiple: import_prop_types33.default.bool,
    name: import_prop_types33.default.string,
    onBlur: import_prop_types33.default.func,
    onChange: import_prop_types33.default.func,
    onClose: import_prop_types33.default.func,
    onFocus: import_prop_types33.default.func,
    onOpen: import_prop_types33.default.func,
    open: import_prop_types33.default.bool,
    readOnly: import_prop_types33.default.bool,
    renderValue: import_prop_types33.default.func,
    SelectDisplayProps: import_prop_types33.default.object,
    tabIndex: import_prop_types33.default.oneOfType([import_prop_types33.default.number, import_prop_types33.default.string]),
    type: import_prop_types33.default.any,
    value: import_prop_types33.default.any,
    variant: import_prop_types33.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  var React44 = __toESM(require_react());

  // node_modules/@mui/material/utils/createSvgIcon.js
  var React43 = __toESM(require_react());

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  var React42 = __toESM(require_react());
  var import_prop_types34 = __toESM(require_prop_types());

  // node_modules/@mui/material/SvgIcon/svgIconClasses.js
  function getSvgIconUtilityClass(slot) {
    return generateUtilityClass("MuiSvgIcon", slot);
  }
  var svgIconClasses = generateUtilityClasses("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);

  // node_modules/@mui/material/SvgIcon/SvgIcon.js
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var _excluded34 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
  var useUtilityClasses17 = (ownerState) => {
    const {
      color: color2,
      fontSize: fontSize2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color2 !== "inherit" && `color${capitalize_default(color2)}`, `fontSize${capitalize_default(fontSize2)}`]
    };
    return composeClasses(slots, getSvgIconUtilityClass, classes);
  };
  var SvgIconRoot = styled_default("svg", {
    name: "MuiSvgIcon",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, ownerState.color !== "inherit" && styles4[`color${capitalize_default(ownerState.color)}`], styles4[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$ownerS, _theme$palette$ownerS2;
    return {
      userSelect: "none",
      width: "1em",
      height: "1em",
      display: "inline-block",
      fill: "currentColor",
      flexShrink: 0,
      transition: theme.transitions.create("fill", {
        duration: theme.transitions.duration.shorter
      }),
      fontSize: {
        inherit: "inherit",
        small: theme.typography.pxToRem(20),
        medium: theme.typography.pxToRem(24),
        large: theme.typography.pxToRem(35)
      }[ownerState.fontSize],
      color: (_theme$palette$ownerS = (_theme$palette$ownerS2 = theme.palette[ownerState.color]) == null ? void 0 : _theme$palette$ownerS2.main) != null ? _theme$palette$ownerS : {
        action: theme.palette.action.active,
        disabled: theme.palette.action.disabled,
        inherit: void 0
      }[ownerState.color]
    };
  });
  var SvgIcon = /* @__PURE__ */ React42.forwardRef(function SvgIcon2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiSvgIcon"
    });
    const {
      children,
      className,
      color: color2 = "inherit",
      component = "svg",
      fontSize: fontSize2 = "medium",
      htmlColor,
      inheritViewBox = false,
      titleAccess,
      viewBox = "0 0 24 24"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
    const ownerState = _extends({}, props, {
      color: color2,
      component,
      fontSize: fontSize2,
      inheritViewBox,
      viewBox
    });
    const more = {};
    if (!inheritViewBox) {
      more.viewBox = viewBox;
    }
    const classes = useUtilityClasses17(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)(SvgIconRoot, _extends({
      as: component,
      className: clsx_m_default(classes.root, className),
      ownerState,
      focusable: "false",
      color: htmlColor,
      "aria-hidden": titleAccess ? void 0 : true,
      role: titleAccess ? "img" : void 0,
      ref
    }, more, other, {
      children: [children, titleAccess ? /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("title", {
        children: titleAccess
      }) : null]
    }));
  });
  true ? SvgIcon.propTypes = {
    children: import_prop_types34.default.node,
    classes: import_prop_types34.default.object,
    className: import_prop_types34.default.string,
    color: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types34.default.string]),
    component: import_prop_types34.default.elementType,
    fontSize: import_prop_types34.default.oneOfType([import_prop_types34.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types34.default.string]),
    htmlColor: import_prop_types34.default.string,
    inheritViewBox: import_prop_types34.default.bool,
    shapeRendering: import_prop_types34.default.string,
    sx: import_prop_types34.default.oneOfType([import_prop_types34.default.arrayOf(import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object, import_prop_types34.default.bool])), import_prop_types34.default.func, import_prop_types34.default.object]),
    titleAccess: import_prop_types34.default.string,
    viewBox: import_prop_types34.default.string
  } : void 0;
  SvgIcon.muiName = "SvgIcon";
  var SvgIcon_default = SvgIcon;

  // node_modules/@mui/material/utils/createSvgIcon.js
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    const Component = (props, ref) => /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(SvgIcon_default, _extends({
      "data-testid": `${displayName}Icon`,
      ref
    }, props, {
      children: path
    }));
    if (true) {
      Component.displayName = `${displayName}Icon`;
    }
    Component.muiName = SvgIcon_default.muiName;
    return /* @__PURE__ */ React43.memo(/* @__PURE__ */ React43.forwardRef(Component));
  }

  // node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime38.jsx)("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@mui/material/Select/Select.js
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var _Input;
  var _FilledInput;
  var _excluded35 = ["autoWidth", "children", "classes", "className", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
  var useUtilityClasses18 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  var Select = /* @__PURE__ */ React45.forwardRef(function Select2(inProps, ref) {
    const props = useThemeProps2({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      displayEmpty = false,
      IconComponent = ArrowDropDown_default,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProps = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
    const inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    const variant = fcs.variant || variantProps;
    const InputComponent = input || {
      standard: _Input || (_Input = /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Input_default, {})),
      outlined: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(OutlinedInput_default, {
        label
      }),
      filled: _FilledInput || (_FilledInput = /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(FilledInput_default, {}))
    }[variant];
    const ownerState = _extends({}, props, {
      classes: classesProp
    });
    const classes = useUtilityClasses18(ownerState);
    const inputComponentRef = useForkRef_default(ref, InputComponent.ref);
    return /* @__PURE__ */ React45.cloneElement(InputComponent, _extends({
      inputComponent,
      inputProps: _extends({
        children,
        IconComponent,
        variant,
        type: void 0,
        multiple
      }, native ? {
        id
      } : {
        autoWidth,
        displayEmpty,
        labelId,
        MenuProps,
        onClose,
        onOpen,
        open,
        renderValue,
        SelectDisplayProps: _extends({
          id
        }, SelectDisplayProps)
      }, inputProps, {
        classes: inputProps ? deepmerge(classes, inputProps.classes) : classes
      }, input ? input.props.inputProps : {})
    }, multiple && native && variant === "outlined" ? {
      notched: true
    } : {}, {
      ref: inputComponentRef,
      className: clsx_m_default(InputComponent.props.className, className)
    }, other));
  });
  true ? Select.propTypes = {
    autoWidth: import_prop_types35.default.bool,
    children: import_prop_types35.default.node,
    classes: import_prop_types35.default.object,
    className: import_prop_types35.default.string,
    defaultValue: import_prop_types35.default.any,
    displayEmpty: import_prop_types35.default.bool,
    IconComponent: import_prop_types35.default.elementType,
    id: import_prop_types35.default.string,
    input: import_prop_types35.default.element,
    inputProps: import_prop_types35.default.object,
    label: import_prop_types35.default.node,
    labelId: import_prop_types35.default.string,
    MenuProps: import_prop_types35.default.object,
    multiple: import_prop_types35.default.bool,
    native: import_prop_types35.default.bool,
    onChange: import_prop_types35.default.func,
    onClose: import_prop_types35.default.func,
    onOpen: import_prop_types35.default.func,
    open: import_prop_types35.default.bool,
    renderValue: import_prop_types35.default.func,
    SelectDisplayProps: import_prop_types35.default.object,
    sx: import_prop_types35.default.oneOfType([import_prop_types35.default.arrayOf(import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object, import_prop_types35.default.bool])), import_prop_types35.default.func, import_prop_types35.default.object]),
    value: import_prop_types35.default.any,
    variant: import_prop_types35.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select.muiName = "Select";
  var Select_default = Select;

  // node_modules/@mui/material/TextField/textFieldClasses.js
  function getTextFieldUtilityClass(slot) {
    return generateUtilityClass("MuiTextField", slot);
  }
  var textFieldClasses = generateUtilityClasses("MuiTextField", ["root"]);

  // node_modules/@mui/material/TextField/TextField.js
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var _excluded36 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var useUtilityClasses19 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getTextFieldUtilityClass, classes);
  };
  var TextFieldRoot = styled_default(FormControl_default, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })({});
  var TextField = /* @__PURE__ */ React46.forwardRef(function TextField2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color: color2 = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
    const ownerState = _extends({}, props, {
      autoFocus,
      color: color2,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes = useUtilityClasses19(ownerState);
    if (true) {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = useId(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(TextFieldRoot, _extends({
      className: clsx_m_default(classes.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color: color2,
      variant,
      ownerState
    }, other, {
      children: [label && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(InputLabel_default, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Select_default, _extends({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(FormHelperText_default, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  true ? TextField.propTypes = {
    autoComplete: import_prop_types36.default.string,
    autoFocus: import_prop_types36.default.bool,
    children: import_prop_types36.default.node,
    classes: import_prop_types36.default.object,
    className: import_prop_types36.default.string,
    color: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types36.default.string]),
    defaultValue: import_prop_types36.default.any,
    disabled: import_prop_types36.default.bool,
    error: import_prop_types36.default.bool,
    FormHelperTextProps: import_prop_types36.default.object,
    fullWidth: import_prop_types36.default.bool,
    helperText: import_prop_types36.default.node,
    id: import_prop_types36.default.string,
    InputLabelProps: import_prop_types36.default.object,
    inputProps: import_prop_types36.default.object,
    InputProps: import_prop_types36.default.object,
    inputRef: refType_default,
    label: import_prop_types36.default.node,
    margin: import_prop_types36.default.oneOf(["dense", "none", "normal"]),
    maxRows: import_prop_types36.default.oneOfType([import_prop_types36.default.number, import_prop_types36.default.string]),
    minRows: import_prop_types36.default.oneOfType([import_prop_types36.default.number, import_prop_types36.default.string]),
    multiline: import_prop_types36.default.bool,
    name: import_prop_types36.default.string,
    onBlur: import_prop_types36.default.func,
    onChange: import_prop_types36.default.func,
    onFocus: import_prop_types36.default.func,
    placeholder: import_prop_types36.default.string,
    required: import_prop_types36.default.bool,
    rows: import_prop_types36.default.oneOfType([import_prop_types36.default.number, import_prop_types36.default.string]),
    select: import_prop_types36.default.bool,
    SelectProps: import_prop_types36.default.object,
    size: import_prop_types36.default.oneOfType([import_prop_types36.default.oneOf(["medium", "small"]), import_prop_types36.default.string]),
    sx: import_prop_types36.default.oneOfType([import_prop_types36.default.arrayOf(import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object, import_prop_types36.default.bool])), import_prop_types36.default.func, import_prop_types36.default.object]),
    type: import_prop_types36.default.string,
    value: import_prop_types36.default.any,
    variant: import_prop_types36.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = TextField;

  // client/src/components/ExploreItem/index.tsx
  var import_react10 = __toESM(require_react());
  var import_fabric2 = __toESM(require_fabric());

  // client/src/utils/sourceFileHelpers.ts
  function getFileNameWithoutExtension(sourceFileKeyMap, fileName2) {
    if (sourceFileKeyMap[fileName2]) {
      return fileName2;
    }
    let shortened = fileName2.replace(/(.*)\..*/, "$1");
    if (sourceFileKeyMap[shortened]) {
      return shortened;
    }
    shortened = fileName2.replace(/(.*)\/.*/, "$1");
    if (sourceFileKeyMap[shortened]) {
      return shortened;
    }
    throw new Error(`Could not find file ${fileName2}`);
  }
  function getShortenedFileName(fileName2) {
    const match2 = fileName2.match(/([^/]*)\/*([^/]*)\/*([^/]*)$/);
    if (match2) {
      return match2.slice(1).filter((i) => i).join("/");
    } else {
      return fileName2;
    }
  }
  function matchFileText(sourceFile, searchString) {
    return searchString.split(" ").every((searchText) => {
      const regex = new RegExp(searchText.replace(/([^a-z0-9])/g, "\\$1"), "i");
      if (regex.test(sourceFile.fileName)) {
        return true;
      }
      if (regex.test(sourceFile.text)) {
        return true;
      }
    });
  }
  function matchFileDeclaration(sourceFile, searchString) {
    return searchString.split(" ").every((searchText) => {
      const regex = new RegExp(searchText.replace(/([^a-z0-9])/g, "\\$1"), "i");
      return sourceFile.statements.some((i) => {
        var _a;
        if (i.type === "module")
          return false;
        if (i.type === "expression")
          return false;
        return regex.test(i.name) || ((_a = i.statements) == null ? void 0 : _a.some((j) => regex.test(j.name)));
      });
    });
  }
  function searchSourceFileText(sourceFileKeyMap, searchText) {
    return Object.values(sourceFileKeyMap).reduce((accumulator, sourceFile) => {
      if (matchFileDeclaration(sourceFile, searchText)) {
        accumulator.push({ fileName: sourceFile.fileName, isDeclaration: true });
      } else if (matchFileText(sourceFile, searchText)) {
        accumulator.push({ fileName: sourceFile.fileName });
      }
      return accumulator;
    }, []);
  }
  function searchSourceFileModules(sourceFileKeyMap, fileName2) {
    return Object.values(sourceFileKeyMap).reduce((accumulator, sourceFile) => {
      if (sourceFile.modules.includes(fileName2)) {
        accumulator.push({ fileName: sourceFile.fileName });
        return accumulator;
      } else {
        return accumulator;
      }
    }, []);
  }

  // client/src/utils/fabricHelpers.ts
  function calculateTopLeft(fabricCanvas, cardWidth2, cardHeight, topAnchor, bottomAnchor, leftAnchor, rightAnchor) {
    if (!fabricCanvas)
      return;
    let top2;
    let left2;
    if (typeof topAnchor !== "undefined") {
      top2 = topAnchor;
    } else if (typeof bottomAnchor !== "undefined") {
      top2 = bottomAnchor - cardHeight;
    } else {
      top2 = Math.floor((fabricCanvas.height - cardHeight) / 4);
    }
    if (typeof leftAnchor !== "undefined") {
      left2 = leftAnchor;
    } else if (typeof rightAnchor !== "undefined") {
      left2 = rightAnchor - cardWidth2;
    } else {
      left2 = Math.floor((fabricCanvas.width - cardWidth2) / 4);
    }
    return { top: top2, left: left2 };
  }
  function onMove(fabricObject, callback) {
    let down = false;
    fabricObject.on("mousedown", () => {
      down = true;
    });
    fabricObject.on("mousemove", () => {
      if (down) {
        callback();
      }
    });
    fabricObject.on("mouseup", () => {
      down = false;
    });
  }
  function onClick(fabricObject, callback) {
    let down = false;
    fabricObject.on("mousedown", () => {
      down = true;
    });
    fabricObject.on("mousemove", () => {
      down = false;
    });
    fabricObject.on("mouseup", () => {
      if (down) {
        callback();
      }
      down = false;
    });
  }
  var offsetFromCard = 10;
  function getAnchorPoints({
    isModule,
    cardWidth: cardWidth2,
    parentHeight,
    parentPosition,
    currentHeight,
    currentPosition
  }) {
    if (!currentPosition)
      return;
    const res = {
      arrowPoint: {
        x: currentPosition.left + cardWidth2 / 2,
        y: isModule ? currentPosition.top - offsetFromCard : currentHeight + currentPosition.top + offsetFromCard
      }
    };
    if (!parentPosition)
      return res;
    res.lineAnchor = {
      x: parentPosition.left + cardWidth2 / 2,
      y: isModule ? parentHeight + parentPosition.top + offsetFromCard : parentPosition.top - offsetFromCard
    };
    return res;
  }

  // client/src/components/Arrow/index.tsx
  var import_react9 = __toESM(require_react());
  var import_fabric = __toESM(require_fabric());
  function Arrow({
    fabricCanvas,
    lineAnchor,
    arrowPoint
  }) {
    (0, import_react9.useEffect)(() => {
      if (!lineAnchor || !arrowPoint)
        return;
      const arrowIsBelow = arrowPoint.y < lineAnchor.y;
      const midY = (arrowPoint.y - lineAnchor.y) / 2 + lineAnchor.y;
      const midX = (arrowPoint.x - lineAnchor.x) / 2 + lineAnchor.x;
      const line2 = new import_fabric.fabric.Path(`
    M ${lineAnchor.x} ${lineAnchor.y}
    Q ${lineAnchor.x}, ${midY}, ${midX}, ${midY}
    M ${midX} ${midY}
    Q ${arrowPoint.x}, ${midY}, ${arrowPoint.x}, ${arrowPoint.y}
    M ${arrowPoint.x - 8} ${arrowPoint.y}
    Q ${arrowPoint.x - 8}, ${arrowPoint.y}, ${arrowPoint.x}, ${arrowIsBelow ? arrowPoint.y - 8 : arrowPoint.y + 8}
    M ${arrowPoint.x + 8} ${arrowPoint.y}
    Q ${arrowPoint.x + 8}, ${arrowPoint.y}, ${arrowPoint.x}, ${arrowIsBelow ? arrowPoint.y - 8 : arrowPoint.y + 8}
    `, {
        fill: "",
        stroke: "black",
        strokeWidth: 3,
        strokeLineCap: "round",
        selectable: false
      });
      fabricCanvas.add(line2);
      return () => {
        fabricCanvas.remove(line2);
      };
    }, [lineAnchor, arrowPoint]);
    return null;
  }

  // client/src/components/ExploreItem/index.tsx
  var cardWidth = 500;
  var cardSpacing = 80;
  function ExploreItem({
    fabricCanvas,
    pointerState,
    isReference,
    isModule,
    referringModule,
    parentHeight,
    parentPosition,
    topAnchor,
    bottomAnchor,
    leftAnchor,
    rightAnchor,
    sourceFileName,
    sourceFileKeyMap
  }) {
    const groupRef = (0, import_react10.useRef)();
    const positionRef = (0, import_react10.useRef)();
    const [expandedReferences, setExpandedReferences] = (0, import_react10.useState)([]);
    const [expandedModules, setExpandedModules] = (0, import_react10.useState)([]);
    const [cardHeight, setCardHeight] = (0, import_react10.useState)(400);
    const [arrow, setArrow] = (0, import_react10.useState)();
    (0, import_react10.useEffect)(() => {
      if (fabricCanvas && pointerState) {
        let addLine = function(text, options, handler) {
          const textBox = new import_fabric2.fabric.Textbox(text, __spreadValues({
            left: margin2,
            top: lineOffset,
            width: cardWidth - margin2 * 2
          }, options));
          if (handler) {
            onClick(textBox, handler);
          }
          groupArray.push(textBox);
          lineOffset += (options.fontSize || 40) + lineSpacing;
        };
        const sourceFile = sourceFileKeyMap[getFileNameWithoutExtension(sourceFileKeyMap, sourceFileName)];
        let lineOffset = 20;
        let margin2 = 20;
        let lineSpacing = 10;
        const groupArray = [];
        addLine(getShortenedFileName(sourceFileName), { fontSize: 24, fontWeight: "bold" }, () => {
          console.log("clicked title: modal with code?");
        });
        lineOffset += 20;
        const references = searchSourceFileModules(sourceFileKeyMap, sourceFileName).map((i) => i.fileName);
        const filteredReferences = references.filter((i) => i !== referringModule);
        if (filteredReferences.length) {
          addLine("References:", { fontSize: 18, fill: "blue", hoverCursor: "pointer" }, () => {
            if (expandedReferences.length === filteredReferences.length) {
              setExpandedReferences([]);
            } else {
              const newExpandedReferences = [...expandedReferences];
              references.forEach((reference) => {
                if (!expandedReferences.includes(reference)) {
                  newExpandedReferences.push(reference);
                }
              });
              setExpandedReferences(newExpandedReferences.filter((i) => i !== referringModule));
            }
          });
          filteredReferences.forEach((reference, index) => {
            addLine(`  ${getShortenedFileName(reference)}`, {
              fontSize: 16,
              hoverCursor: "pointer",
              backgroundColor: index % 2 === 0 ? "#eee" : void 0
            }, () => {
              toggleReference(reference);
            });
          });
        }
        const classes = sourceFile.statements.filter((i) => i.type === "class");
        if (classes.length) {
          addLine("Classes:", { fontSize: 18 });
          classes.forEach((classStatement, index) => {
            addLine(`  ${classStatement.name || "UNKNOWN"}`, {
              fontSize: 16,
              backgroundColor: index % 2 === 0 ? "#eee" : void 0
            });
            classStatement.statements.forEach((subStatement) => {
              addLine(`    ${subStatement.name || "UNKNOWN"}()`, { fontSize: 16, backgroundColor: index % 2 === 0 ? "#eee" : void 0 });
            });
          });
        } else {
          const declarations = sourceFile.statements.filter((i) => i.type === "function" || i.type === "method");
          if (declarations.length) {
            addLine("Declarations:", { fontSize: 18 });
            declarations.forEach((statement, index) => {
              if (/^[A-Z]/.test(statement.name)) {
                addLine(`    <${statement.name || "UNKNOWN"}>`, { fontSize: 16, backgroundColor: index % 2 === 0 ? "#eee" : void 0 });
              } else {
                addLine(`    ${statement.name || "UNKNOWN"}()`, { fontSize: 16, backgroundColor: index % 2 === 0 ? "#eee" : void 0 });
              }
            });
          }
        }
        const expressions = sourceFile.statements.filter((i) => i.type === "expression");
        if (expressions.length) {
          addLine("Expressions:", { fontSize: 18 });
          expressions.forEach((statement, index) => {
            addLine(`  ${statement.name || "UNKNOWN"}()`, {
              fontSize: 16,
              backgroundColor: index % 2 === 0 ? "#eee" : void 0
            });
          });
        }
        const externalModules = sourceFile.statements.filter((i) => i.type === "module");
        if (externalModules.length) {
          addLine("External Modules:", { fontSize: 18 });
          externalModules.forEach((statement, index) => {
            addLine(`  ${statement.name || "UNKNOWN"}`, {
              fontSize: 16,
              backgroundColor: index % 2 === 0 ? "#eee" : void 0
            });
          });
        }
        const modules2 = sourceFile.modules.filter((i) => i !== referringModule);
        if (modules2.length) {
          addLine("Modules:", { fontSize: 18, fill: "blue", hoverCursor: "pointer" }, () => {
            if (expandedModules.length === modules2.length) {
              setExpandedModules([]);
            } else {
              const newExpandedModules = [...expandedModules];
              sourceFile.modules.forEach((module) => {
                if (!expandedModules.includes(module)) {
                  newExpandedModules.push(module);
                }
              });
              setExpandedModules(newExpandedModules.filter((i) => i !== referringModule));
            }
          });
          modules2.forEach((module, index) => {
            addLine(`  ${getShortenedFileName(module)}`, {
              fontSize: 16,
              hoverCursor: "pointer",
              backgroundColor: index % 2 === 0 ? "#eee" : void 0
            }, () => {
              toggleModule(module);
            });
          });
        } else {
          addLine("No Modules", { fontSize: 18 });
        }
        lineOffset += 20;
        const card = new import_fabric2.fabric.Rect({
          height: lineOffset,
          width: cardWidth,
          fill: "#fff",
          rx: 10,
          ry: 10,
          shadow: new import_fabric2.fabric.Shadow({
            blur: 10
          })
        });
        setCardHeight(lineOffset);
        if (!positionRef.current) {
          positionRef.current = calculateTopLeft(fabricCanvas, cardWidth + 30, lineOffset, topAnchor, bottomAnchor, leftAnchor, rightAnchor);
        }
        const group = new import_fabric2.fabric.Group([card, ...groupArray], {
          hasControls: false,
          left: positionRef.current.left,
          top: positionRef.current.top,
          subTargetCheck: true
        });
        groupRef.current = group;
        onMove(group, () => {
          positionRef.current = { left: group.left, top: group.top };
          setArrow(getAnchorPoints({
            isModule,
            cardWidth,
            parentHeight,
            parentPosition,
            currentHeight: cardHeight,
            currentPosition: positionRef.current
          }));
        });
        fabricCanvas.add(group);
        return () => {
          fabricCanvas.remove(group);
        };
      }
    }, [fabricCanvas, sourceFileName, pointerState, expandedModules, expandedReferences]);
    (0, import_react10.useEffect)(() => {
      if (expandedModules.length) {
        setExpandedModules([]);
      }
      if (expandedReferences.length) {
        setExpandedReferences([]);
      }
    }, [sourceFileName]);
    (0, import_react10.useEffect)(() => {
      setArrow(getAnchorPoints({
        isModule,
        cardWidth,
        parentHeight,
        parentPosition,
        currentHeight: cardHeight,
        currentPosition: positionRef.current
      }));
    }, [parentPosition, isModule, positionRef.current]);
    function toggleReference(referenceName) {
      if (expandedReferences.includes(referenceName)) {
        const newExpandedReferences = [...expandedReferences].filter((i) => i !== referenceName);
        setExpandedReferences(newExpandedReferences.filter((i) => i !== referringModule));
      } else {
        const newExpandedReferences = [...expandedReferences];
        newExpandedReferences.push(referenceName);
        setExpandedReferences(newExpandedReferences.filter((i) => i !== referringModule));
      }
    }
    function toggleModule(moduleName) {
      if (expandedModules.includes(moduleName)) {
        const newExpandedModules = [...expandedModules].filter((i) => i !== moduleName);
        setExpandedModules(newExpandedModules.filter((i) => i !== referringModule));
      } else {
        const newExpandedModules = [...expandedModules];
        newExpandedModules.push(moduleName);
        setExpandedModules(newExpandedModules.filter((i) => i !== referringModule));
      }
    }
    return /* @__PURE__ */ import_react10.default.createElement(import_react10.default.Fragment, null, parentPosition && positionRef.current && /* @__PURE__ */ import_react10.default.createElement(Arrow, {
      fabricCanvas,
      lineAnchor: isModule ? arrow.lineAnchor : arrow.arrowPoint,
      arrowPoint: isModule ? arrow.arrowPoint : arrow.lineAnchor
    }), expandedReferences.map((reference, index) => /* @__PURE__ */ import_react10.default.createElement(ExploreItem, {
      key: reference,
      isReference: true,
      referringModule: sourceFileName,
      leftAnchor: isModule ? positionRef.current.left + cardWidth + cardSpacing + index * (10 + cardWidth) : positionRef.current.left + index * (10 + cardWidth),
      bottomAnchor: positionRef.current.top - cardSpacing,
      parentHeight: cardHeight,
      parentPosition: positionRef.current,
      sourceFileKeyMap,
      fabricCanvas,
      pointerState,
      sourceFileName: getFileNameWithoutExtension(sourceFileKeyMap, reference)
    })), expandedModules.map((module, index) => /* @__PURE__ */ import_react10.default.createElement(ExploreItem, {
      key: module,
      isModule: true,
      referringModule: sourceFileName,
      leftAnchor: isReference ? positionRef.current.left + cardWidth + cardSpacing + index * (10 + cardWidth) : positionRef.current.left + index * (10 + cardWidth),
      topAnchor: positionRef.current.top + cardHeight + cardSpacing,
      parentHeight: cardHeight,
      parentPosition: positionRef.current,
      sourceFileKeyMap,
      fabricCanvas,
      pointerState,
      sourceFileName: getFileNameWithoutExtension(sourceFileKeyMap, module)
    })));
  }

  // client/src/components/FabricCanvas/index.tsx
  var import_react11 = __toESM(require_react());
  var import_fabric3 = __toESM(require_fabric());
  var import_react12 = __toESM(require_react());
  function FabricCanvas({ registerFabricCanvas, registerPointerState }) {
    const canvasContainerRef = (0, import_react11.useRef)();
    const pointerState = (0, import_react11.useRef)({ pan: false, x: 0, y: 0, relativeX: 0, relativeY: 0 });
    const canvasRef = (0, import_react11.useRef)();
    const fabricRef = (0, import_react11.useRef)();
    (0, import_react12.useEffect)(() => {
      if (canvasRef.current) {
        fabricRef.current = new import_fabric3.fabric.Canvas(canvasRef.current);
      }
    }, [canvasRef]);
    (0, import_react12.useEffect)(() => {
      registerFabricCanvas(fabricRef.current);
      resizeCanvas();
    }, [fabricRef]);
    (0, import_react12.useEffect)(() => {
      registerPointerState(pointerState.current);
    }, [pointerState]);
    (0, import_react12.useEffect)(() => {
      if (canvasContainerRef.current) {
        window.addEventListener("resize", resizeCanvas);
        return () => {
          window.removeEventListener("resize", resizeCanvas);
        };
      }
    }, [canvasContainerRef]);
    function resizeCanvas() {
      if (fabricRef.current) {
        fabricRef.current.setWidth(canvasContainerRef.current.clientWidth);
        fabricRef.current.setHeight(canvasContainerRef.current.clientHeight);
        fabricRef.current.calcOffset();
      }
    }
    function startPan(event) {
      if (event.button === 2) {
        pointerState.current.pan = true;
        pointerState.current.x = event.screenX;
        pointerState.current.y = event.screenY;
      }
    }
    function stopPan(event) {
      pan(event);
      pointerState.current.pan = false;
    }
    function pan(event) {
      if (pointerState.current.pan) {
        if (fabricRef.current) {
          pointerState.current.relativeX += event.screenX - pointerState.current.x;
          pointerState.current.relativeY += event.screenY - pointerState.current.y;
          fabricRef.current.relativePan({ x: event.screenX - pointerState.current.x, y: event.screenY - pointerState.current.y });
        }
        pointerState.current.x = event.screenX;
        pointerState.current.y = event.screenY;
      }
    }
    return /* @__PURE__ */ import_react11.default.createElement("div", {
      className: css`
      flex-grow: 1;
    `,
      ref: canvasContainerRef,
      onWheel: (event) => {
        fabricRef.current.relativePan({ x: 0, y: -1 * event.deltaY });
      },
      onContextMenu: (e) => e.preventDefault(),
      onMouseDown: startPan,
      onMouseUp: stopPan,
      onMouseLeave: stopPan,
      onMouseMove: pan
    }, /* @__PURE__ */ import_react11.default.createElement("canvas", {
      ref: canvasRef
    }));
  }

  // client/src/components/SearchResult/index.tsx
  var import_react13 = __toESM(require_react());

  // node_modules/@mui/material/Card/Card.js
  var React49 = __toESM(require_react());
  var import_prop_types37 = __toESM(require_prop_types());

  // node_modules/@mui/material/Card/cardClasses.js
  function getCardUtilityClass(slot) {
    return generateUtilityClass("MuiCard", slot);
  }
  var cardClasses = generateUtilityClasses("MuiCard", ["root"]);

  // node_modules/@mui/material/Card/Card.js
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var _excluded37 = ["className", "raised"];
  var useUtilityClasses20 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return composeClasses(slots, getCardUtilityClass, classes);
  };
  var CardRoot = styled_default(Paper_default, {
    name: "MuiCard",
    slot: "Root",
    overridesResolver: (props, styles4) => styles4.root
  })(() => {
    return {
      overflow: "hidden"
    };
  });
  var Card = /* @__PURE__ */ React49.forwardRef(function Card2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCard"
    });
    const {
      className,
      raised = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded37);
    const ownerState = _extends({}, props, {
      raised
    });
    const classes = useUtilityClasses20(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(CardRoot, _extends({
      className: clsx_m_default(classes.root, className),
      elevation: raised ? 8 : void 0,
      ref,
      ownerState
    }, other));
  });
  true ? Card.propTypes = {
    children: import_prop_types37.default.node,
    classes: import_prop_types37.default.object,
    className: import_prop_types37.default.string,
    raised: chainPropTypes(import_prop_types37.default.bool, (props) => {
      if (props.raised && props.variant === "outlined") {
        return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
      }
      return null;
    }),
    sx: import_prop_types37.default.oneOfType([import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object, import_prop_types37.default.bool])), import_prop_types37.default.func, import_prop_types37.default.object])
  } : void 0;
  var Card_default = Card;

  // node_modules/@mui/material/CardActions/CardActions.js
  var React50 = __toESM(require_react());
  var import_prop_types38 = __toESM(require_prop_types());

  // node_modules/@mui/material/CardActions/cardActionsClasses.js
  function getCardActionsUtilityClass(slot) {
    return generateUtilityClass("MuiCardActions", slot);
  }
  var cardActionsClasses = generateUtilityClasses("MuiCardActions", ["root", "spacing"]);

  // node_modules/@mui/material/CardActions/CardActions.js
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var _excluded38 = ["disableSpacing", "className"];
  var useUtilityClasses21 = (ownerState) => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return composeClasses(slots, getCardActionsUtilityClass, classes);
  };
  var CardActionsRoot = styled_default("div", {
    name: "MuiCardActions",
    slot: "Root",
    overridesResolver: (props, styles4) => {
      const {
        ownerState
      } = props;
      return [styles4.root, !ownerState.disableSpacing && styles4.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    alignItems: "center",
    padding: 8
  }, !ownerState.disableSpacing && {
    "& > :not(:first-of-type)": {
      marginLeft: 8
    }
  }));
  var CardActions = /* @__PURE__ */ React50.forwardRef(function CardActions2(inProps, ref) {
    const props = useThemeProps2({
      props: inProps,
      name: "MuiCardActions"
    });
    const {
      disableSpacing = false,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
    const ownerState = _extends({}, props, {
      disableSpacing
    });
    const classes = useUtilityClasses21(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(CardActionsRoot, _extends({
      className: clsx_m_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? CardActions.propTypes = {
    children: import_prop_types38.default.node,
    classes: import_prop_types38.default.object,
    className: import_prop_types38.default.string,
    disableSpacing: import_prop_types38.default.bool,
    sx: import_prop_types38.default.oneOfType([import_prop_types38.default.arrayOf(import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object, import_prop_types38.default.bool])), import_prop_types38.default.func, import_prop_types38.default.object])
  } : void 0;
  var CardActions_default = CardActions;

  // client/src/components/SearchResult/index.tsx
  function SearchResult({ sourceFileName, isDeclaration, callback }) {
    return /* @__PURE__ */ import_react13.default.createElement(import_react13.default.Fragment, null, /* @__PURE__ */ import_react13.default.createElement(Card_default, {
      className: css`
          margin: 10px;
          position: relative;
          cursor: pointer;
        `,
      sx: { minWidth: 275, maxWidth: 800 },
      onClick: () => callback()
    }, /* @__PURE__ */ import_react13.default.createElement(CardActions_default, null, /* @__PURE__ */ import_react13.default.createElement("h3", null, sourceFileName), isDeclaration && /* @__PURE__ */ import_react13.default.createElement("div", {
      className: css`
            position: absolute;
            top: 2px;
            right: 2px;
            color: #ff6767;
          `
    }, "Declaration"))));
  }

  // client/src/components/Explorer/index.tsx
  var import_react15 = __toESM(require_react());
  var searchTimerThrottleId;
  function Explorer({ fileGraph, sourceFileKeyMap }) {
    const [sourceFileName, setSourceFileName] = (0, import_react14.useState)(fileGraph.fileName);
    const [fabricCanvas, setFabricCanvas] = (0, import_react14.useState)();
    const [pointerState, setPointerState] = (0, import_react14.useState)();
    const [searchText, setSearchText] = (0, import_react14.useState)("");
    const [searchResults, setSearchResults] = (0, import_react14.useState)([]);
    const timerRef = (0, import_react14.useRef)();
    function search() {
      setSearchResults(searchSourceFileText(sourceFileKeyMap, searchText));
    }
    (0, import_react15.useEffect)(() => {
      clearTimeout(searchTimerThrottleId);
      searchTimerThrottleId = setTimeout(search, 500);
      return () => {
        clearTimeout(searchTimerThrottleId);
      };
    }, [searchText]);
    return /* @__PURE__ */ import_react14.default.createElement("div", {
      className: css`
      display: flex;
      position: relative;
      flex-direction: column;
      flex-grow: 1;
    `
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: css`
        display: flex;
        box-shadow: 0px -3px 5px 5px;
        padding-top: 6px;
        padding-bottom: 2px;
      `
    }, /* @__PURE__ */ import_react14.default.createElement("div", {
      className: css`font-size: 32px; margin: 0px 20px; align-self: center;`
    }, "Tater - TypeScript Abstract Syntax Tree Explorer"), /* @__PURE__ */ import_react14.default.createElement(TextField_default, {
      className: css`flex-grow: 1; margin-bottom: -6px;`,
      id: "outlined-basic",
      label: "Search",
      variant: "outlined",
      value: searchText,
      onChange: (event) => setSearchText(event.target.value),
      onKeyPress: (key) => {
        if (key.key === "Enter" && searchText.length) {
          clearTimeout(searchTimerThrottleId);
          search();
        }
      }
    })), /* @__PURE__ */ import_react14.default.createElement(FabricCanvas, {
      registerFabricCanvas: (fabricCanvas2) => setFabricCanvas(fabricCanvas2),
      registerPointerState: (pointerState2) => setPointerState(pointerState2)
    }), /* @__PURE__ */ import_react14.default.createElement(ExploreItem, {
      sourceFileKeyMap,
      fabricCanvas,
      pointerState,
      sourceFileName
    }), searchText && /* @__PURE__ */ import_react14.default.createElement("div", {
      className: css`
        position: absolute;
        top: 64px;
        right: 0px;
        background: #d3d3d3d3;
      `
    }, searchResults.map((searchResult) => {
      return /* @__PURE__ */ import_react14.default.createElement(SearchResult, {
        key: searchResult.fileName,
        isDeclaration: searchResult.isDeclaration,
        sourceFileName: getShortenedFileName(searchResult.fileName),
        callback: () => setSourceFileName(searchResult.fileName)
      });
    })), searchText && /* @__PURE__ */ import_react14.default.createElement("div", {
      className: css`
        position: absolute;
        top: 2px;
        right: 0px;
        color: red;
        cursor: pointer;
        font-size: 32px;
        padding: 10px;
      `,
      onClick: () => setSearchText("")
    }, "x"));
  }

  // client/src/fileGraph.json
  var fileName = "/home/taylor/GitHub/tater-taste/client/src/App.tsx";
  var modules = [
    "/home/taylor/GitHub/tater-taste/client/src/views/Home/index.tsx"
  ];
  var fileGraph_default = {
    fileName,
    modules
  };

  // client/src/sourceFiles.json
  var _home_taylor_GitHub_tater_taste_client_src_App_tsx = {
    fileName: "/home/taylor/GitHub/tater-taste/client/src/App.tsx",
    text: "import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Home from './views/Home'\n\nReactDOM.render(\n  <Home />,\n  document.getElementById('app')\n)\n",
    modules: [
      "/home/taylor/GitHub/tater-taste/client/src/views/Home/index.tsx"
    ],
    statements: [
      {
        pos: 0,
        end: 25,
        name: "react",
        type: "module"
      },
      {
        pos: 25,
        end: 58,
        name: "react-dom",
        type: "module"
      },
      {
        pos: 90,
        end: 155,
        name: "render",
        type: "expression"
      }
    ]
  };
  var _home_taylor_GitHub_tater_taste_client_src_views_Home = {
    fileName: "/home/taylor/GitHub/tater-taste/client/src/views/Home/index.tsx",
    text: "import React from 'react'\nimport { css } from '@emotion/css'\nimport Explorer from '../../components/Explorer'\nimport fileGraph from '../../fileGraph.json'\nimport sourceFiles from '../../sourceFiles.json'\n\nexport default function Home () {\n  return (\n    <div className={css`\n      min-width: 900px;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n    `}>\n      <Explorer fileGraph={fileGraph} sourceFileKeyMap={sourceFiles} />\n    </div>\n  )\n}\n",
    modules: [
      "/home/taylor/GitHub/tater-taste/client/src/components/Explorer/index.tsx"
    ],
    statements: [
      {
        pos: 0,
        end: 25,
        name: "react",
        type: "module"
      },
      {
        pos: 25,
        end: 60,
        name: "@emotion/css",
        type: "module"
      },
      {
        pos: 109,
        end: 154,
        name: "../../fileGraph.json",
        type: "module"
      },
      {
        pos: 154,
        end: 203,
        name: "../../sourceFiles.json",
        type: "module"
      },
      {
        pos: 203,
        end: 466,
        name: "Home",
        type: "function"
      }
    ]
  };
  var _home_taylor_GitHub_tater_taste_client_src_components_Explorer = {
    fileName: "/home/taylor/GitHub/tater-taste/client/src/components/Explorer/index.tsx",
    text: "import React, { useRef, useState } from 'react'\nimport { css } from '@emotion/css'\nimport TextField from '@mui/material/TextField';\nimport { FileGraph, SourceFileKeyMap } from '../../../../ast/generateAST'\nimport ExploreItem from '../ExploreItem'\nimport { getShortenedFileName, searchSourceFileText } from '../../utils/sourceFileHelpers'\nimport FabricCanvas from '../FabricCanvas'\nimport SearchResult from '../SearchResult';\nimport { useEffect } from 'react';\n\nlet searchTimerThrottleId\n\nexport default function Explorer ({ fileGraph, sourceFileKeyMap }: { fileGraph: FileGraph, sourceFileKeyMap: SourceFileKeyMap}) {\n  const [sourceFileName, setSourceFileName] = useState(fileGraph.fileName)\n  const [fabricCanvas, setFabricCanvas] = useState()\n  const [pointerState, setPointerState] = useState()\n  const [searchText, setSearchText] = useState('')\n  const [searchResults, setSearchResults] = useState<{ fileName: string, isDeclaration?: boolean }[]>([])\n  const timerRef = useRef()\n\n  function search () {\n    setSearchResults(searchSourceFileText(sourceFileKeyMap, searchText))\n  }\n\n  useEffect(() => {\n    clearTimeout(searchTimerThrottleId)\n    searchTimerThrottleId = setTimeout(search, 500)\n\n    return () => {\n      clearTimeout(searchTimerThrottleId)\n    }\n  }, [searchText])\n\n  return (\n    <div className={css`\n      display: flex;\n      position: relative;\n      flex-direction: column;\n      flex-grow: 1;\n    `}>\n      <div className={css`\n        display: flex;\n        box-shadow: 0px -3px 5px 5px;\n        padding-top: 6px;\n        padding-bottom: 2px;\n      `}>\n        <div className={css`font-size: 32px; margin: 0px 20px; align-self: center;`}>Tater - TypeScript Abstract Syntax Tree Explorer</div>\n        <TextField\n          className={css`flex-grow: 1; margin-bottom: -6px;`}\n          id=\"outlined-basic\"\n          label=\"Search\"\n          variant=\"outlined\"\n          value={searchText}\n          onChange={event => setSearchText(event.target.value)}\n          onKeyPress={key => {\n            if (key.key === 'Enter' && searchText.length) {\n              clearTimeout(searchTimerThrottleId)\n              search()\n            }\n          }} />\n      </div>\n      <FabricCanvas registerFabricCanvas={fabricCanvas => setFabricCanvas(fabricCanvas)}\n        registerPointerState={pointerState => setPointerState(pointerState)} />\n      <ExploreItem\n        sourceFileKeyMap={sourceFileKeyMap}\n        fabricCanvas={fabricCanvas}\n        pointerState={pointerState}\n        sourceFileName={sourceFileName} />\n      {searchText && <div className={css`\n        position: absolute;\n        top: 64px;\n        right: 0px;\n        background: #d3d3d3d3;\n      `}>\n        {searchResults.map(searchResult => {\n          return (\n            <SearchResult key={searchResult.fileName}\n              isDeclaration={searchResult.isDeclaration}\n              sourceFileName={getShortenedFileName(searchResult.fileName)}\n              callback={() => setSourceFileName(searchResult.fileName)} />\n          )\n        })}\n      </div>}\n      {searchText && <div className={css`\n        position: absolute;\n        top: 2px;\n        right: 0px;\n        color: red;\n        cursor: pointer;\n        font-size: 32px;\n        padding: 10px;\n      `} onClick={() => setSearchText('')}>\n        x\n      </div>}\n    </div>\n  )\n}\n",
    modules: [
      "/home/taylor/GitHub/tater-taste/ast/generateAST.ts",
      "/home/taylor/GitHub/tater-taste/client/src/components/ExploreItem/index.tsx",
      "/home/taylor/GitHub/tater-taste/client/src/utils/sourceFileHelpers.ts",
      "/home/taylor/GitHub/tater-taste/client/src/components/FabricCanvas/index.tsx",
      "/home/taylor/GitHub/tater-taste/client/src/components/SearchResult/index.tsx"
    ],
    statements: [
      {
        pos: 0,
        end: 47,
        name: "react",
        type: "module"
      },
      {
        pos: 47,
        end: 82,
        name: "@emotion/css",
        type: "module"
      },
      {
        pos: 82,
        end: 131,
        name: "@mui/material/TextField",
        type: "module"
      },
      {
        pos: 424,
        end: 459,
        name: "react",
        type: "module"
      },
      {
        pos: 486,
        end: 3330,
        name: "Explorer",
        type: "function"
      }
    ]
  };
  var _home_taylor_GitHub_tater_taste_ast_generateAST = {
    fileName: "/home/taylor/GitHub/tater-taste/ast/generateAST.ts",
    text: "import { existsSync } from 'fs';\nimport { join } from 'path';\nimport ts = require('typescript');\n\nconst tsConfigCompilerOptions = {\n  moduleResolution: 2,\n  noImplicitAny: false,\n  target: 2,\n};\n\nfunction getEntryFilePath(entryPoint: string): string {\n  let entryFilePath = join(process.cwd(), entryPoint || '')\n  fileVariations(entryFilePath).concat(entryPoint ? fileVariations(entryPoint) : []).sort((a, b) => {\n    if (a.length > b.length) {\n      return -1\n    } else {\n      return 1\n    }\n  }).some((i) => {\n    if (existsSync(i)) {\n      entryFilePath = i\n      console.log('Input', entryFilePath)\n      return true\n    }\n  })\n  return entryFilePath\n}\n\nexport function generateAST(entryPoint?: string, tsConfigPath?: string): { sourceFiles: SourceFileKeyMap, fileGraph: FileGraph } {\n  let entryFilePath = getEntryFilePath(entryPoint || '')\n\n  const program = ts.createProgram([entryFilePath], grabConfig(tsConfigPath));\n  const programFileMap: ts.Map<ts.SourceFile> = (program as any).getFilesByNameMap();\n  const sourceFiles: SourceFileKeyMap = {};\n\n  const fileGraph = traverseFile(sourceFiles, entryFilePath, programFileMap);\n  return { sourceFiles, fileGraph };\n}\n\nfunction grabConfig(tsConfigPath?: string) {\n  if (tsConfigPath) {\n    const tsConfigFilePath = join(process.cwd(), tsConfigPath)\n    try {\n      const tsConfig = require(tsConfigFilePath)\n      if (tsConfig.compilerOptions) {\n        return tsConfig.compilerOptions\n      }\n    } catch (err) {\n      console.log('Could not load tsconfig at', tsConfigFilePath, '\\nPlease ensure there are no comments in the tsconfig supplied\\n\\n')\n      throw err\n    }\n  }\n  return tsConfigCompilerOptions\n}\n\nexport type SourceFileKeyMap = { [key: string]: SourceFile }\n\nexport type SourceFile = {\n  fileName: string,\n  text: string,\n  modules: string[]\n  statements?: Statement[]\n}\n\nexport type FileGraph = {\n  fileName: string,\n  modules: string[]\n}\n\nexport type Statement = {\n  pos: number,\n  end: number,\n  name?: string,\n  type: string,\n  statements?: Statement[]\n}\n\nfunction traverseFile(sourceFiles: SourceFileKeyMap, file: string, fileMap: ts.Map<ts.SourceFile>, parentSourceFile?: any, importStatement?: string, prefix: string = ''): FileGraph {\n  const root = findFile(file, fileMap, importStatement);\n\n  if (!root && parentSourceFile && parentSourceFile.resolvedModules.get(importStatement)) {\n    const subProgram = ts.createProgram(fileVariations(file).filter((i) => existsSync(i)), tsConfigCompilerOptions);\n    const subFileMap: ts.Map<ts.SourceFile> = (subProgram as any).getFilesByNameMap();\n    return traverseFile(sourceFiles, file, subFileMap);\n  }\n\n  if (!root) {\n    throw new Error(`Could not find file ${file}`);\n  }\n  if (sourceFiles[file]) {\n    return sourceFiles[file];\n  }\n  const parsedFile: SourceFile = {\n    fileName: root.fileName,\n    text: root.text,\n    modules: [],\n    statements: [],\n  };\n  sourceFiles[file] = parsedFile;\n  if (!root.statements) {\n    throw new Error(`No root statements in file ${file}`);\n  }\n  root.statements.forEach((statement: any) => {\n    if (statement.kind === ts.SyntaxKind.ImportDeclaration) {\n      try {\n        const modulePath = join(root.fileName, '../', statement.moduleSpecifier.text);\n        parsedFile.modules.push(traverseFile(sourceFiles, modulePath, fileMap, root, statement.moduleSpecifier.text, `${prefix}\\t`).fileName);\n      } catch (err) {\n        parsedFile.statements?.push({\n          pos: statement.pos,\n          end: statement.end,\n          name: statement.moduleSpecifier.text,\n          type: 'module',\n        });\n        console.info(prefix, `External module: ${statement.moduleSpecifier.text} in ${file}`);\n      }\n    } else if (statement.kind === ts.SyntaxKind.ImportEqualsDeclaration) {\n      try {\n        const modulePath = join(root.fileName, '../', statement.moduleReference.expression.text);\n        parsedFile.modules.push(traverseFile(sourceFiles, modulePath, fileMap, root, statement.moduleReference.expression.text, `${prefix}\\t`).fileName);\n      } catch (err) {\n        parsedFile.statements?.push({\n          pos: statement.pos,\n          end: statement.end,\n          name: statement.moduleReference.expression.text,\n          type: 'module',\n        });\n        console.info(prefix, `External module: ${statement.moduleReference.expression.text} in ${file}`);\n      }\n    } else if (statement.kind === ts.SyntaxKind.ClassDeclaration) {\n      parsedFile.statements?.push({\n        pos: statement.pos,\n        end: statement.end,\n        name: statement.name?.escapedText,\n        type: 'class',\n        statements: statement.members?.map((nestedStatement: any) => {\n          if (nestedStatement.kind === ts.SyntaxKind.FunctionDeclaration) {\n            return {\n              pos: nestedStatement.pos,\n              end: nestedStatement.end,\n              name: nestedStatement.name.escapedText,\n              type: 'function',\n            };\n          } else if (nestedStatement.kind === ts.SyntaxKind.MethodDeclaration) {\n            return {\n              pos: nestedStatement.pos,\n              end: nestedStatement.end,\n              name: nestedStatement.name.escapedText,\n              type: 'method',\n            };\n          }\n        }).filter((i: any) => i)\n      });\n    } else if (statement.kind === ts.SyntaxKind.FunctionDeclaration) {\n      parsedFile.statements?.push({\n        pos: statement.pos,\n        end: statement.end,\n        name: statement.name.escapedText,\n        type: 'function',\n      });\n    } else if (statement.kind === ts.SyntaxKind.MethodDeclaration) {\n      parsedFile.statements?.push({\n        pos: statement.pos,\n        end: statement.end,\n        name: statement.name.escapedText,\n        type: 'method',\n      });\n    } else if (statement.kind === ts.SyntaxKind.ExpressionStatement) {\n      parsedFile.statements?.push({\n        pos: statement.pos,\n        end: statement.end,\n        name: statement.expression.name?.escapedText || statement.expression.expression?.name.escapedText || statement.expression.expression?.expression?.name.escapedText,\n        type: 'expression',\n      });\n    } else if (statement.moduleSpecifier?.text) {\n      // Catch all statements with a module specified; EG: ts.SyntaxKind.ExportDeclaration\n      try {\n        const modulePath = join(root.fileName, '../', statement.moduleSpecifier.text);\n        parsedFile.modules.push(traverseFile(sourceFiles, modulePath, fileMap, root, statement.moduleSpecifier.text, `${prefix}\\t`).fileName);\n      } catch (err) {\n        parsedFile.statements?.push({\n          pos: statement.pos,\n          end: statement.end,\n          name: statement.moduleSpecifier.text,\n          type: 'module',\n        });\n        console.info(prefix, `External module: ${statement.moduleSpecifier.text} in ${file}`);\n      }\n    } else {\n      // console.debug(prefix, 'Missed something', ts.SyntaxKind[statement.kind]);\n    }\n  });\n  return { fileName: parsedFile.fileName, modules: parsedFile.modules };\n}\n\nfunction fileVariations(file: string): string[] {\n  return [\n    file,\n    `${file}.ts`,\n    `${file}.tsx`,\n    file.toLowerCase(),\n    `${file}.ts`.toLowerCase(),\n    `${file}.tsx`.toLowerCase(),\n    join(file, 'index.ts'),\n    join(file, 'index.tsx'),\n    join(file, 'index.ts').toLowerCase(),\n    join(file, 'index.tsx').toLowerCase(),\n  ];\n}\n\nfunction findFile(file: string, fileMap: ts.Map<ts.SourceFile>, importStatement?: string): ts.SourceFile | undefined {\n  let foundFile;\n  if (importStatement) {\n    fileVariations(importStatement).some((filePath) => {\n      foundFile = fileMap.get(filePath);\n      return !!foundFile;\n    });\n  }\n  if (!foundFile) {\n    fileVariations(file).some((filePath) => {\n      foundFile = fileMap.get(filePath);\n      return !!foundFile;\n    });\n  }\n  return foundFile;\n}\n",
    modules: [],
    statements: [
      {
        pos: 0,
        end: 32,
        name: "fs",
        type: "module"
      },
      {
        pos: 32,
        end: 61,
        name: "path",
        type: "module"
      },
      {
        pos: 61,
        end: 96,
        name: "typescript",
        type: "module"
      },
      {
        pos: 194,
        end: 658,
        name: "getEntryFilePath",
        type: "function"
      },
      {
        pos: 658,
        end: 1175,
        name: "generateAST",
        type: "function"
      },
      {
        pos: 1175,
        end: 1668,
        name: "grabConfig",
        type: "function"
      },
      {
        pos: 2031,
        end: 6980,
        name: "traverseFile",
        type: "function"
      },
      {
        pos: 6980,
        end: 7327,
        name: "fileVariations",
        type: "function"
      },
      {
        pos: 7327,
        end: 7792,
        name: "findFile",
        type: "function"
      }
    ]
  };
  var _home_taylor_GitHub_tater_taste_client_src_components_ExploreItem = {
    fileName: "/home/taylor/GitHub/tater-taste/client/src/components/ExploreItem/index.tsx",
    text: "import React, { useEffect, useRef, useState } from 'react';\nimport { fabric } from 'fabric';\nimport { SourceFileKeyMap } from '../../../../ast/generateAST'\nimport { getFileNameWithoutExtension, getShortenedFileName, searchSourceFileModules } from '../../utils/sourceFileHelpers'\nimport { calculateTopLeft, getAnchorPoints, onClick, onMove } from '../../utils/fabricHelpers';\nimport Arrow from '../Arrow';\n\nconst cardWidth = 500\nconst cardSpacing = 80\n\nexport default function ExploreItem({\n  fabricCanvas,\n  pointerState,\n  isReference,\n  isModule,\n  referringModule,\n  parentHeight,\n  parentPosition,\n  topAnchor,\n  bottomAnchor,\n  leftAnchor,\n  rightAnchor,\n  sourceFileName,\n  sourceFileKeyMap\n}:\n  {\n    fabricCanvas: fabric.Canvas,\n    pointerState,\n    isReference?: boolean,\n    isModule?: boolean,\n    referringModule?: string,\n    parentHeight?: number,\n    parentPosition?: { left: number, top: number},\n    topAnchor?: number,\n    bottomAnchor?: number,\n    leftAnchor?: number,\n    rightAnchor?: number,\n    sourceFileName: string,\n    sourceFileKeyMap: SourceFileKeyMap\n  }) {\n  const groupRef = useRef<fabric.Group>()\n  const positionRef = useRef<{ left: number, top: number }>()\n  const [ expandedReferences, setExpandedReferences ] = useState([])\n  const [ expandedModules, setExpandedModules ] = useState<string[]>([])\n  const [ cardHeight, setCardHeight ] = useState(400)\n  const [ arrow, setArrow ] = useState<{ lineAnchor?: { x: number; y: number; }; arrowPoint: { x: number; y: number; } }>()\n\n  useEffect(() => {\n    if (fabricCanvas && pointerState) {\n      const sourceFile = sourceFileKeyMap[getFileNameWithoutExtension(sourceFileKeyMap, sourceFileName)]\n      let lineOffset = 20\n      let margin = 20\n      let lineSpacing = 10\n\n      const groupArray = []\n\n      function addLine (text: string, options: fabric.ITextboxOptions, handler?: any) {\n        const textBox = new fabric.Textbox(text, {\n          left: margin,\n          top: lineOffset,\n          width: cardWidth - margin * 2,\n          ...options\n        })\n        if (handler) {\n          onClick(textBox, handler)\n        }\n        groupArray.push(textBox)\n        lineOffset += (options.fontSize || 40) + lineSpacing\n      }\n\n      addLine(getShortenedFileName(sourceFileName), { fontSize: 24, fontWeight: 'bold' }, () => {\n        console.log('clicked title: modal with code?')\n      })\n\n      // Margin below header\n      lineOffset += 20\n\n      const references = searchSourceFileModules(sourceFileKeyMap, sourceFileName).map(i => i.fileName)\n      const filteredReferences = references.filter(i => i !== referringModule)\n      if (filteredReferences.length) {\n        addLine('References:', { fontSize: 18, fill: 'blue', hoverCursor: 'pointer' }, () => {\n          if (expandedReferences.length === filteredReferences.length) {\n            setExpandedReferences([])\n          } else {\n            const newExpandedReferences = [...expandedReferences]\n            references.forEach(reference => {\n              if (!expandedReferences.includes(reference)) {\n                newExpandedReferences.push(reference)\n              }\n            })\n            setExpandedReferences(newExpandedReferences.filter(i => i !== referringModule))\n          }\n        })\n\n        filteredReferences.forEach((reference, index) => {\n          addLine(`  ${getShortenedFileName(reference)}`, {\n            fontSize: 16,\n            hoverCursor: 'pointer',\n            backgroundColor: index % 2 === 0 ? '#eee' : undefined\n          }, () => {\n            toggleReference(reference)\n          })\n        })\n      }\n\n      const classes = sourceFile.statements.filter(i => i.type === 'class')\n      if (classes.length) {\n        addLine('Classes:', { fontSize: 18 })\n\n        classes.forEach((classStatement, index) => {\n          addLine(`  ${classStatement.name || 'UNKNOWN'}`, {\n            fontSize: 16,\n            backgroundColor: index % 2 === 0 ? '#eee' : undefined\n          })\n          classStatement.statements.forEach(subStatement => {\n            addLine(`    ${subStatement.name || 'UNKNOWN'}()`, { fontSize: 16, backgroundColor: index % 2 === 0 ? '#eee' : undefined })\n          })\n        })\n      } else {\n        const declarations = sourceFile.statements.filter(i => i.type === 'function' || i.type === 'method')\n        if (declarations.length) {\n          addLine('Declarations:', { fontSize: 18 })\n  \n          declarations.forEach((statement, index) => {\n            if (/^[A-Z]/.test(statement.name)) {\n              addLine(`    <${statement.name || 'UNKNOWN'}>`, { fontSize: 16, backgroundColor: index % 2 === 0 ? '#eee' : undefined })\n            } else {\n              addLine(`    ${statement.name || 'UNKNOWN'}()`, { fontSize: 16, backgroundColor: index % 2 === 0 ? '#eee' : undefined })\n            }\n          })\n        }\n      }\n\n      const expressions = sourceFile.statements.filter(i => i.type === 'expression')\n      if (expressions.length) {\n        addLine('Expressions:', { fontSize: 18 })\n\n        expressions.forEach((statement, index) => {\n          addLine(`  ${statement.name || 'UNKNOWN'}()`, {\n            fontSize: 16,\n            backgroundColor: index % 2 === 0 ? '#eee' : undefined\n          })\n        })\n      }\n\n      const externalModules = sourceFile.statements.filter(i => i.type === 'module')\n      if (externalModules.length) {\n        addLine('External Modules:', { fontSize: 18 })\n\n        externalModules.forEach((statement, index) => {\n          addLine(`  ${statement.name || 'UNKNOWN'}`, {\n            fontSize: 16,\n            backgroundColor: index % 2 === 0 ? '#eee' : undefined\n          })\n        })\n      }\n\n      const modules = sourceFile.modules.filter(i => i !== referringModule)\n      if (modules.length) {\n        addLine('Modules:', { fontSize: 18, fill: 'blue', hoverCursor: 'pointer' }, () => {\n          if (expandedModules.length === modules.length) {\n            setExpandedModules([])\n          } else {\n            const newExpandedModules = [...expandedModules]\n            sourceFile.modules.forEach(module => {\n              if (!expandedModules.includes(module)) {\n                newExpandedModules.push(module)\n              }\n            })\n            setExpandedModules(newExpandedModules.filter(i => i !== referringModule))\n          }\n        })\n\n        modules.forEach((module, index) => {\n          addLine(`  ${getShortenedFileName(module)}`, {\n            fontSize: 16,\n            hoverCursor: 'pointer',\n            backgroundColor: index % 2 === 0 ? '#eee' : undefined\n          }, () => {\n            toggleModule(module)\n          })\n        })\n      } else {\n        addLine('No Modules', { fontSize: 18 })\n      }\n\n      // Bottom margin for card\n      lineOffset += 20\n\n      const card = new fabric.Rect({\n        height: lineOffset,\n        width: cardWidth,\n        fill: '#fff',\n        rx: 10,\n        ry: 10,\n        shadow: new fabric.Shadow({\n          blur: 10,\n        })\n      });\n\n      setCardHeight(lineOffset)\n      if (!positionRef.current) {\n        positionRef.current = calculateTopLeft(fabricCanvas, cardWidth + 30, lineOffset, topAnchor, bottomAnchor, leftAnchor, rightAnchor)\n      }\n\n      const group = new fabric.Group([card, ...groupArray], {\n        hasControls: false,\n        left: positionRef.current.left,\n        top: positionRef.current.top,\n        subTargetCheck: true\n      });\n      groupRef.current = group\n\n      onMove(group, () => {\n        positionRef.current = { left: group.left, top: group.top }\n        setArrow(getAnchorPoints({\n          isModule,\n          cardWidth,\n          parentHeight,\n          parentPosition,\n          currentHeight: cardHeight,\n          currentPosition: positionRef.current\n        }))\n      })\n      fabricCanvas.add(group)\n\n      return () => {\n        fabricCanvas.remove(group)\n      }\n    }\n  }, [fabricCanvas, sourceFileName, pointerState, expandedModules, expandedReferences])\n\n  useEffect(() => {\n    if (expandedModules.length) {\n      setExpandedModules([])\n    }\n    if (expandedReferences.length) {\n      setExpandedReferences([])\n    }\n  }, [sourceFileName])\n\n  useEffect(() => {\n    setArrow(getAnchorPoints({\n      isModule,\n      cardWidth,\n      parentHeight,\n      parentPosition,\n      currentHeight: cardHeight,\n      currentPosition: positionRef.current\n    }))\n  }, [parentPosition, isModule, positionRef.current])\n\n  function toggleReference (referenceName: string) {\n    if (expandedReferences.includes(referenceName)) {\n      const newExpandedReferences = [...expandedReferences].filter(i => i !== referenceName)\n      setExpandedReferences(newExpandedReferences.filter(i => i !== referringModule))\n    } else {\n      const newExpandedReferences = [...expandedReferences]\n      newExpandedReferences.push(referenceName)\n      setExpandedReferences(newExpandedReferences.filter(i => i !== referringModule))\n    }\n  }\n\n  function toggleModule (moduleName: string) {\n    if (expandedModules.includes(moduleName)) {\n      const newExpandedModules = [...expandedModules].filter(i => i !== moduleName)\n      setExpandedModules(newExpandedModules.filter(i => i !== referringModule))\n    } else {\n      const newExpandedModules = [...expandedModules]\n      newExpandedModules.push(moduleName)\n      setExpandedModules(newExpandedModules.filter(i => i !== referringModule))\n    }\n  }\n\n  return <>\n    {parentPosition && positionRef.current && <Arrow\n      fabricCanvas={fabricCanvas}\n      // If it is a reference, reverse the direction of the arrow\n      lineAnchor={isModule ? arrow.lineAnchor : arrow.arrowPoint}\n      arrowPoint={isModule ? arrow.arrowPoint : arrow.lineAnchor} />}\n    {expandedReferences.map((reference, index) => <ExploreItem key={reference}\n      isReference\n      referringModule={sourceFileName}\n      leftAnchor={isModule ? positionRef.current.left + cardWidth + cardSpacing + index * (10 + cardWidth): positionRef.current.left + index * (10 + cardWidth)}\n      bottomAnchor={positionRef.current.top - cardSpacing}\n      parentHeight={cardHeight}\n      parentPosition={positionRef.current}\n      sourceFileKeyMap={sourceFileKeyMap}\n      fabricCanvas={fabricCanvas}\n      pointerState={pointerState}\n      sourceFileName={getFileNameWithoutExtension(sourceFileKeyMap, reference)} />)}\n    {expandedModules.map((module, index) => <ExploreItem key={module}\n      isModule\n      referringModule={sourceFileName}\n      leftAnchor={isReference ? positionRef.current.left + cardWidth + cardSpacing + index * (10 + cardWidth) : positionRef.current.left + index * (10 + cardWidth)}\n      topAnchor={positionRef.current.top + cardHeight + cardSpacing}\n      parentHeight={cardHeight}\n      parentPosition={positionRef.current}\n      sourceFileKeyMap={sourceFileKeyMap}\n      fabricCanvas={fabricCanvas}\n      pointerState={pointerState}\n      sourceFileName={getFileNameWithoutExtension(sourceFileKeyMap, module)} />)}\n  </>\n}\n",
    modules: [
      "/home/taylor/GitHub/tater-taste/ast/generateAST.ts",
      "/home/taylor/GitHub/tater-taste/client/src/utils/sourceFileHelpers.ts",
      "/home/taylor/GitHub/tater-taste/client/src/utils/fabricHelpers.ts",
      "/home/taylor/GitHub/tater-taste/client/src/components/Arrow/index.tsx"
    ],
    statements: [
      {
        pos: 0,
        end: 59,
        name: "react",
        type: "module"
      },
      {
        pos: 59,
        end: 92,
        name: "fabric",
        type: "module"
      },
      {
        pos: 450,
        end: 10929,
        name: "ExploreItem",
        type: "function"
      }
    ]
  };
  var _home_taylor_GitHub_tater_taste_client_src_utils_sourceFileHelpers = {
    fileName: "/home/taylor/GitHub/tater-taste/client/src/utils/sourceFileHelpers.ts",
    text: "import { SourceFile, SourceFileKeyMap } from \"../../../ast/generateAST\"\n\nexport function getFileNameWithoutExtension (sourceFileKeyMap: SourceFileKeyMap, fileName: string): string {\n  if (sourceFileKeyMap[fileName]) {\n    return fileName\n  }\n  let shortened = fileName.replace(/(.*)\\..*/, '$1')\n  if (sourceFileKeyMap[shortened]) {\n    return shortened\n  }\n  shortened = fileName.replace(/(.*)\\/.*/, '$1')\n  if (sourceFileKeyMap[shortened]) {\n    return shortened\n  }\n  throw new Error(`Could not find file ${fileName}`)\n}\n\nexport function getShortenedFileName (fileName: string): string {\n  const match = fileName.match(/([^/]*)\\/*([^/]*)\\/*([^/]*)$/)\n  if (match) {\n    return match.slice(1).filter(i => i).join('/')\n  } else {\n    return fileName\n  }\n}\n\nfunction matchFileText (sourceFile: SourceFile, searchString: string): boolean {\n  return searchString.split(' ').every(searchText => {\n    const regex = new RegExp(searchText.replace(/([^a-z0-9])/g, '\\\\$1'), 'i')\n    if (regex.test(sourceFile.fileName)) {\n      return true\n    }\n    if (regex.test(sourceFile.text)) {\n      return true\n    }\n  })\n}\n\nfunction matchFileDeclaration (sourceFile: SourceFile, searchString: string): boolean {\n  return searchString.split(' ').every(searchText => {\n    const regex = new RegExp(searchText.replace(/([^a-z0-9])/g, '\\\\$1'), 'i')\n    return sourceFile.statements.some(i => {\n      if (i.type === 'module') return false\n      if (i.type === 'expression') return false\n      return regex.test(i.name) || i.statements?.some(j => regex.test(j.name))\n    })\n  })\n}\n\nexport function searchSourceFileText (sourceFileKeyMap: SourceFileKeyMap, searchText: string) {\n  return Object.values(sourceFileKeyMap).reduce((accumulator, sourceFile) => {\n    if (matchFileDeclaration(sourceFile, searchText)) {\n      accumulator.push({ fileName: sourceFile.fileName, isDeclaration: true })\n    } else if (matchFileText(sourceFile, searchText)) {\n      accumulator.push({ fileName: sourceFile.fileName })\n    }\n    return accumulator\n  }, [])\n}\n\nexport function searchSourceFileModules (sourceFileKeyMap: SourceFileKeyMap, fileName: string) {\n  return Object.values(sourceFileKeyMap).reduce((accumulator, sourceFile) => {\n    if (sourceFile.modules.includes(fileName)) {\n      accumulator.push({ fileName: sourceFile.fileName })\n      return accumulator\n    } else {\n      return accumulator\n    }\n  }, [])\n}\n",
    modules: [
      "/home/taylor/GitHub/tater-taste/ast/generateAST.ts"
    ],
    statements: [
      {
        pos: 71,
        end: 522,
        name: "getFileNameWithoutExtension",
        type: "function"
      },
      {
        pos: 522,
        end: 755,
        name: "getShortenedFileName",
        type: "function"
      },
      {
        pos: 755,
        end: 1107,
        name: "matchFileText",
        type: "function"
      },
      {
        pos: 1107,
        end: 1559,
        name: "matchFileDeclaration",
        type: "function"
      },
      {
        pos: 1559,
        end: 2024,
        name: "searchSourceFileText",
        type: "function"
      },
      {
        pos: 2024,
        end: 2388,
        name: "searchSourceFileModules",
        type: "function"
      }
    ]
  };
  var _home_taylor_GitHub_tater_taste_client_src_utils_fabricHelpers = {
    fileName: "/home/taylor/GitHub/tater-taste/client/src/utils/fabricHelpers.ts",
    text: "export function addToGroup (fabricCanvas: fabric.Canvas, pointerState, group: fabric.Group, createItem: (xOffset: number, yOffset: number) => fabric.Object) {\n  const offset = getObjectOffset(pointerState, group)\n  group.addWithUpdate(createItem(offset.x, offset.y))\n  fabricCanvas.requestRenderAll()\n}\n\n// setTimeout(() => {\n//   addToGroup(fabricCanvas, pointerState, group, (x, y) => new fabric.Textbox('Other stuff', {\n//     left: x + 30,\n//     top: y + 30,\n//     width: 170,\n//     fontSize: 20,\n//   }))\n// }, 1000)\n\nexport function getObjectOffset (pointerState, fabricObject: fabric.Object): { x: number, y: number } {\n  const coords = fabricObject.calcCoords().tl\n  return { x: coords.x - pointerState.relativeX, y: coords.y - pointerState.relativeY }\n}\n\nexport function calculateTopLeft (fabricCanvas: fabric.Canvas, cardWidth: number, cardHeight: number, topAnchor?: number, bottomAnchor?: number, leftAnchor?: number, rightAnchor?: number): { top: number, left: number } {\n  if (!fabricCanvas) return\n  let top\n  let left\n\n  if (typeof(topAnchor) !== 'undefined') {\n    top = topAnchor\n  } else if (typeof(bottomAnchor) !== 'undefined') {\n    top = bottomAnchor - cardHeight\n  } else {\n    top = Math.floor((fabricCanvas.height - cardHeight) / 4)\n  }\n\n  if (typeof(leftAnchor) !== 'undefined') {\n    left = leftAnchor\n  } else if (typeof(rightAnchor) !== 'undefined') {\n    left = rightAnchor - cardWidth\n  } else {\n    left = Math.floor((fabricCanvas.width - cardWidth) / 4)\n  }\n\n  return { top, left }\n}\n\nexport function onMove (fabricObject: fabric.Object, callback: Function) {\n  let down = false\n  fabricObject.on('mousedown', () => {\n    down = true\n  })\n  fabricObject.on('mousemove', () => {\n    if (down) {\n      callback()\n    }\n  })\n  fabricObject.on('mouseup', () => {\n    down = false\n  })\n}\n\nexport function onClick (fabricObject: fabric.Object, callback: Function) {\n  let down = false\n  fabricObject.on('mousedown', () => {\n    down = true\n  })\n  fabricObject.on('mousemove', () => {\n    down = false\n  })\n  fabricObject.on('mouseup', () => {\n    if (down) {\n      callback()\n    }\n    down = false\n  })\n}\n\ntype AnchorPoints = {\n  lineAnchor?: {\n    x: number,\n    y: number\n  },\n  arrowPoint: {\n    x: number,\n    y: number\n  }\n}\n\nconst offsetFromCard = 10\n\nexport function getAnchorPoints ({\n  isModule,\n  cardWidth,\n  parentHeight,\n  parentPosition,\n  currentHeight,\n  currentPosition\n}: {\n  isModule: boolean,\n  cardWidth: number,\n  parentHeight: number,\n  parentPosition: { left: number, top: number },\n  currentHeight: number,\n  currentPosition: { left: number, top: number }\n}): AnchorPoints {\n  if (!currentPosition) return\n  \n  const res: AnchorPoints = {\n    arrowPoint: {\n      x: currentPosition.left + cardWidth / 2,\n      // if it's a module use the top of the card: else use the bottom\n      y: isModule ? currentPosition.top - offsetFromCard : currentHeight + currentPosition.top + offsetFromCard\n    }\n  }\n\n  if (!parentPosition) return res\n\n  res.lineAnchor = {\n    x: parentPosition.left + cardWidth / 2,\n    // if it's a module use the bottom of the parent card: else use the top\n    y: isModule ? parentHeight + parentPosition.top + offsetFromCard : parentPosition.top - offsetFromCard\n  }\n\n  return res\n}\n",
    modules: [],
    statements: [
      {
        pos: 0,
        end: 302,
        name: "addToGroup",
        type: "function"
      },
      {
        pos: 302,
        end: 765,
        name: "getObjectOffset",
        type: "function"
      },
      {
        pos: 765,
        end: 1520,
        name: "calculateTopLeft",
        type: "function"
      },
      {
        pos: 1520,
        end: 1819,
        name: "onMove",
        type: "function"
      },
      {
        pos: 1819,
        end: 2136,
        name: "onClick",
        type: "function"
      },
      {
        pos: 2288,
        end: 3257,
        name: "getAnchorPoints",
        type: "function"
      }
    ]
  };
  var _home_taylor_GitHub_tater_taste_client_src_components_Arrow = {
    fileName: "/home/taylor/GitHub/tater-taste/client/src/components/Arrow/index.tsx",
    text: "import { useEffect } from \"react\"\nimport { fabric } from \"fabric\"\n\n// {parentPosition && <Arrow fabricCanvas={fabricCanvas} isModule={isModule} parentHeight={parentHeight} parentPosition={parentPosition} currentPosition={positionRef.current} currentHeight={cardHeight} />}\n\nexport default function Arrow ({\n  fabricCanvas,\n  lineAnchor,\n  arrowPoint\n}: {\n  fabricCanvas: fabric.Canvas,\n  lineAnchor: { x: number, y: number },\n  arrowPoint: { x: number, y: number }\n}) {\n  useEffect(() => {\n    if (!lineAnchor || !arrowPoint) return\n    // const arrowIsLeft = arrowPoint.x < lineAnchor.x\n    const arrowIsBelow = arrowPoint.y < lineAnchor.y\n    // const offset = (arrowPoint.y - lineAnchor.y) / 2\n    const midY = (arrowPoint.y - lineAnchor.y) / 2 + lineAnchor.y\n    const midX = (arrowPoint.x - lineAnchor.x) / 2 + lineAnchor.x\n    const line = new fabric.Path(`\n    M ${lineAnchor.x} ${lineAnchor.y}\n    Q ${lineAnchor.x}, ${midY}, ${midX}, ${midY}\n    M ${midX} ${midY}\n    Q ${arrowPoint.x}, ${midY}, ${arrowPoint.x}, ${arrowPoint.y}\n    M ${arrowPoint.x - 8} ${arrowPoint.y}\n    Q ${arrowPoint.x - 8}, ${arrowPoint.y}, ${arrowPoint.x}, ${arrowIsBelow ? arrowPoint.y - 8 : arrowPoint.y + 8}\n    M ${arrowPoint.x + 8} ${arrowPoint.y}\n    Q ${arrowPoint.x + 8}, ${arrowPoint.y}, ${arrowPoint.x}, ${arrowIsBelow ? arrowPoint.y - 8 : arrowPoint.y + 8}\n    `, {\n      fill: '', stroke: 'black', strokeWidth: 3, strokeLineCap: 'round', selectable: false\n    })\n    // const line = new fabric.Path(`M ${lineAnchor.x} ${lineAnchor.y} Q ${lineAnchor.x}, ${midY}, ${arrowPoint.x}, ${arrowPoint.y}`, { fill: '', stroke: 'black', hasControls: false, lockMovementX: true, lockMovementY: true })\n    // const line1 = new fabric.Path(`M ${lineAnchor.x} ${lineAnchor.y} Q ${arrowPoint.x}, ${arrowIsBelow ? lineAnchor.y + offset : lineAnchor.y - offset}, ${arrowIsLeft ? lineAnchor.x - offset : lineAnchor.x + offset}, ${arrowIsBelow ? lineAnchor.y + offset : lineAnchor.y - offset}`, { fill: '', stroke: 'black' })\n    // const line2 = new fabric.Path(`M ${arrowPoint.x} ${arrowPoint.y} Q ${arrowPoint.x}, ${arrowIsBelow ? arrowPoint.y - offset : arrowPoint.y + offset}, ${arrowIsLeft ? arrowPoint.x - offset: arrowPoint.x + offset}, ${arrowIsBelow ? arrowPoint.y - offset : arrowPoint.y + offset}`, { fill: '', stroke: 'black' })\n    // const straightLine = new fabric.Line([lineAnchor.x + offset, midY, arrowPoint.x - offset, midY], { fill: '', stroke: 'black' })\n    fabricCanvas.add(line)\n    // fabricCanvas.add(line1)\n    // fabricCanvas.add(line2)\n    // fabricCanvas.add(straightLine)\n    return () => {\n      fabricCanvas.remove(line)\n      // fabricCanvas.remove(line1)\n      // fabricCanvas.remove(line2)\n      // fabricCanvas.remove(straightLine)\n    }\n  }, [lineAnchor, arrowPoint])\n\n  return null\n}\n",
    modules: [],
    statements: [
      {
        pos: 0,
        end: 33,
        name: "react",
        type: "module"
      },
      {
        pos: 33,
        end: 65,
        name: "fabric",
        type: "module"
      },
      {
        pos: 65,
        end: 2800,
        name: "Arrow",
        type: "function"
      }
    ]
  };
  var _home_taylor_GitHub_tater_taste_client_src_components_FabricCanvas = {
    fileName: "/home/taylor/GitHub/tater-taste/client/src/components/FabricCanvas/index.tsx",
    text: "import React, { useRef } from 'react'\nimport { fabric } from \"fabric\"\nimport { useEffect } from 'react'\nimport { css } from '@emotion/css'\n\nexport default function FabricCanvas ({ registerFabricCanvas, registerPointerState }) {\n  const canvasContainerRef = useRef<HTMLDivElement>()\n  const pointerState = useRef({ pan: false, x: 0, y: 0, relativeX: 0, relativeY: 0 })\n  const canvasRef = useRef()\n  const fabricRef = useRef<fabric.Canvas>()\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      fabricRef.current = new fabric.Canvas(canvasRef.current)\n    }\n  }, [canvasRef])\n\n  useEffect(() => {\n    registerFabricCanvas(fabricRef.current)\n    resizeCanvas()\n  }, [fabricRef])\n\n  useEffect(() => {\n    registerPointerState(pointerState.current)\n  }, [pointerState])\n\n  useEffect(() => {\n    if (canvasContainerRef.current) {\n      window.addEventListener('resize', resizeCanvas)\n      return () => {\n        window.removeEventListener('resize', resizeCanvas)\n      }\n    }\n  }, [canvasContainerRef])\n\n  function resizeCanvas () {\n    if (fabricRef.current) {\n      fabricRef.current.setWidth(canvasContainerRef.current.clientWidth)\n      fabricRef.current.setHeight(canvasContainerRef.current.clientHeight)\n      fabricRef.current.calcOffset()\n    }\n  }\n\n  function startPan(event) {\n    if (event.button === 2) {\n      pointerState.current.pan = true\n      pointerState.current.x = event.screenX\n      pointerState.current.y = event.screenY\n    }\n  }\n\n  function stopPan(event) {\n    pan(event)\n    pointerState.current.pan = false\n  }\n\n  function pan(event) {\n    if (pointerState.current.pan) {\n      if (fabricRef.current) {\n        pointerState.current.relativeX += event.screenX - pointerState.current.x\n        pointerState.current.relativeY += event.screenY - pointerState.current.y\n        fabricRef.current.relativePan({ x: event.screenX - pointerState.current.x, y: event.screenY - pointerState.current.y })\n      }\n      pointerState.current.x = event.screenX\n      pointerState.current.y = event.screenY\n    }\n  }\n\n  return (\n    <div className={css`\n      flex-grow: 1;\n    `} ref={canvasContainerRef}\n      onWheel={event => {\n        fabricRef.current.relativePan({ x: 0, y: -1 * event.deltaY })\n      }}\n      onContextMenu={e => e.preventDefault()}\n      onMouseDown={startPan}\n      onMouseUp={stopPan}\n      onMouseLeave={stopPan}\n      onMouseMove={pan} >\n      <canvas ref={canvasRef} />\n    </div>\n  )\n}\n",
    modules: [],
    statements: [
      {
        pos: 0,
        end: 37,
        name: "react",
        type: "module"
      },
      {
        pos: 37,
        end: 69,
        name: "fabric",
        type: "module"
      },
      {
        pos: 69,
        end: 103,
        name: "react",
        type: "module"
      },
      {
        pos: 103,
        end: 138,
        name: "@emotion/css",
        type: "module"
      },
      {
        pos: 138,
        end: 2429,
        name: "FabricCanvas",
        type: "function"
      }
    ]
  };
  var _home_taylor_GitHub_tater_taste_client_src_components_SearchResult = {
    fileName: "/home/taylor/GitHub/tater-taste/client/src/components/SearchResult/index.tsx",
    text: "import React from 'react';\nimport { css } from '@emotion/css'\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\n\nexport default function SearchResult({ sourceFileName, isDeclaration, callback }: { sourceFileName: string, isDeclaration?: boolean, callback: Function }) {\n  return (\n    <>\n      <Card className={css`\n          margin: 10px;\n          position: relative;\n          cursor: pointer;\n        `}\n        sx={{ minWidth: 275, maxWidth: 800 }}\n        onClick={() => callback()}>\n        <CardActions>\n          <h3>{sourceFileName}</h3>\n          {isDeclaration && <div className={css`\n            position: absolute;\n            top: 2px;\n            right: 2px;\n            color: #ff6767;\n          `}>\n            Declaration\n          </div>}\n        </CardActions>\n      </Card>\n    </>\n  )\n}\n",
    modules: [],
    statements: [
      {
        pos: 0,
        end: 26,
        name: "react",
        type: "module"
      },
      {
        pos: 26,
        end: 61,
        name: "@emotion/css",
        type: "module"
      },
      {
        pos: 61,
        end: 100,
        name: "@mui/material/Card",
        type: "module"
      },
      {
        pos: 100,
        end: 153,
        name: "@mui/material/CardActions",
        type: "module"
      },
      {
        pos: 153,
        end: 851,
        name: "SearchResult",
        type: "function"
      }
    ]
  };
  var sourceFiles_default = {
    "/home/taylor/GitHub/tater-taste/client/src/App.tsx": _home_taylor_GitHub_tater_taste_client_src_App_tsx,
    "/home/taylor/GitHub/tater-taste/client/src/views/Home": _home_taylor_GitHub_tater_taste_client_src_views_Home,
    "/home/taylor/GitHub/tater-taste/client/src/components/Explorer": _home_taylor_GitHub_tater_taste_client_src_components_Explorer,
    "/home/taylor/GitHub/tater-taste/ast/generateAST": _home_taylor_GitHub_tater_taste_ast_generateAST,
    "/home/taylor/GitHub/tater-taste/client/src/components/ExploreItem": _home_taylor_GitHub_tater_taste_client_src_components_ExploreItem,
    "/home/taylor/GitHub/tater-taste/client/src/utils/sourceFileHelpers": _home_taylor_GitHub_tater_taste_client_src_utils_sourceFileHelpers,
    "/home/taylor/GitHub/tater-taste/client/src/utils/fabricHelpers": _home_taylor_GitHub_tater_taste_client_src_utils_fabricHelpers,
    "/home/taylor/GitHub/tater-taste/client/src/components/Arrow": _home_taylor_GitHub_tater_taste_client_src_components_Arrow,
    "/home/taylor/GitHub/tater-taste/client/src/components/FabricCanvas": _home_taylor_GitHub_tater_taste_client_src_components_FabricCanvas,
    "/home/taylor/GitHub/tater-taste/client/src/components/SearchResult": _home_taylor_GitHub_tater_taste_client_src_components_SearchResult
  };

  // client/src/views/Home/index.tsx
  function Home() {
    return /* @__PURE__ */ import_react16.default.createElement("div", {
      className: css`
      min-width: 900px;
      height: 100%;
      display: flex;
      flex-direction: column;
    `
    }, /* @__PURE__ */ import_react16.default.createElement(Explorer, {
      fileGraph: fileGraph_default,
      sourceFileKeyMap: sourceFiles_default
    }));
  }

  // client/src/App.tsx
  import_react_dom2.default.render(/* @__PURE__ */ import_react17.default.createElement(Home, null), document.getElementById("app"));
})();
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! Fabric.js Copyright 2008-2015, Printio (Juriy Zaytsev, Maxim Chernyak) */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/** @license MUI v5.0.0-alpha.64
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license MUI v5.2.3
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license MUI v5.2.6
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
