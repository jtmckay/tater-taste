{
  "/home/taylor/GitHub/tater-taste/client/src/App": {
    "fileName": "/home/taylor/GitHub/tater-taste/client/src/App.tsx",
    "text": "import React from 'react'\nimport ReactDOM from 'react-dom'\nimport Home from './views/Home'\n\nReactDOM.render(\n  <Home />,\n  document.getElementById('app')\n)\n",
    "modules": [
      "/home/taylor/GitHub/tater-taste/client/src/views/Home/index.tsx"
    ],
    "statements": [
      {
        "pos": 0,
        "end": 25,
        "name": "react",
        "type": "module"
      },
      {
        "pos": 25,
        "end": 58,
        "name": "react-dom",
        "type": "module"
      },
      {
        "pos": 58,
        "end": 90,
        "name": "./views/Home",
        "type": "module"
      }
    ]
  },
  "/home/taylor/GitHub/tater-taste/client/src/views/Home": {
    "fileName": "/home/taylor/GitHub/tater-taste/client/src/views/Home/index.tsx",
    "text": "import React from 'react'\nimport Explorer from '../../components/Explorer'\nimport fileGraph from '../../fileGraph.json'\nimport sourceFiles from '../../sourceFiles.json'\n\nexport default function Home () {\n  return (\n    <div>\n      <div>Hello from the AST client!</div>\n      <Explorer fileGraph={fileGraph} sourceFiles={sourceFiles} />\n    </div>\n  )\n}\n",
    "modules": [
      "/home/taylor/GitHub/tater-taste/client/src/components/Explorer/index.tsx"
    ],
    "statements": [
      {
        "pos": 0,
        "end": 25,
        "name": "react",
        "type": "module"
      },
      {
        "pos": 25,
        "end": 74,
        "name": "../../components/Explorer",
        "type": "module"
      },
      {
        "pos": 74,
        "end": 119,
        "name": "../../fileGraph.json",
        "type": "module"
      },
      {
        "pos": 119,
        "end": 168,
        "name": "../../sourceFiles.json",
        "type": "module"
      },
      {
        "pos": 168,
        "end": 352,
        "name": "Home",
        "type": "statement"
      }
    ]
  },
  "/home/taylor/GitHub/tater-taste/client/src/components/Explorer": {
    "fileName": "/home/taylor/GitHub/tater-taste/client/src/components/Explorer/index.tsx",
    "text": "import React from 'react'\nimport { css } from '@emotion/css'\nimport { FileGraph, SourceFiles } from '../../../../ast/generateAST'\nimport SourceFile from '../SourceFile'\n\nexport default function Explorer ({ fileGraph, sourceFiles }: { fileGraph: FileGraph, sourceFiles: SourceFiles}) {\n  console.log('filegraphj', fileGraph.fileName)\n  console.log('sourceFiles', sourceFiles)\n  console.log('sourceFiles', sourceFiles[fileGraph.fileName])\n  return (\n    <div className={css`\n      margin: 20px;\n    `}>\n      <SourceFile sourceFile={sourceFiles[fileGraph.fileName]} />)\n    </div>\n  )\n}\n",
    "modules": [
      "/home/taylor/GitHub/tater-taste/ast/generateAST.ts",
      "/home/taylor/GitHub/tater-taste/client/src/components/SourceFile/index.tsx"
    ],
    "statements": [
      {
        "pos": 0,
        "end": 25,
        "name": "react",
        "type": "module"
      },
      {
        "pos": 25,
        "end": 60,
        "name": "@emotion/css",
        "type": "module"
      },
      {
        "pos": 60,
        "end": 129,
        "name": "../../../../ast/generateAST",
        "type": "module"
      },
      {
        "pos": 129,
        "end": 168,
        "name": "../SourceFile",
        "type": "module"
      },
      {
        "pos": 168,
        "end": 584,
        "name": "Explorer",
        "type": "statement"
      }
    ]
  },
  "/home/taylor/GitHub/tater-taste/ast/generateAST": {
    "fileName": "/home/taylor/GitHub/tater-taste/ast/generateAST.ts",
    "text": "import { existsSync } from 'fs';\nimport { join } from 'path';\nimport ts = require('typescript');\n\nconst logging = false;\n\nconst tsConfigCompilerOptions = {\n  moduleResolution: 2,\n  noImplicitAny: false,\n  target: 2,\n};\n\nexport function generateAST(entryPoint?: string, tsConfigPath?: string): { sourceFiles: SourceFiles, fileGraph: FileGraph } {\n  const entryFilePath = join(process.cwd(), entryPoint || '')\n  const program = ts.createProgram(fileVariations(entryFilePath).filter((i) => existsSync(i)), grabConfig(tsConfigPath));\n  const programFileMap: ts.Map<ts.SourceFile> = (program as any).getFilesByNameMap();\n  const sourceFiles: SourceFiles = {};\n\n  // console.log('program', program.getRootFileNames())\n\n  const fileGraph = traverseFile(sourceFiles, entryFilePath, programFileMap);\n  return { sourceFiles, fileGraph };\n}\n\nfunction grabConfig(tsConfigPath?: string) {\n  if (tsConfigPath) {\n    const tsConfigFilePath = join(process.cwd(), tsConfigPath)\n    try {\n      const tsConfig = require(tsConfigFilePath)\n      if (tsConfig.compilerOptions) {\n        return tsConfig.compilerOptions\n      }\n    } catch (err) {\n      console.log('Could not load tsconfig at', tsConfigFilePath, '\\nPlease ensure there are no comments in the tsconfig supplied\\n\\n')\n      throw err\n    }\n  }\n  return tsConfigCompilerOptions\n}\n\nfunction debugLog(...params: any) {\n  if (logging) {\n    debugLog(...params);\n  }\n}\n\nexport type SourceFiles = { [key: string]: SourceFile }\n\nexport type SourceFile = {\n  fileName: string,\n  text: string,\n  modules: string[]\n  statements?: Statement[]\n}\n\nexport type FileGraph = {\n  fileName: string,\n  modules: string[]\n}\n\nexport type Statement = {\n  pos: number,\n  end: number,\n  name: string,\n  type: string,\n}\n\nfunction traverseFile(sourceFiles: SourceFiles, file: string, fileMap: ts.Map<ts.SourceFile>, parentSourceFile?: any, importStatement?: string, prefix: string = ''): FileGraph {\n  const root = findFile(file, fileMap, importStatement);\n\n  if (!root && parentSourceFile && parentSourceFile.resolvedModules.get(importStatement)) {\n    const subProgram = ts.createProgram(fileVariations(file).filter((i) => existsSync(i)), tsConfigCompilerOptions);\n    const subFileMap: ts.Map<ts.SourceFile> = (subProgram as any).getFilesByNameMap();\n    return traverseFile(sourceFiles, file, subFileMap);\n  }\n\n  if (!root) {\n    throw new Error(`Could not find file ${file}`);\n  }\n  if (sourceFiles[file]) {\n    return sourceFiles[file];\n  }\n  const parsedFile: SourceFile = {\n    fileName: root.fileName,\n    text: root.text,\n    modules: [],\n    statements: [],\n  };\n  sourceFiles[file] = parsedFile;\n  root.statements.forEach((statement: any, index) => {\n    debugLog(prefix, 'Index', index);\n    if (statement.moduleSpecifier?.text) {\n      debugLog(prefix, 'statement moduleSpecifier text:', statement.moduleSpecifier.text);\n      try {\n        parsedFile.statements?.push({\n          pos: statement.pos,\n          end: statement.end,\n          name: statement.moduleSpecifier.text,\n          type: 'module',\n        });\n        const modulePath = join(root.fileName, '../', statement.moduleSpecifier.text);\n        parsedFile.modules.push(traverseFile(sourceFiles, modulePath, fileMap, root, statement.moduleSpecifier.text, `${prefix}\\t`).fileName);\n      } catch (err) {\n        console.info(prefix, `Skipped ${statement.moduleSpecifier.text} in ${file}`);\n      }\n    } else if (statement.name?.escapedText) {\n      debugLog(prefix, 'statement name:', statement.name?.escapedText);\n      parsedFile?.statements?.push({\n        pos: statement.pos,\n        end: statement.end,\n        name: statement.name?.escapedText,\n        type: 'statement',\n      });\n    } else if (statement.declarationList?.declarations) {\n      statement.declarationList.declarations.forEach((declaration: ts.Declaration & { name: { escapedText: string }}) => {\n        debugLog(prefix, 'declaration name:', declaration.name?.escapedText);\n        parsedFile?.statements?.push({\n          pos: statement.pos,\n          end: statement.end,\n          name: declaration.name?.escapedText,\n          type: 'declaration',\n        });\n      });\n    } else {\n      debugLog(prefix, 'Missed something', statement);\n    }\n  });\n  return { fileName: parsedFile.fileName, modules: parsedFile.modules };\n}\n\nfunction fileVariations(file: string): string[] {\n  return [\n    file,\n    `${file}.ts`,\n    `${file}.tsx`,\n    file.toLowerCase(),\n    `${file}.ts`.toLowerCase(),\n    `${file}.tsx`.toLowerCase(),\n    join(file, 'index.ts'),\n    join(file, 'index.tsx'),\n    join(file, 'index.ts').toLowerCase(),\n    join(file, 'index.tsx').toLowerCase(),\n  ];\n}\n\nfunction findFile(file: string, fileMap: ts.Map<ts.SourceFile>, importStatement?: string): ts.SourceFile | undefined {\n  let foundFile;\n  if (importStatement) {\n    fileVariations(importStatement).some((filePath) => {\n      foundFile = fileMap.get(filePath);\n      return !!foundFile;\n    });\n  }\n  if (!foundFile) {\n    fileVariations(file).some((filePath) => {\n      foundFile = fileMap.get(filePath);\n      return !!foundFile;\n    });\n  }\n  return foundFile;\n}\n",
    "modules": [],
    "statements": [
      {
        "pos": 0,
        "end": 32,
        "name": "fs",
        "type": "module"
      },
      {
        "pos": 32,
        "end": 61,
        "name": "path",
        "type": "module"
      },
      {
        "pos": 61,
        "end": 96,
        "name": "ts",
        "type": "statement"
      },
      {
        "pos": 96,
        "end": 120,
        "name": "logging",
        "type": "declaration"
      },
      {
        "pos": 120,
        "end": 218,
        "name": "tsConfigCompilerOptions",
        "type": "declaration"
      },
      {
        "pos": 218,
        "end": 829,
        "name": "generateAST",
        "type": "statement"
      },
      {
        "pos": 829,
        "end": 1322,
        "name": "grabConfig",
        "type": "statement"
      },
      {
        "pos": 1322,
        "end": 1407,
        "name": "debugLog",
        "type": "statement"
      },
      {
        "pos": 1407,
        "end": 1464,
        "name": "SourceFiles",
        "type": "statement"
      },
      {
        "pos": 1464,
        "end": 1577,
        "name": "SourceFile",
        "type": "statement"
      },
      {
        "pos": 1577,
        "end": 1646,
        "name": "FileGraph",
        "type": "statement"
      },
      {
        "pos": 1646,
        "end": 1737,
        "name": "Statement",
        "type": "statement"
      },
      {
        "pos": 1737,
        "end": 4297,
        "name": "traverseFile",
        "type": "statement"
      },
      {
        "pos": 4297,
        "end": 4644,
        "name": "fileVariations",
        "type": "statement"
      },
      {
        "pos": 4644,
        "end": 5109,
        "name": "findFile",
        "type": "statement"
      }
    ]
  },
  "/home/taylor/GitHub/tater-taste/client/src/components/SourceFile": {
    "fileName": "/home/taylor/GitHub/tater-taste/client/src/components/SourceFile/index.tsx",
    "text": "import React from 'react';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Accordion from '@mui/material/Accordion';\nimport AccordionSummary from '@mui/material/AccordionSummary';\nimport AccordionDetails from '@mui/material/AccordionDetails';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport { SourceFile } from '../../../../ast/generateAST'\n\nexport default function BasicCard({ sourceFile }: { sourceFile: SourceFile }) {\n  return (\n    <Card sx={{ minWidth: 275 }}>\n      <CardContent>\n        <h3>File: {sourceFile.fileName}</h3>\n        <div>\n          <div>\n            Modules: \n          </div>\n          {sourceFile.modules.map(module => {\n            return <div>\n              {module}\n            </div>\n          })}\n          <Accordion>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <h4>Expand More</h4>\n            </AccordionSummary>\n            <AccordionDetails>\n              <p>\n                {sourceFile.text}\n              </p>\n            </AccordionDetails>\n          </Accordion>\n        </div>\n      </CardContent>\n      <CardActions>\n        <Button size=\"small\">Expand</Button>\n      </CardActions>\n    </Card>\n  );\n}",
    "modules": [
      "/home/taylor/GitHub/tater-taste/ast/generateAST.ts"
    ],
    "statements": [
      {
        "pos": 0,
        "end": 26,
        "name": "react",
        "type": "module"
      },
      {
        "pos": 26,
        "end": 65,
        "name": "@mui/material/Card",
        "type": "module"
      },
      {
        "pos": 65,
        "end": 118,
        "name": "@mui/material/CardActions",
        "type": "module"
      },
      {
        "pos": 118,
        "end": 171,
        "name": "@mui/material/CardContent",
        "type": "module"
      },
      {
        "pos": 171,
        "end": 214,
        "name": "@mui/material/Button",
        "type": "module"
      },
      {
        "pos": 214,
        "end": 263,
        "name": "@mui/material/Accordion",
        "type": "module"
      },
      {
        "pos": 263,
        "end": 326,
        "name": "@mui/material/AccordionSummary",
        "type": "module"
      },
      {
        "pos": 326,
        "end": 389,
        "name": "@mui/material/AccordionDetails",
        "type": "module"
      },
      {
        "pos": 389,
        "end": 450,
        "name": "@mui/icons-material/ExpandMore",
        "type": "module"
      },
      {
        "pos": 450,
        "end": 507,
        "name": "../../../../ast/generateAST",
        "type": "module"
      },
      {
        "pos": 507,
        "end": 1451,
        "name": "BasicCard",
        "type": "statement"
      }
    ]
  }
}